
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 24 "D:/mysql56win/sql/sql_yacc.yy"

/*
Note: YYTHD is passed as an argument to yyparse(), and subsequently to yylex().
*/
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "rpl_slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(YYTHD, (char*) (A));            \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    MY_ATTRIBUTE ((__unused__))
  #endif
</pre>
  This usage of MY_ATTRIBUTE is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef MY_ATTRIBUTE
#define MY_ATTRIBUTE(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.


     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (pctx && tmp->var == Sys_autocommit_ptr)
    sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

#ifdef HAVE_REPLICATION
  if (lex->uses_stored_routines() &&
      ((tmp->var == Sys_gtid_next_ptr
#ifdef HAVE_GTID_NEXT_LIST
       || tmp->var == Sys_gtid_next_list_ptr
#endif
       ) ||
       Sys_gtid_purged_ptr == tmp->var))
  {
    my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
             tmp->var->name.str);
    return TRUE;
  }
#endif

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_cur_instr_trig_field_items.link_in_list(trg_fld,
                                                &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;

  mysql_init_select(lex);//这里清空什么意思？
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}

/**
  Compare a LEX_USER against the current user as defined by the exact user and
  host used during authentication.

  @param user A pointer to a user which needs to be matched against the
              current.

  @see SET PASSWORD rules

  @retval true The specified user is the authorized user
  @retval false The user doesn't match
*/

bool match_authorized_user(Security_context *ctx, LEX_USER *user)
{
  if(user->user.str && my_strcasecmp(system_charset_info,
                                     ctx->priv_user,
                                     user->user.str) == 0)
  {
    /*
      users match; let's compare hosts.
      1. first compare with the host we actually authorized,
      2. then see if we match the host mask of the priv_host
    */
    if (user->host.str && my_strcasecmp(system_charset_info,
                                        user->host.str,
                                        ctx->priv_host) == 0)
    {
      /* specified user exactly match the authorized user */
      return true;
    }
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 1029 "D:/mysql56win/bld/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CLASS_ORIGIN_SYM = 318,
     CLIENT_SYM = 319,
     CLOSE_SYM = 320,
     COALESCE = 321,
     CODE_SYM = 322,
     COLLATE_SYM = 323,
     COLLATION_SYM = 324,
     COLUMNS = 325,
     COLUMN_SYM = 326,
     COLUMN_FORMAT_SYM = 327,
     COLUMN_NAME_SYM = 328,
     COMMENT_SYM = 329,
     COMMITTED_SYM = 330,
     COMMIT_SYM = 331,
     COMPACT_SYM = 332,
     COMPLETION_SYM = 333,
     COMPRESSED_SYM = 334,
     CONCURRENT = 335,
     CONDITION_SYM = 336,
     CONNECTION_SYM = 337,
     CONSISTENT_SYM = 338,
     CONSTRAINT = 339,
     CONSTRAINT_CATALOG_SYM = 340,
     CONSTRAINT_NAME_SYM = 341,
     CONSTRAINT_SCHEMA_SYM = 342,
     CONTAINS_SYM = 343,
     CONTEXT_SYM = 344,
     CONTINUE_SYM = 345,
     CONVERT_SYM = 346,
     COUNT_SYM = 347,
     CPU_SYM = 348,
     CREATE = 349,
     CROSS = 350,
     CUBE_SYM = 351,
     CURDATE = 352,
     CURRENT_SYM = 353,
     CURRENT_USER = 354,
     CURSOR_SYM = 355,
     CURSOR_NAME_SYM = 356,
     CURTIME = 357,
     DATABASE = 358,
     DATABASES = 359,
     DATAFILE_SYM = 360,
     DATA_SYM = 361,
     DATETIME = 362,
     DATE_ADD_INTERVAL = 363,
     DATE_SUB_INTERVAL = 364,
     DATE_SYM = 365,
     DAY_HOUR_SYM = 366,
     DAY_MICROSECOND_SYM = 367,
     DAY_MINUTE_SYM = 368,
     DAY_SECOND_SYM = 369,
     DAY_SYM = 370,
     DBXP_SELECT_SYM = 371,
     DEALLOCATE_SYM = 372,
     DECIMAL_NUM = 373,
     DECIMAL_SYM = 374,
     DECLARE_SYM = 375,
     DEFAULT = 376,
     DEFAULT_AUTH_SYM = 377,
     DEFINER_SYM = 378,
     DELAYED_SYM = 379,
     DELAY_KEY_WRITE_SYM = 380,
     DELETE_SYM = 381,
     DESC = 382,
     DESCRIBE = 383,
     DES_KEY_FILE = 384,
     DETERMINISTIC_SYM = 385,
     DIAGNOSTICS_SYM = 386,
     DIRECTORY_SYM = 387,
     DISABLE_SYM = 388,
     DISCARD = 389,
     DISK_SYM = 390,
     DISTINCT = 391,
     DIV_SYM = 392,
     DOUBLE_SYM = 393,
     DO_SYM = 394,
     DROP = 395,
     DUAL_SYM = 396,
     DUMPFILE = 397,
     DUPLICATE_SYM = 398,
     DYNAMIC_SYM = 399,
     EACH_SYM = 400,
     ELSE = 401,
     ELSEIF_SYM = 402,
     ENABLE_SYM = 403,
     ENCLOSED = 404,
     END = 405,
     ENDS_SYM = 406,
     END_OF_INPUT = 407,
     ENGINES_SYM = 408,
     ENGINE_SYM = 409,
     ENUM = 410,
     EQ = 411,
     EQUAL_SYM = 412,
     ERROR_SYM = 413,
     ERRORS = 414,
     ESCAPED = 415,
     ESCAPE_SYM = 416,
     EVENTS_SYM = 417,
     EVENT_SYM = 418,
     EVERY_SYM = 419,
     EXCHANGE_SYM = 420,
     EXECUTE_SYM = 421,
     EXISTS = 422,
     EXIT_SYM = 423,
     EXPANSION_SYM = 424,
     EXPIRE_SYM = 425,
     EXPORT_SYM = 426,
     EXTENDED_SYM = 427,
     EXTENT_SIZE_SYM = 428,
     EXTRACT_SYM = 429,
     FALSE_SYM = 430,
     FAST_SYM = 431,
     FAULTS_SYM = 432,
     FETCH_SYM = 433,
     FILE_SYM = 434,
     FIRST_SYM = 435,
     FIXED_SYM = 436,
     FLOAT_NUM = 437,
     FLOAT_SYM = 438,
     FLUSH_SYM = 439,
     FORCE_SYM = 440,
     FOREIGN = 441,
     FOR_SYM = 442,
     FORMAT_SYM = 443,
     FOUND_SYM = 444,
     FROM = 445,
     FULL = 446,
     FULLTEXT_SYM = 447,
     FUNCTION_SYM = 448,
     GE = 449,
     GENERAL = 450,
     GEOMETRYCOLLECTION = 451,
     GEOMETRY_SYM = 452,
     GET_FORMAT = 453,
     GET_SYM = 454,
     GLOBAL_SYM = 455,
     GRANT = 456,
     GRANTS = 457,
     GROUP_SYM = 458,
     GROUP_CONCAT_SYM = 459,
     GT_SYM = 460,
     HANDLER_SYM = 461,
     HASH_SYM = 462,
     HAVING = 463,
     HELP_SYM = 464,
     HEX_NUM = 465,
     HIGH_PRIORITY = 466,
     HOST_SYM = 467,
     HOSTS_SYM = 468,
     HOUR_MICROSECOND_SYM = 469,
     HOUR_MINUTE_SYM = 470,
     HOUR_SECOND_SYM = 471,
     HOUR_SYM = 472,
     IDENT = 473,
     IDENTIFIED_SYM = 474,
     IDENT_QUOTED = 475,
     IF = 476,
     IGNORE_SYM = 477,
     IGNORE_SERVER_IDS_SYM = 478,
     IMPORT = 479,
     INDEXES = 480,
     INDEX_SYM = 481,
     INFILE = 482,
     INITIAL_SIZE_SYM = 483,
     INNER_SYM = 484,
     INOUT_SYM = 485,
     INSENSITIVE_SYM = 486,
     INSERT = 487,
     INSERT_METHOD = 488,
     INSTALL_SYM = 489,
     INTERVAL_SYM = 490,
     INTO = 491,
     INT_SYM = 492,
     INVOKER_SYM = 493,
     IN_SYM = 494,
     IO_AFTER_GTIDS = 495,
     IO_BEFORE_GTIDS = 496,
     IO_SYM = 497,
     IPC_SYM = 498,
     IS = 499,
     ISOLATION = 500,
     ISSUER_SYM = 501,
     ITERATE_SYM = 502,
     JOIN_SYM = 503,
     KEYS = 504,
     KEY_BLOCK_SIZE = 505,
     KEY_SYM = 506,
     KILL_SYM = 507,
     LANGUAGE_SYM = 508,
     LAST_SYM = 509,
     LE = 510,
     LEADING = 511,
     LEAVES = 512,
     LEAVE_SYM = 513,
     LEFT = 514,
     LESS_SYM = 515,
     LEVEL_SYM = 516,
     LEX_HOSTNAME = 517,
     LIKE = 518,
     LIMIT = 519,
     LINEAR_SYM = 520,
     LINES = 521,
     LINESTRING = 522,
     LIST_SYM = 523,
     LOAD = 524,
     LOCAL_SYM = 525,
     LOCATOR_SYM = 526,
     LOCKS_SYM = 527,
     LOCK_SYM = 528,
     LOGFILE_SYM = 529,
     LOGS_SYM = 530,
     LONGBLOB = 531,
     LONGTEXT = 532,
     LONG_NUM = 533,
     LONG_SYM = 534,
     LOOP_SYM = 535,
     LOW_PRIORITY = 536,
     LT = 537,
     MASTER_AUTO_POSITION_SYM = 538,
     MASTER_BIND_SYM = 539,
     MASTER_CONNECT_RETRY_SYM = 540,
     MASTER_DELAY_SYM = 541,
     MASTER_HOST_SYM = 542,
     MASTER_LOG_FILE_SYM = 543,
     MASTER_LOG_POS_SYM = 544,
     MASTER_PASSWORD_SYM = 545,
     MASTER_PORT_SYM = 546,
     MASTER_RETRY_COUNT_SYM = 547,
     MASTER_SERVER_ID_SYM = 548,
     MASTER_SSL_CAPATH_SYM = 549,
     MASTER_SSL_CA_SYM = 550,
     MASTER_SSL_CERT_SYM = 551,
     MASTER_SSL_CIPHER_SYM = 552,
     MASTER_SSL_CRL_SYM = 553,
     MASTER_SSL_CRLPATH_SYM = 554,
     MASTER_SSL_KEY_SYM = 555,
     MASTER_SSL_SYM = 556,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 557,
     MASTER_SYM = 558,
     MASTER_USER_SYM = 559,
     MASTER_HEARTBEAT_PERIOD_SYM = 560,
     MATCH = 561,
     MAX_CONNECTIONS_PER_HOUR = 562,
     MAX_QUERIES_PER_HOUR = 563,
     MAX_ROWS = 564,
     MAX_SIZE_SYM = 565,
     MAX_SYM = 566,
     MAX_UPDATES_PER_HOUR = 567,
     MAX_USER_CONNECTIONS_SYM = 568,
     MAX_VALUE_SYM = 569,
     MEDIUMBLOB = 570,
     MEDIUMINT = 571,
     MEDIUMTEXT = 572,
     MEDIUM_SYM = 573,
     MEMORY_SYM = 574,
     MERGE_SYM = 575,
     MESSAGE_TEXT_SYM = 576,
     MICROSECOND_SYM = 577,
     MIGRATE_SYM = 578,
     MINUTE_MICROSECOND_SYM = 579,
     MINUTE_SECOND_SYM = 580,
     MINUTE_SYM = 581,
     MIN_ROWS = 582,
     MIN_SYM = 583,
     MODE_SYM = 584,
     MODIFIES_SYM = 585,
     MODIFY_SYM = 586,
     MOD_SYM = 587,
     MONTH_SYM = 588,
     MULTILINESTRING = 589,
     MULTIPOINT = 590,
     MULTIPOLYGON = 591,
     MUTEX_SYM = 592,
     MYSQL_ERRNO_SYM = 593,
     NAMES_SYM = 594,
     NAME_SYM = 595,
     NATIONAL_SYM = 596,
     NATURAL = 597,
     NCHAR_STRING = 598,
     NCHAR_SYM = 599,
     NDBCLUSTER_SYM = 600,
     NE = 601,
     NEG = 602,
     NEW_SYM = 603,
     NEXT_SYM = 604,
     NODEGROUP_SYM = 605,
     NONE_SYM = 606,
     NOT2_SYM = 607,
     NOT_SYM = 608,
     NOW_SYM = 609,
     NO_SYM = 610,
     NO_WAIT_SYM = 611,
     NO_WRITE_TO_BINLOG = 612,
     NULL_SYM = 613,
     NUM = 614,
     NUMBER_SYM = 615,
     NUMERIC_SYM = 616,
     NVARCHAR_SYM = 617,
     OFFSET_SYM = 618,
     OLD_PASSWORD = 619,
     ON = 620,
     ONE_SYM = 621,
     ONLY_SYM = 622,
     OPEN_SYM = 623,
     OPTIMIZE = 624,
     OPTIONS_SYM = 625,
     OPTION = 626,
     OPTIONALLY = 627,
     OR2_SYM = 628,
     ORDER_SYM = 629,
     OR_OR_SYM = 630,
     OR_SYM = 631,
     OUTER = 632,
     OUTFILE = 633,
     OUT_SYM = 634,
     OWNER_SYM = 635,
     PACK_KEYS_SYM = 636,
     PAGE_SYM = 637,
     PARAM_MARKER = 638,
     PARSER_SYM = 639,
     PARTIAL = 640,
     PARTITION_SYM = 641,
     PARTITIONS_SYM = 642,
     PARTITIONING_SYM = 643,
     PASSWORD = 644,
     PHASE_SYM = 645,
     PLUGIN_DIR_SYM = 646,
     PLUGIN_SYM = 647,
     PLUGINS_SYM = 648,
     POINT_SYM = 649,
     POLYGON = 650,
     PORT_SYM = 651,
     POSITION_SYM = 652,
     PRECISION = 653,
     PREPARE_SYM = 654,
     PRESERVE_SYM = 655,
     PREV_SYM = 656,
     PRIMARY_SYM = 657,
     PRIVILEGES = 658,
     PROCEDURE_SYM = 659,
     PROCESS = 660,
     PROCESSLIST_SYM = 661,
     PROFILE_SYM = 662,
     PROFILES_SYM = 663,
     PROXY_SYM = 664,
     PURGE = 665,
     QUARTER_SYM = 666,
     QUERY_SYM = 667,
     QUICK = 668,
     RANGE_SYM = 669,
     READS_SYM = 670,
     READ_ONLY_SYM = 671,
     READ_SYM = 672,
     READ_WRITE_SYM = 673,
     REAL = 674,
     REBUILD_SYM = 675,
     RECOVER_SYM = 676,
     REDOFILE_SYM = 677,
     REDO_BUFFER_SIZE_SYM = 678,
     REDUNDANT_SYM = 679,
     REFERENCES = 680,
     REGEXP = 681,
     RELAY = 682,
     RELAYLOG_SYM = 683,
     RELAY_LOG_FILE_SYM = 684,
     RELAY_LOG_POS_SYM = 685,
     RELAY_THREAD = 686,
     RELEASE_SYM = 687,
     RELOAD = 688,
     REMOVE_SYM = 689,
     RENAME = 690,
     REORGANIZE_SYM = 691,
     REPAIR = 692,
     REPEATABLE_SYM = 693,
     REPEAT_SYM = 694,
     REPLACE = 695,
     REPLICATION = 696,
     REQUIRE_SYM = 697,
     RESET_SYM = 698,
     RESIGNAL_SYM = 699,
     RESOURCES = 700,
     RESTORE_SYM = 701,
     RESTRICT = 702,
     RESUME_SYM = 703,
     RETURNED_SQLSTATE_SYM = 704,
     RETURNS_SYM = 705,
     RETURN_SYM = 706,
     REVERSE_SYM = 707,
     REVOKE = 708,
     RIGHT = 709,
     ROLLBACK_SYM = 710,
     ROLLUP_SYM = 711,
     ROUTINE_SYM = 712,
     ROWS_SYM = 713,
     ROW_FORMAT_SYM = 714,
     ROW_SYM = 715,
     ROW_COUNT_SYM = 716,
     RTREE_SYM = 717,
     SAVEPOINT_SYM = 718,
     SCHEDULE_SYM = 719,
     SCHEMA_NAME_SYM = 720,
     SECOND_MICROSECOND_SYM = 721,
     SECOND_SYM = 722,
     SECURITY_SYM = 723,
     SELECT_SYM = 724,
     SENSITIVE_SYM = 725,
     SEPARATOR_SYM = 726,
     SERIALIZABLE_SYM = 727,
     SERIAL_SYM = 728,
     SESSION_SYM = 729,
     SERVER_SYM = 730,
     SERVER_OPTIONS = 731,
     SET = 732,
     SET_VAR = 733,
     SHARE_SYM = 734,
     SHIFT_LEFT = 735,
     SHIFT_RIGHT = 736,
     SHOW = 737,
     SHUTDOWN = 738,
     SIGNAL_SYM = 739,
     SIGNED_SYM = 740,
     SIMPLE_SYM = 741,
     SLAVE = 742,
     SLOW = 743,
     SMALLINT = 744,
     SNAPSHOT_SYM = 745,
     SOCKET_SYM = 746,
     SONAME_SYM = 747,
     SOUNDS_SYM = 748,
     SOURCE_SYM = 749,
     SPATIAL_SYM = 750,
     SPECIFIC_SYM = 751,
     SQLEXCEPTION_SYM = 752,
     SQLSTATE_SYM = 753,
     SQLWARNING_SYM = 754,
     SQL_AFTER_GTIDS = 755,
     SQL_AFTER_MTS_GAPS = 756,
     SQL_BEFORE_GTIDS = 757,
     SQL_BIG_RESULT = 758,
     SQL_BUFFER_RESULT = 759,
     SQL_CACHE_SYM = 760,
     SQL_CALC_FOUND_ROWS = 761,
     SQL_NO_CACHE_SYM = 762,
     SQL_SMALL_RESULT = 763,
     SQL_SYM = 764,
     SQL_THREAD = 765,
     SSL_SYM = 766,
     STARTING = 767,
     STARTS_SYM = 768,
     START_SYM = 769,
     STATS_AUTO_RECALC_SYM = 770,
     STATS_PERSISTENT_SYM = 771,
     STATS_SAMPLE_PAGES_SYM = 772,
     STATUS_SYM = 773,
     STDDEV_SAMP_SYM = 774,
     STD_SYM = 775,
     STOP_SYM = 776,
     STORAGE_SYM = 777,
     STRAIGHT_JOIN = 778,
     STRING_SYM = 779,
     SUBCLASS_ORIGIN_SYM = 780,
     SUBDATE_SYM = 781,
     SUBJECT_SYM = 782,
     SUBPARTITIONS_SYM = 783,
     SUBPARTITION_SYM = 784,
     SUBSTRING = 785,
     SUM_SYM = 786,
     SUPER_SYM = 787,
     SUSPEND_SYM = 788,
     SWAPS_SYM = 789,
     SWITCHES_SYM = 790,
     SYSDATE = 791,
     TABLES = 792,
     TABLESPACE = 793,
     TABLE_REF_PRIORITY = 794,
     TABLE_SYM = 795,
     TABLE_CHECKSUM_SYM = 796,
     TABLE_NAME_SYM = 797,
     TEMPORARY = 798,
     TEMPTABLE_SYM = 799,
     TERMINATED = 800,
     TEXT_STRING = 801,
     TEXT_SYM = 802,
     THAN_SYM = 803,
     THEN_SYM = 804,
     TIMESTAMP = 805,
     TIMESTAMP_ADD = 806,
     TIMESTAMP_DIFF = 807,
     TIME_SYM = 808,
     TINYBLOB = 809,
     TINYINT = 810,
     TINYTEXT = 811,
     TO_SYM = 812,
     TRAILING = 813,
     TRANSACTION_SYM = 814,
     TRIGGERS_SYM = 815,
     TRIGGER_SYM = 816,
     TRIM = 817,
     TRUE_SYM = 818,
     TRUNCATE_SYM = 819,
     TYPES_SYM = 820,
     TYPE_SYM = 821,
     UDF_RETURNS_SYM = 822,
     ULONGLONG_NUM = 823,
     UNCOMMITTED_SYM = 824,
     UNDEFINED_SYM = 825,
     UNDERSCORE_CHARSET = 826,
     UNDOFILE_SYM = 827,
     UNDO_BUFFER_SIZE_SYM = 828,
     UNDO_SYM = 829,
     UNICODE_SYM = 830,
     UNINSTALL_SYM = 831,
     UNION_SYM = 832,
     UNIQUE_SYM = 833,
     UNKNOWN_SYM = 834,
     UNLOCK_SYM = 835,
     UNSIGNED = 836,
     UNTIL_SYM = 837,
     UPDATE_SYM = 838,
     UPGRADE_SYM = 839,
     USAGE = 840,
     USER = 841,
     USE_FRM = 842,
     USE_SYM = 843,
     USING = 844,
     UTC_DATE_SYM = 845,
     UTC_TIMESTAMP_SYM = 846,
     UTC_TIME_SYM = 847,
     VALUES = 848,
     VALUE_SYM = 849,
     VARBINARY = 850,
     VARCHAR = 851,
     VARIABLES = 852,
     VARIANCE_SYM = 853,
     VARYING = 854,
     VAR_SAMP_SYM = 855,
     VIEW_SYM = 856,
     WAIT_SYM = 857,
     WARNINGS = 858,
     WEEK_SYM = 859,
     WEIGHT_STRING_SYM = 860,
     WHEN_SYM = 861,
     WHERE = 862,
     WHILE_SYM = 863,
     WITH = 864,
     WITH_CUBE_SYM = 865,
     WITH_ROLLUP_SYM = 866,
     WORK_SYM = 867,
     WRAPPER_SYM = 868,
     WRITE_SYM = 869,
     X509_SYM = 870,
     XA_SYM = 871,
     XML_SYM = 872,
     XOR = 873,
     YEAR_MONTH_SYM = 874,
     YEAR_SYM = 875,
     ZEROFILL = 876
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CATALOG_NAME_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHARSET 313
#define CHAR_SYM 314
#define CHECKSUM_SYM 315
#define CHECK_SYM 316
#define CIPHER_SYM 317
#define CLASS_ORIGIN_SYM 318
#define CLIENT_SYM 319
#define CLOSE_SYM 320
#define COALESCE 321
#define CODE_SYM 322
#define COLLATE_SYM 323
#define COLLATION_SYM 324
#define COLUMNS 325
#define COLUMN_SYM 326
#define COLUMN_FORMAT_SYM 327
#define COLUMN_NAME_SYM 328
#define COMMENT_SYM 329
#define COMMITTED_SYM 330
#define COMMIT_SYM 331
#define COMPACT_SYM 332
#define COMPLETION_SYM 333
#define COMPRESSED_SYM 334
#define CONCURRENT 335
#define CONDITION_SYM 336
#define CONNECTION_SYM 337
#define CONSISTENT_SYM 338
#define CONSTRAINT 339
#define CONSTRAINT_CATALOG_SYM 340
#define CONSTRAINT_NAME_SYM 341
#define CONSTRAINT_SCHEMA_SYM 342
#define CONTAINS_SYM 343
#define CONTEXT_SYM 344
#define CONTINUE_SYM 345
#define CONVERT_SYM 346
#define COUNT_SYM 347
#define CPU_SYM 348
#define CREATE 349
#define CROSS 350
#define CUBE_SYM 351
#define CURDATE 352
#define CURRENT_SYM 353
#define CURRENT_USER 354
#define CURSOR_SYM 355
#define CURSOR_NAME_SYM 356
#define CURTIME 357
#define DATABASE 358
#define DATABASES 359
#define DATAFILE_SYM 360
#define DATA_SYM 361
#define DATETIME 362
#define DATE_ADD_INTERVAL 363
#define DATE_SUB_INTERVAL 364
#define DATE_SYM 365
#define DAY_HOUR_SYM 366
#define DAY_MICROSECOND_SYM 367
#define DAY_MINUTE_SYM 368
#define DAY_SECOND_SYM 369
#define DAY_SYM 370
#define DBXP_SELECT_SYM 371
#define DEALLOCATE_SYM 372
#define DECIMAL_NUM 373
#define DECIMAL_SYM 374
#define DECLARE_SYM 375
#define DEFAULT 376
#define DEFAULT_AUTH_SYM 377
#define DEFINER_SYM 378
#define DELAYED_SYM 379
#define DELAY_KEY_WRITE_SYM 380
#define DELETE_SYM 381
#define DESC 382
#define DESCRIBE 383
#define DES_KEY_FILE 384
#define DETERMINISTIC_SYM 385
#define DIAGNOSTICS_SYM 386
#define DIRECTORY_SYM 387
#define DISABLE_SYM 388
#define DISCARD 389
#define DISK_SYM 390
#define DISTINCT 391
#define DIV_SYM 392
#define DOUBLE_SYM 393
#define DO_SYM 394
#define DROP 395
#define DUAL_SYM 396
#define DUMPFILE 397
#define DUPLICATE_SYM 398
#define DYNAMIC_SYM 399
#define EACH_SYM 400
#define ELSE 401
#define ELSEIF_SYM 402
#define ENABLE_SYM 403
#define ENCLOSED 404
#define END 405
#define ENDS_SYM 406
#define END_OF_INPUT 407
#define ENGINES_SYM 408
#define ENGINE_SYM 409
#define ENUM 410
#define EQ 411
#define EQUAL_SYM 412
#define ERROR_SYM 413
#define ERRORS 414
#define ESCAPED 415
#define ESCAPE_SYM 416
#define EVENTS_SYM 417
#define EVENT_SYM 418
#define EVERY_SYM 419
#define EXCHANGE_SYM 420
#define EXECUTE_SYM 421
#define EXISTS 422
#define EXIT_SYM 423
#define EXPANSION_SYM 424
#define EXPIRE_SYM 425
#define EXPORT_SYM 426
#define EXTENDED_SYM 427
#define EXTENT_SIZE_SYM 428
#define EXTRACT_SYM 429
#define FALSE_SYM 430
#define FAST_SYM 431
#define FAULTS_SYM 432
#define FETCH_SYM 433
#define FILE_SYM 434
#define FIRST_SYM 435
#define FIXED_SYM 436
#define FLOAT_NUM 437
#define FLOAT_SYM 438
#define FLUSH_SYM 439
#define FORCE_SYM 440
#define FOREIGN 441
#define FOR_SYM 442
#define FORMAT_SYM 443
#define FOUND_SYM 444
#define FROM 445
#define FULL 446
#define FULLTEXT_SYM 447
#define FUNCTION_SYM 448
#define GE 449
#define GENERAL 450
#define GEOMETRYCOLLECTION 451
#define GEOMETRY_SYM 452
#define GET_FORMAT 453
#define GET_SYM 454
#define GLOBAL_SYM 455
#define GRANT 456
#define GRANTS 457
#define GROUP_SYM 458
#define GROUP_CONCAT_SYM 459
#define GT_SYM 460
#define HANDLER_SYM 461
#define HASH_SYM 462
#define HAVING 463
#define HELP_SYM 464
#define HEX_NUM 465
#define HIGH_PRIORITY 466
#define HOST_SYM 467
#define HOSTS_SYM 468
#define HOUR_MICROSECOND_SYM 469
#define HOUR_MINUTE_SYM 470
#define HOUR_SECOND_SYM 471
#define HOUR_SYM 472
#define IDENT 473
#define IDENTIFIED_SYM 474
#define IDENT_QUOTED 475
#define IF 476
#define IGNORE_SYM 477
#define IGNORE_SERVER_IDS_SYM 478
#define IMPORT 479
#define INDEXES 480
#define INDEX_SYM 481
#define INFILE 482
#define INITIAL_SIZE_SYM 483
#define INNER_SYM 484
#define INOUT_SYM 485
#define INSENSITIVE_SYM 486
#define INSERT 487
#define INSERT_METHOD 488
#define INSTALL_SYM 489
#define INTERVAL_SYM 490
#define INTO 491
#define INT_SYM 492
#define INVOKER_SYM 493
#define IN_SYM 494
#define IO_AFTER_GTIDS 495
#define IO_BEFORE_GTIDS 496
#define IO_SYM 497
#define IPC_SYM 498
#define IS 499
#define ISOLATION 500
#define ISSUER_SYM 501
#define ITERATE_SYM 502
#define JOIN_SYM 503
#define KEYS 504
#define KEY_BLOCK_SIZE 505
#define KEY_SYM 506
#define KILL_SYM 507
#define LANGUAGE_SYM 508
#define LAST_SYM 509
#define LE 510
#define LEADING 511
#define LEAVES 512
#define LEAVE_SYM 513
#define LEFT 514
#define LESS_SYM 515
#define LEVEL_SYM 516
#define LEX_HOSTNAME 517
#define LIKE 518
#define LIMIT 519
#define LINEAR_SYM 520
#define LINES 521
#define LINESTRING 522
#define LIST_SYM 523
#define LOAD 524
#define LOCAL_SYM 525
#define LOCATOR_SYM 526
#define LOCKS_SYM 527
#define LOCK_SYM 528
#define LOGFILE_SYM 529
#define LOGS_SYM 530
#define LONGBLOB 531
#define LONGTEXT 532
#define LONG_NUM 533
#define LONG_SYM 534
#define LOOP_SYM 535
#define LOW_PRIORITY 536
#define LT 537
#define MASTER_AUTO_POSITION_SYM 538
#define MASTER_BIND_SYM 539
#define MASTER_CONNECT_RETRY_SYM 540
#define MASTER_DELAY_SYM 541
#define MASTER_HOST_SYM 542
#define MASTER_LOG_FILE_SYM 543
#define MASTER_LOG_POS_SYM 544
#define MASTER_PASSWORD_SYM 545
#define MASTER_PORT_SYM 546
#define MASTER_RETRY_COUNT_SYM 547
#define MASTER_SERVER_ID_SYM 548
#define MASTER_SSL_CAPATH_SYM 549
#define MASTER_SSL_CA_SYM 550
#define MASTER_SSL_CERT_SYM 551
#define MASTER_SSL_CIPHER_SYM 552
#define MASTER_SSL_CRL_SYM 553
#define MASTER_SSL_CRLPATH_SYM 554
#define MASTER_SSL_KEY_SYM 555
#define MASTER_SSL_SYM 556
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 557
#define MASTER_SYM 558
#define MASTER_USER_SYM 559
#define MASTER_HEARTBEAT_PERIOD_SYM 560
#define MATCH 561
#define MAX_CONNECTIONS_PER_HOUR 562
#define MAX_QUERIES_PER_HOUR 563
#define MAX_ROWS 564
#define MAX_SIZE_SYM 565
#define MAX_SYM 566
#define MAX_UPDATES_PER_HOUR 567
#define MAX_USER_CONNECTIONS_SYM 568
#define MAX_VALUE_SYM 569
#define MEDIUMBLOB 570
#define MEDIUMINT 571
#define MEDIUMTEXT 572
#define MEDIUM_SYM 573
#define MEMORY_SYM 574
#define MERGE_SYM 575
#define MESSAGE_TEXT_SYM 576
#define MICROSECOND_SYM 577
#define MIGRATE_SYM 578
#define MINUTE_MICROSECOND_SYM 579
#define MINUTE_SECOND_SYM 580
#define MINUTE_SYM 581
#define MIN_ROWS 582
#define MIN_SYM 583
#define MODE_SYM 584
#define MODIFIES_SYM 585
#define MODIFY_SYM 586
#define MOD_SYM 587
#define MONTH_SYM 588
#define MULTILINESTRING 589
#define MULTIPOINT 590
#define MULTIPOLYGON 591
#define MUTEX_SYM 592
#define MYSQL_ERRNO_SYM 593
#define NAMES_SYM 594
#define NAME_SYM 595
#define NATIONAL_SYM 596
#define NATURAL 597
#define NCHAR_STRING 598
#define NCHAR_SYM 599
#define NDBCLUSTER_SYM 600
#define NE 601
#define NEG 602
#define NEW_SYM 603
#define NEXT_SYM 604
#define NODEGROUP_SYM 605
#define NONE_SYM 606
#define NOT2_SYM 607
#define NOT_SYM 608
#define NOW_SYM 609
#define NO_SYM 610
#define NO_WAIT_SYM 611
#define NO_WRITE_TO_BINLOG 612
#define NULL_SYM 613
#define NUM 614
#define NUMBER_SYM 615
#define NUMERIC_SYM 616
#define NVARCHAR_SYM 617
#define OFFSET_SYM 618
#define OLD_PASSWORD 619
#define ON 620
#define ONE_SYM 621
#define ONLY_SYM 622
#define OPEN_SYM 623
#define OPTIMIZE 624
#define OPTIONS_SYM 625
#define OPTION 626
#define OPTIONALLY 627
#define OR2_SYM 628
#define ORDER_SYM 629
#define OR_OR_SYM 630
#define OR_SYM 631
#define OUTER 632
#define OUTFILE 633
#define OUT_SYM 634
#define OWNER_SYM 635
#define PACK_KEYS_SYM 636
#define PAGE_SYM 637
#define PARAM_MARKER 638
#define PARSER_SYM 639
#define PARTIAL 640
#define PARTITION_SYM 641
#define PARTITIONS_SYM 642
#define PARTITIONING_SYM 643
#define PASSWORD 644
#define PHASE_SYM 645
#define PLUGIN_DIR_SYM 646
#define PLUGIN_SYM 647
#define PLUGINS_SYM 648
#define POINT_SYM 649
#define POLYGON 650
#define PORT_SYM 651
#define POSITION_SYM 652
#define PRECISION 653
#define PREPARE_SYM 654
#define PRESERVE_SYM 655
#define PREV_SYM 656
#define PRIMARY_SYM 657
#define PRIVILEGES 658
#define PROCEDURE_SYM 659
#define PROCESS 660
#define PROCESSLIST_SYM 661
#define PROFILE_SYM 662
#define PROFILES_SYM 663
#define PROXY_SYM 664
#define PURGE 665
#define QUARTER_SYM 666
#define QUERY_SYM 667
#define QUICK 668
#define RANGE_SYM 669
#define READS_SYM 670
#define READ_ONLY_SYM 671
#define READ_SYM 672
#define READ_WRITE_SYM 673
#define REAL 674
#define REBUILD_SYM 675
#define RECOVER_SYM 676
#define REDOFILE_SYM 677
#define REDO_BUFFER_SIZE_SYM 678
#define REDUNDANT_SYM 679
#define REFERENCES 680
#define REGEXP 681
#define RELAY 682
#define RELAYLOG_SYM 683
#define RELAY_LOG_FILE_SYM 684
#define RELAY_LOG_POS_SYM 685
#define RELAY_THREAD 686
#define RELEASE_SYM 687
#define RELOAD 688
#define REMOVE_SYM 689
#define RENAME 690
#define REORGANIZE_SYM 691
#define REPAIR 692
#define REPEATABLE_SYM 693
#define REPEAT_SYM 694
#define REPLACE 695
#define REPLICATION 696
#define REQUIRE_SYM 697
#define RESET_SYM 698
#define RESIGNAL_SYM 699
#define RESOURCES 700
#define RESTORE_SYM 701
#define RESTRICT 702
#define RESUME_SYM 703
#define RETURNED_SQLSTATE_SYM 704
#define RETURNS_SYM 705
#define RETURN_SYM 706
#define REVERSE_SYM 707
#define REVOKE 708
#define RIGHT 709
#define ROLLBACK_SYM 710
#define ROLLUP_SYM 711
#define ROUTINE_SYM 712
#define ROWS_SYM 713
#define ROW_FORMAT_SYM 714
#define ROW_SYM 715
#define ROW_COUNT_SYM 716
#define RTREE_SYM 717
#define SAVEPOINT_SYM 718
#define SCHEDULE_SYM 719
#define SCHEMA_NAME_SYM 720
#define SECOND_MICROSECOND_SYM 721
#define SECOND_SYM 722
#define SECURITY_SYM 723
#define SELECT_SYM 724
#define SENSITIVE_SYM 725
#define SEPARATOR_SYM 726
#define SERIALIZABLE_SYM 727
#define SERIAL_SYM 728
#define SESSION_SYM 729
#define SERVER_SYM 730
#define SERVER_OPTIONS 731
#define SET 732
#define SET_VAR 733
#define SHARE_SYM 734
#define SHIFT_LEFT 735
#define SHIFT_RIGHT 736
#define SHOW 737
#define SHUTDOWN 738
#define SIGNAL_SYM 739
#define SIGNED_SYM 740
#define SIMPLE_SYM 741
#define SLAVE 742
#define SLOW 743
#define SMALLINT 744
#define SNAPSHOT_SYM 745
#define SOCKET_SYM 746
#define SONAME_SYM 747
#define SOUNDS_SYM 748
#define SOURCE_SYM 749
#define SPATIAL_SYM 750
#define SPECIFIC_SYM 751
#define SQLEXCEPTION_SYM 752
#define SQLSTATE_SYM 753
#define SQLWARNING_SYM 754
#define SQL_AFTER_GTIDS 755
#define SQL_AFTER_MTS_GAPS 756
#define SQL_BEFORE_GTIDS 757
#define SQL_BIG_RESULT 758
#define SQL_BUFFER_RESULT 759
#define SQL_CACHE_SYM 760
#define SQL_CALC_FOUND_ROWS 761
#define SQL_NO_CACHE_SYM 762
#define SQL_SMALL_RESULT 763
#define SQL_SYM 764
#define SQL_THREAD 765
#define SSL_SYM 766
#define STARTING 767
#define STARTS_SYM 768
#define START_SYM 769
#define STATS_AUTO_RECALC_SYM 770
#define STATS_PERSISTENT_SYM 771
#define STATS_SAMPLE_PAGES_SYM 772
#define STATUS_SYM 773
#define STDDEV_SAMP_SYM 774
#define STD_SYM 775
#define STOP_SYM 776
#define STORAGE_SYM 777
#define STRAIGHT_JOIN 778
#define STRING_SYM 779
#define SUBCLASS_ORIGIN_SYM 780
#define SUBDATE_SYM 781
#define SUBJECT_SYM 782
#define SUBPARTITIONS_SYM 783
#define SUBPARTITION_SYM 784
#define SUBSTRING 785
#define SUM_SYM 786
#define SUPER_SYM 787
#define SUSPEND_SYM 788
#define SWAPS_SYM 789
#define SWITCHES_SYM 790
#define SYSDATE 791
#define TABLES 792
#define TABLESPACE 793
#define TABLE_REF_PRIORITY 794
#define TABLE_SYM 795
#define TABLE_CHECKSUM_SYM 796
#define TABLE_NAME_SYM 797
#define TEMPORARY 798
#define TEMPTABLE_SYM 799
#define TERMINATED 800
#define TEXT_STRING 801
#define TEXT_SYM 802
#define THAN_SYM 803
#define THEN_SYM 804
#define TIMESTAMP 805
#define TIMESTAMP_ADD 806
#define TIMESTAMP_DIFF 807
#define TIME_SYM 808
#define TINYBLOB 809
#define TINYINT 810
#define TINYTEXT 811
#define TO_SYM 812
#define TRAILING 813
#define TRANSACTION_SYM 814
#define TRIGGERS_SYM 815
#define TRIGGER_SYM 816
#define TRIM 817
#define TRUE_SYM 818
#define TRUNCATE_SYM 819
#define TYPES_SYM 820
#define TYPE_SYM 821
#define UDF_RETURNS_SYM 822
#define ULONGLONG_NUM 823
#define UNCOMMITTED_SYM 824
#define UNDEFINED_SYM 825
#define UNDERSCORE_CHARSET 826
#define UNDOFILE_SYM 827
#define UNDO_BUFFER_SIZE_SYM 828
#define UNDO_SYM 829
#define UNICODE_SYM 830
#define UNINSTALL_SYM 831
#define UNION_SYM 832
#define UNIQUE_SYM 833
#define UNKNOWN_SYM 834
#define UNLOCK_SYM 835
#define UNSIGNED 836
#define UNTIL_SYM 837
#define UPDATE_SYM 838
#define UPGRADE_SYM 839
#define USAGE 840
#define USER 841
#define USE_FRM 842
#define USE_SYM 843
#define USING 844
#define UTC_DATE_SYM 845
#define UTC_TIMESTAMP_SYM 846
#define UTC_TIME_SYM 847
#define VALUES 848
#define VALUE_SYM 849
#define VARBINARY 850
#define VARCHAR 851
#define VARIABLES 852
#define VARIANCE_SYM 853
#define VARYING 854
#define VAR_SAMP_SYM 855
#define VIEW_SYM 856
#define WAIT_SYM 857
#define WARNINGS 858
#define WEEK_SYM 859
#define WEIGHT_STRING_SYM 860
#define WHEN_SYM 861
#define WHERE 862
#define WHILE_SYM 863
#define WITH 864
#define WITH_CUBE_SYM 865
#define WITH_ROLLUP_SYM 866
#define WORK_SYM 867
#define WRAPPER_SYM 868
#define WRITE_SYM 869
#define X509_SYM 870
#define XA_SYM 871
#define XML_SYM 872
#define XOR 873
#define YEAR_MONTH_SYM 874
#define YEAR_SYM 875
#define ZEROFILL 876




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 970 "D:/mysql56win/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2367 "D:/mysql56win/bld/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 1028 "D:/mysql56win/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2384 "D:/mysql56win/bld/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  601
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   55736

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  641
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  957
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2682
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4549

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   876

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   634,     2,     2,     2,   628,   623,     2,
     631,   632,   626,   625,   633,   624,   639,   627,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   640,   637,
       2,     2,     2,     2,   638,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   629,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   635,   622,   636,   630,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     176,   178,   182,   186,   190,   194,   198,   202,   206,   210,
     214,   218,   222,   226,   230,   234,   238,   242,   246,   250,
     254,   260,   264,   266,   267,   269,   273,   275,   279,   283,
     287,   291,   292,   300,   301,   302,   317,   318,   319,   334,
     335,   336,   351,   352,   359,   360,   364,   369,   374,   378,
     381,   392,   394,   398,   401,   404,   407,   410,   413,   416,
     419,   420,   434,   435,   442,   445,   446,   448,   452,   454,
     455,   458,   459,   462,   463,   465,   469,   474,   475,   478,
     479,   482,   484,   486,   488,   490,   492,   494,   496,   498,
     500,   502,   504,   506,   508,   509,   513,   515,   516,   519,
     520,   523,   526,   529,   532,   535,   539,   543,   545,   547,
     549,   552,   556,   560,   561,   566,   567,   571,   572,   574,
     578,   580,   581,   583,   587,   589,   590,   594,   595,   597,
     601,   603,   608,   609,   611,   613,   615,   616,   620,   623,
     627,   628,   632,   633,   639,   645,   646,   654,   655,   662,
     664,   666,   668,   672,   674,   676,   678,   682,   683,   685,
     687,   689,   691,   694,   696,   700,   702,   704,   705,   707,
     708,   711,   715,   721,   723,   725,   727,   729,   731,   733,
     735,   737,   739,   741,   743,   745,   747,   749,   751,   755,
     760,   761,   763,   765,   769,   771,   775,   779,   781,   784,
     786,   788,   790,   792,   796,   800,   802,   804,   806,   808,
     810,   812,   814,   816,   818,   820,   822,   824,   826,   828,
     832,   833,   834,   838,   840,   842,   844,   846,   848,   850,
     852,   854,   856,   858,   860,   862,   864,   865,   871,   872,
     875,   876,   880,   881,   884,   887,   890,   893,   894,   901,
     904,   905,   908,   910,   912,   916,   917,   918,   919,   927,
     928,   931,   934,   936,   938,   939,   940,   949,   950,   957,
     959,   962,   964,   967,   968,   969,   976,   977,   978,   985,
     986,   989,   990,   996,   997,   999,  1000,  1006,  1007,  1010,
    1011,  1017,  1022,  1023,  1024,  1033,  1034,  1035,  1044,  1046,
    1048,  1050,  1052,  1054,  1057,  1062,  1068,  1069,  1074,  1079,
    1084,  1088,  1092,  1095,  1098,  1099,  1102,  1104,  1107,  1111,
    1113,  1115,  1117,  1118,  1120,  1122,  1125,  1129,  1131,  1133,
    1135,  1137,  1139,  1141,  1143,  1145,  1146,  1148,  1150,  1153,
    1157,  1159,  1161,  1163,  1165,  1167,  1168,  1170,  1172,  1175,
    1179,  1181,  1183,  1185,  1187,  1189,  1191,  1193,  1194,  1196,
    1198,  1201,  1205,  1207,  1209,  1211,  1214,  1217,  1220,  1222,
    1224,  1226,  1228,  1231,  1235,  1239,  1243,  1247,  1251,  1255,
    1259,  1263,  1268,  1270,  1272,  1274,  1276,  1279,  1283,  1286,
    1291,  1297,  1298,  1304,  1305,  1306,  1312,  1313,  1321,  1323,
    1324,  1326,  1327,  1332,  1333,  1334,  1338,  1344,  1351,  1352,
    1357,  1360,  1363,  1366,  1369,  1370,  1372,  1373,  1377,  1378,
    1380,  1382,  1386,  1388,  1393,  1399,  1405,  1406,  1409,  1410,
    1411,  1419,  1420,  1431,  1433,  1437,  1439,  1441,  1442,  1445,
    1446,  1450,  1452,  1456,  1457,  1464,  1466,  1467,  1468,  1474,
    1475,  1480,  1482,  1484,  1486,  1490,  1492,  1496,  1497,  1498,
    1504,  1506,  1510,  1512,  1514,  1515,  1519,  1521,  1525,  1526,
    1531,  1533,  1534,  1536,  1539,  1541,  1545,  1550,  1554,  1558,
    1562,  1567,  1572,  1576,  1577,  1578,  1585,  1586,  1588,  1589,
    1591,  1593,  1596,  1598,  1600,  1601,  1603,  1605,  1608,  1610,
    1611,  1615,  1616,  1618,  1620,  1623,  1625,  1628,  1632,  1636,
    1640,  1644,  1648,  1652,  1656,  1660,  1664,  1668,  1672,  1676,
    1680,  1684,  1688,  1692,  1696,  1700,  1704,  1708,  1709,  1716,
    1718,  1720,  1724,  1729,  1734,  1737,  1740,  1743,  1747,  1751,
    1756,  1761,  1763,  1765,  1767,  1769,  1771,  1773,  1775,  1777,
    1779,  1781,  1783,  1785,  1788,  1790,  1792,  1794,  1796,  1798,
    1800,  1804,  1806,  1808,  1811,  1814,  1822,  1831,  1840,  1849,
    1858,  1861,  1862,  1864,  1869,  1870,  1872,  1875,  1876,  1881,
    1885,  1889,  1893,  1895,  1898,  1900,  1902,  1906,  1909,  1913,
    1916,  1919,  1921,  1925,  1929,  1932,  1936,  1938,  1941,  1944,
    1947,  1949,  1952,  1954,  1956,  1958,  1961,  1965,  1968,  1972,
    1975,  1978,  1982,  1986,  1990,  1991,  1998,  1999,  2006,  2009,
    2011,  2013,  2015,  2017,  2019,  2021,  2023,  2025,  2027,  2029,
    2031,  2034,  2037,  2039,  2042,  2044,  2047,  2051,  2054,  2056,
    2058,  2060,  2062,  2064,  2066,  2068,  2071,  2072,  2074,  2076,
    2082,  2083,  2087,  2088,  2091,  2095,  2096,  2098,  2101,  2103,
    2105,  2107,  2109,  2113,  2117,  2121,  2125,  2126,  2128,  2129,
    2131,  2132,  2134,  2137,  2139,  2141,  2144,  2147,  2151,  2153,
    2157,  2160,  2162,  2165,  2168,  2171,  2174,  2177,  2180,  2183,
    2186,  2189,  2192,  2195,  2197,  2199,  2202,  2204,  2206,  2208,
    2210,  2212,  2213,  2216,  2218,  2220,  2222,  2224,  2226,  2227,
    2230,  2232,  2234,  2235,  2237,  2239,  2242,  2245,  2247,  2250,
    2253,  2254,  2256,  2258,  2260,  2264,  2266,  2270,  2271,  2273,
    2274,  2279,  2281,  2283,  2285,  2286,  2288,  2291,  2293,  2295,
    2298,  2300,  2304,  2308,  2310,  2312,  2313,  2316,  2317,  2319,
    2325,  2326,  2330,  2334,  2336,  2337,  2340,  2343,  2346,  2347,
    2351,  2355,  2362,  2369,  2371,  2373,  2376,  2379,  2382,  2384,
    2387,  2390,  2392,  2394,  2395,  2397,  2399,  2401,  2403,  2404,
    2406,  2408,  2410,  2411,  2413,  2416,  2417,  2419,  2420,  2422,
    2423,  2425,  2427,  2430,  2432,  2435,  2437,  2440,  2443,  2446,
    2450,  2453,  2455,  2457,  2459,  2461,  2465,  2467,  2469,  2471,
    2476,  2479,  2481,  2486,  2487,  2489,  2490,  2493,  2495,  2499,
    2500,  2507,  2508,  2514,  2522,  2523,  2529,  2530,  2536,  2537,
    2543,  2544,  2549,  2550,  2561,  2565,  2570,  2574,  2578,  2586,
    2591,  2595,  2601,  2602,  2606,  2608,  2613,  2614,  2618,  2619,
    2622,  2623,  2625,  2626,  2629,  2632,  2635,  2638,  2640,  2642,
    2644,  2648,  2653,  2654,  2661,  2666,  2667,  2673,  2674,  2681,
    2686,  2690,  2692,  2700,  2704,  2706,  2708,  2709,  2715,  2716,
    2720,  2723,  2724,  2730,  2731,  2732,  2739,  2741,  2745,  2747,
    2749,  2753,  2756,  2760,  2763,  2768,  2769,  2776,  2777,  2778,
    2787,  2792,  2797,  2801,  2805,  2808,  2811,  2818,  2824,  2828,
    2834,  2836,  2838,  2840,  2842,  2844,  2845,  2847,  2849,  2852,
    2855,  2859,  2863,  2867,  2871,  2872,  2874,  2875,  2877,  2878,
    2880,  2882,  2883,  2886,  2888,  2889,  2891,  2893,  2895,  2896,
    2903,  2907,  2911,  2912,  2914,  2916,  2920,  2924,  2927,  2930,
    2935,  2936,  2940,  2941,  2945,  2946,  2950,  2951,  2955,  2956,
    2958,  2960,  2964,  2966,  2968,  2969,  2972,  2974,  2978,  2982,
    2986,  2988,  2989,  2995,  2996,  2998,  3000,  3001,  3008,  3009,
    3011,  3013,  3016,  3018,  3020,  3022,  3023,  3029,  3032,  3033,
    3039,  3040,  3042,  3044,  3047,  3049,  3051,  3053,  3055,  3057,
    3060,  3061,  3067,  3068,  3070,  3072,  3073,  3078,  3083,  3087,
    3093,  3095,  3099,  3103,  3104,  3111,  3113,  3115,  3117,  3121,
    3124,  3128,  3130,  3132,  3133,  3140,  3142,  3144,  3146,  3150,
    3154,  3159,  3160,  3167,  3168,  3171,  3172,  3177,  3178,  3181,
    3186,  3188,  3191,  3196,  3199,  3203,  3206,  3210,  3211,  3215,
    3216,  3217,  3224,  3227,  3229,  3231,  3234,  3237,  3238,  3240,
    3244,  3245,  3249,  3251,  3253,  3254,  3257,  3266,  3271,  3272,
    3274,  3277,  3279,  3281,  3283,  3285,  3286,  3289,  3294,  3298,
    3300,  3302,  3306,  3311,  3312,  3313,  3314,  3317,  3320,  3322,
    3324,  3325,  3328,  3332,  3336,  3340,  3343,  3347,  3352,  3356,
    3361,  3365,  3370,  3372,  3376,  3381,  3385,  3389,  3396,  3398,
    3404,  3411,  3417,  3425,  3432,  3441,  3447,  3454,  3459,  3464,
    3470,  3474,  3479,  3481,  3485,  3489,  3493,  3497,  3501,  3505,
    3511,  3517,  3521,  3525,  3529,  3533,  3537,  3541,  3543,  3545,
    3547,  3549,  3551,  3553,  3555,  3557,  3559,  3561,  3563,  3565,
    3567,  3569,  3571,  3573,  3575,  3577,  3579,  3581,  3583,  3585,
    3589,  3591,  3593,  3595,  3597,  3601,  3604,  3607,  3610,  3613,
    3617,  3621,  3627,  3634,  3639,  3644,  3652,  3655,  3662,  3668,
    3675,  3682,  3687,  3692,  3698,  3703,  3710,  3713,  3718,  3723,
    3728,  3739,  3746,  3755,  3762,  3767,  3772,  3779,  3784,  3789,
    3794,  3801,  3806,  3814,  3822,  3830,  3837,  3844,  3851,  3858,
    3862,  3867,  3874,  3883,  3886,  3889,  3898,  3907,  3914,  3921,
    3923,  3930,  3937,  3946,  3955,  3962,  3971,  3978,  3981,  3990,
    3999,  4002,  4005,  4008,  4013,  4018,  4023,  4028,  4032,  4041,
    4048,  4057,  4062,  4069,  4074,  4079,  4084,  4091,  4100,  4105,
    4109,  4116,  4121,  4128,  4134,  4143,  4151,  4162,  4164,  4171,
    4176,  4181,  4186,  4191,  4196,  4203,  4208,  4209,  4215,  4222,
    4225,  4229,  4230,  4235,  4236,  4240,  4241,  4243,  4245,  4249,
    4254,  4259,  4265,  4270,  4275,  4280,  4286,  4291,  4292,  4293,
    4301,  4306,  4312,  4317,  4323,  4328,  4333,  4338,  4343,  4348,
    4354,  4355,  4364,  4365,  4369,  4373,  4375,  4380,  4381,  4383,
    4384,  4387,  4388,  4389,  4394,  4399,  4402,  4403,  4407,  4410,
    4414,  4417,  4419,  4422,  4424,  4427,  4429,  4432,  4435,  4438,
    4439,  4441,  4443,  4447,  4449,  4453,  4455,  4459,  4460,  4462,
    4463,  4466,  4471,  4477,  4479,  4481,  4483,  4485,  4490,  4492,
    4496,  4500,  4504,  4505,  4512,  4513,  4520,  4521,  4530,  4535,
    4536,  4545,  4546,  4557,  4564,  4565,  4574,  4575,  4586,  4593,
    4595,  4598,  4601,  4602,  4604,  4610,  4611,  4617,  4621,  4627,
    4630,  4631,  4632,  4640,  4642,  4643,  4644,  4651,  4652,  4656,
    4657,  4658,  4664,  4665,  4667,  4668,  4670,  4671,  4674,  4678,
    4682,  4684,  4686,  4687,  4695,  4696,  4704,  4706,  4709,  4710,
    4711,  4714,  4715,  4718,  4719,  4721,  4723,  4725,  4727,  4731,
    4733,  4737,  4739,  4741,  4743,  4745,  4747,  4749,  4751,  4753,
    4755,  4757,  4759,  4761,  4763,  4765,  4767,  4769,  4771,  4773,
    4775,  4777,  4779,  4781,  4783,  4785,  4787,  4788,  4790,  4792,
    4793,  4796,  4797,  4799,  4800,  4801,  4805,  4806,  4807,  4811,
    4814,  4815,  4816,  4821,  4826,  4829,  4830,  4832,  4834,  4838,
    4842,  4844,  4847,  4848,  4850,  4851,  4856,  4861,  4864,  4865,
    4867,  4869,  4870,  4872,  4873,  4875,  4878,  4880,  4884,  4888,
    4890,  4892,  4894,  4896,  4898,  4899,  4902,  4904,  4906,  4908,
    4910,  4912,  4914,  4916,  4918,  4920,  4922,  4924,  4926,  4928,
    4930,  4932,  4934,  4936,  4938,  4940,  4942,  4944,  4946,  4948,
    4949,  4950,  4957,  4958,  4960,  4964,  4966,  4967,  4970,  4974,
    4976,  4979,  4981,  4982,  4986,  4987,  4988,  4996,  4999,  5001,
    5002,  5006,  5007,  5015,  5016,  5017,  5026,  5031,  5038,  5043,
    5048,  5053,  5054,  5061,  5066,  5071,  5076,  5082,  5087,  5089,
    5093,  5095,  5098,  5100,  5104,  5106,  5107,  5110,  5111,  5113,
    5114,  5116,  5118,  5121,  5125,  5127,  5129,  5130,  5131,  5140,
    5141,  5142,  5149,  5150,  5152,  5154,  5156,  5158,  5160,  5163,
    5165,  5167,  5169,  5173,  5178,  5179,  5183,  5187,  5189,  5192,
    5195,  5196,  5200,  5201,  5207,  5211,  5213,  5217,  5219,  5223,
    5225,  5227,  5228,  5230,  5231,  5236,  5237,  5239,  5243,  5245,
    5247,  5249,  5250,  5251,  5258,  5259,  5260,  5272,  5276,  5278,
    5282,  5286,  5288,  5292,  5293,  5295,  5296,  5301,  5302,  5310,
    5311,  5317,  5318,  5325,  5327,  5331,  5334,  5339,  5340,  5343,
    5344,  5347,  5349,  5351,  5353,  5354,  5359,  5360,  5362,  5363,
    5365,  5367,  5371,  5373,  5375,  5378,  5381,  5384,  5386,  5388,
    5390,  5392,  5393,  5397,  5398,  5402,  5405,  5410,  5415,  5419,
    5424,  5429,  5431,  5435,  5439,  5446,  5449,  5452,  5453,  5460,
    5461,  5468,  5474,  5477,  5479,  5485,  5491,  5494,  5497,  5499,
    5504,  5508,  5511,  5515,  5518,  5521,  5523,  5527,  5532,  5536,
    5540,  5543,  5546,  5550,  5554,  5558,  5562,  5566,  5570,  5574,
    5578,  5580,  5582,  5584,  5586,  5588,  5589,  5591,  5592,  5595,
    5596,  5598,  5600,  5602,  5603,  5606,  5607,  5610,  5611,  5614,
    5617,  5623,  5624,  5629,  5630,  5635,  5637,  5639,  5641,  5643,
    5645,  5647,  5649,  5650,  5652,  5654,  5658,  5659,  5661,  5663,
    5664,  5669,  5670,  5671,  5677,  5679,  5680,  5684,  5685,  5689,
    5693,  5695,  5698,  5701,  5704,  5707,  5710,  5713,  5716,  5718,
    5720,  5722,  5724,  5726,  5728,  5729,  5731,  5732,  5736,  5740,
    5742,  5743,  5747,  5749,  5752,  5753,  5755,  5756,  5760,  5764,
    5767,  5770,  5774,  5775,  5777,  5779,  5782,  5783,  5784,  5785,
    5786,  5809,  5811,  5813,  5814,  5816,  5817,  5819,  5821,  5822,
    5824,  5826,  5827,  5830,  5833,  5835,  5839,  5844,  5848,  5852,
    5853,  5856,  5859,  5861,  5865,  5869,  5870,  5875,  5876,  5880,
    5882,  5884,  5885,  5889,  5892,  5896,  5898,  5900,  5903,  5904,
    5907,  5911,  5913,  5919,  5921,  5923,  5926,  5929,  5931,  5933,
    5935,  5937,  5939,  5942,  5945,  5947,  5949,  5951,  5953,  5955,
    5957,  5959,  5961,  5964,  5967,  5969,  5971,  5973,  5975,  5977,
    5980,  5983,  5986,  5988,  5990,  5994,  6000,  6002,  6004,  6006,
    6008,  6010,  6014,  6019,  6025,  6027,  6033,  6037,  6040,  6042,
    6046,  6049,  6052,  6057,  6059,  6061,  6063,  6065,  6067,  6069,
    6071,  6073,  6075,  6077,  6079,  6081,  6083,  6085,  6087,  6091,
    6094,  6096,  6098,  6100,  6102,  6104,  6106,  6108,  6110,  6112,
    6114,  6116,  6118,  6120,  6122,  6124,  6126,  6128,  6130,  6132,
    6134,  6136,  6138,  6140,  6142,  6144,  6146,  6148,  6150,  6152,
    6154,  6156,  6158,  6160,  6162,  6164,  6166,  6168,  6170,  6172,
    6174,  6176,  6178,  6180,  6182,  6184,  6186,  6188,  6190,  6192,
    6194,  6196,  6198,  6200,  6202,  6204,  6206,  6208,  6210,  6212,
    6214,  6216,  6218,  6220,  6222,  6224,  6226,  6228,  6230,  6232,
    6234,  6236,  6238,  6240,  6242,  6244,  6246,  6248,  6250,  6252,
    6254,  6256,  6258,  6260,  6262,  6264,  6266,  6268,  6270,  6272,
    6274,  6276,  6278,  6280,  6282,  6284,  6286,  6288,  6290,  6292,
    6294,  6296,  6298,  6300,  6302,  6304,  6306,  6308,  6310,  6312,
    6314,  6316,  6318,  6320,  6322,  6324,  6326,  6328,  6330,  6332,
    6334,  6336,  6338,  6340,  6342,  6344,  6346,  6348,  6350,  6352,
    6354,  6356,  6358,  6360,  6362,  6364,  6366,  6368,  6370,  6372,
    6374,  6376,  6378,  6380,  6382,  6384,  6386,  6388,  6390,  6392,
    6394,  6396,  6398,  6400,  6402,  6404,  6406,  6408,  6410,  6412,
    6414,  6416,  6418,  6420,  6422,  6424,  6426,  6428,  6430,  6432,
    6434,  6436,  6438,  6440,  6442,  6444,  6446,  6448,  6450,  6452,
    6454,  6456,  6458,  6460,  6462,  6464,  6466,  6468,  6470,  6472,
    6474,  6476,  6478,  6480,  6482,  6484,  6486,  6488,  6490,  6492,
    6494,  6496,  6498,  6500,  6502,  6504,  6506,  6508,  6510,  6512,
    6514,  6516,  6518,  6520,  6522,  6524,  6526,  6528,  6530,  6532,
    6534,  6536,  6538,  6540,  6542,  6544,  6546,  6548,  6550,  6552,
    6554,  6556,  6558,  6560,  6562,  6564,  6566,  6568,  6570,  6572,
    6574,  6576,  6578,  6580,  6582,  6584,  6586,  6588,  6590,  6592,
    6594,  6596,  6598,  6600,  6602,  6604,  6606,  6608,  6610,  6612,
    6614,  6616,  6618,  6620,  6622,  6624,  6626,  6628,  6630,  6632,
    6634,  6636,  6638,  6640,  6642,  6644,  6646,  6648,  6650,  6652,
    6654,  6656,  6658,  6660,  6662,  6664,  6666,  6668,  6670,  6672,
    6674,  6676,  6678,  6680,  6682,  6684,  6686,  6688,  6690,  6692,
    6694,  6696,  6698,  6700,  6702,  6704,  6706,  6708,  6710,  6712,
    6714,  6716,  6718,  6720,  6722,  6724,  6726,  6728,  6730,  6732,
    6734,  6736,  6738,  6740,  6742,  6744,  6746,  6748,  6750,  6752,
    6754,  6756,  6758,  6760,  6762,  6764,  6766,  6768,  6770,  6772,
    6774,  6776,  6778,  6780,  6782,  6784,  6786,  6788,  6790,  6792,
    6794,  6796,  6797,  6801,  6802,  6806,  6807,  6811,  6812,  6816,
    6817,  6821,  6824,  6825,  6828,  6829,  6832,  6833,  6838,  6839,
    6843,  6845,  6847,  6849,  6851,  6852,  6854,  6856,  6858,  6859,
    6862,  6865,  6868,  6872,  6873,  6878,  6883,  6890,  6893,  6897,
    6901,  6905,  6911,  6913,  6917,  6921,  6923,  6925,  6929,  6933,
    6935,  6939,  6942,  6945,  6948,  6951,  6954,  6956,  6958,  6963,
    6968,  6970,  6972,  6974,  6976,  6978,  6979,  6984,  6986,  6988,
    6990,  6994,  6998,  7000,  7002,  7005,  7008,  7009,  7013,  7018,
    7022,  7023,  7031,  7033,  7036,  7038,  7040,  7042,  7044,  7046,
    7048,  7049,  7055,  7057,  7059,  7061,  7063,  7065,  7066,  7071,
    7078,  7085,  7092,  7100,  7106,  7107,  7112,  7121,  7130,  7139,
    7146,  7147,  7149,  7151,  7154,  7155,  7157,  7159,  7163,  7164,
    7168,  7169,  7173,  7174,  7178,  7179,  7183,  7185,  7187,  7189,
    7191,  7193,  7195,  7197,  7199,  7201,  7203,  7205,  7208,  7211,
    7213,  7217,  7220,  7223,  7226,  7229,  7232,  7235,  7238,  7241,
    7243,  7245,  7248,  7249,  7251,  7255,  7257,  7260,  7263,  7266,
    7268,  7272,  7276,  7278,  7280,  7284,  7286,  7290,  7295,  7301,
    7306,  7313,  7315,  7316,  7320,  7324,  7326,  7328,  7329,  7332,
    7335,  7338,  7341,  7342,  7345,  7346,  7350,  7353,  7355,  7358,
    7361,  7364,  7367,  7370,  7371,  7375,  7376,  7378,  7379,  7383,
    7386,  7387,  7389,  7392,  7393,  7395,  7400,  7405,  7411,  7414,
    7418,  7419,  7421,  7422,  7427,  7428,  7430,  7432,  7433,  7435,
    7436,  7439,  7442,  7444,  7445,  7447,  7449,  7452,  7456,  7459,
    7460,  7467,  7471,  7472,  7473,  7474,  7476,  7479,  7481,  7483,
    7485,  7487,  7489,  7491,  7493,  7495,  7497,  7500,  7503,  7507,
    7509,  7511,  7513,  7515,  7517,  7519,  7521,  7523,  7525,  7527,
    7529,  7531,  7533,  7534,  7538,  7540,  7543,  7545,  7548,  7552,
    7556,  7560,  7561,  7565,  7569,  7570,  7578,  7579,  7583,  7585,
    7589,  7590,  7594,  7595,  7599,  7604,  7606,  7610,  7611,  7615,
    7616,  7620,  7625,  7630,  7631,  7632,  7633,  7650,  7659,  7667,
    7668,  7669,  7670,  7671,  7672,  7688,  7689,  7690,  7691,  7692,
    7705,  7710,  7715,  7719,  7724,  7728,  7731,  7733,  7737,  7743,
    7745,  7747,  7748,  7750,  7752,  7753,  7756,  7757,  7758,  7762,
    7763,  7766,  7772
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     642,     0,    -1,   152,    -1,    -1,   645,   643,   637,   644,
      -1,   645,   152,    -1,    -1,   152,    -1,   646,    -1,  1522,
      -1,  1017,    -1,  1083,    -1,  1085,    -1,   698,    -1,   658,
      -1,  1086,    -1,  1075,    -1,  1528,    -1,   665,    -1,   647,
      -1,  1335,    -1,  1367,    -1,  1282,    -1,  1284,    -1,   651,
      -1,  1374,    -1,   733,    -1,  1495,    -1,  1485,    -1,   656,
      -1,  1299,    -1,  1596,    -1,  1394,    -1,  1397,    -1,  1477,
      -1,  1091,    -1,  1099,    -1,   852,    -1,  1106,    -1,   649,
      -1,  1390,    -1,  1531,    -1,  1094,    -1,  1078,    -1,  1302,
      -1,  1384,    -1,   732,    -1,  1492,    -1,  1529,    -1,  1530,
      -1,  1119,    -1,  1118,    -1,  1449,    -1,   725,    -1,  1353,
      -1,  1059,    -1,  1061,    -1,  1346,    -1,  1597,    -1,  1483,
      -1,  1327,    -1,  1396,    -1,  1588,    -1,   648,   399,  1443,
      -1,   117,    -1,   140,    -1,   399,  1443,   190,   650,    -1,
    1440,    -1,   638,  1445,    -1,    -1,   166,  1443,   652,   653,
      -1,    -1,   589,   654,    -1,   654,   633,   655,    -1,   655,
      -1,   638,  1445,    -1,    -1,   209,   657,  1445,    -1,    -1,
      56,   303,   557,   659,   660,    -1,   661,    -1,   660,   633,
     661,    -1,   287,   156,  1439,    -1,   284,   156,  1439,    -1,
     304,   156,  1439,    -1,   290,   156,  1439,    -1,   291,   156,
    1263,    -1,   285,   156,  1263,    -1,   292,   156,  1263,    -1,
     286,   156,  1263,    -1,   301,   156,  1263,    -1,   295,   156,
    1439,    -1,   294,   156,  1439,    -1,   296,   156,  1439,    -1,
     297,   156,  1439,    -1,   300,   156,  1439,    -1,   302,   156,
    1263,    -1,   298,   156,  1439,    -1,   299,   156,  1439,    -1,
     305,   156,  1426,    -1,   223,   156,   631,   662,   632,    -1,
     283,   156,  1263,    -1,   664,    -1,    -1,   663,    -1,   662,
     633,   663,    -1,  1263,    -1,   288,   156,  1439,    -1,   289,
     156,  1265,    -1,   429,   156,  1439,    -1,   430,   156,  1263,
      -1,    -1,    94,   904,   540,   907,  1435,   666,   841,    -1,
      -1,    -1,    94,   995,   226,  1443,   999,   365,  1435,   667,
     631,  1012,   632,  1000,   668,  1051,    -1,    -1,    -1,    94,
     996,   226,  1443,   998,   365,  1435,   669,   631,  1012,   632,
    1001,   670,  1051,    -1,    -1,    -1,    94,   997,   226,  1443,
     998,   365,  1435,   671,   631,  1012,   632,  1002,   672,  1051,
      -1,    -1,    94,   103,   907,  1443,   673,   901,    -1,    -1,
      94,   674,  1550,    -1,    94,   586,   691,  1512,    -1,    94,
     274,   203,   805,    -1,    94,   538,   802,    -1,    94,   675,
      -1,   475,  1445,   186,   106,   613,  1445,   370,   631,   676,
     632,    -1,   677,    -1,   676,   633,   677,    -1,   586,  1440,
      -1,   212,  1440,    -1,   103,  1440,    -1,   380,  1440,    -1,
     389,  1440,    -1,   491,  1440,    -1,   396,  1263,    -1,    -1,
    1140,   163,   907,   692,   679,   365,   464,   680,   685,   682,
     687,   139,   688,    -1,    -1,   164,  1144,  1235,   681,   683,
     684,    -1,    23,  1144,    -1,    -1,   148,    -1,   133,   365,
     487,    -1,   133,    -1,    -1,   513,  1144,    -1,    -1,   151,
    1144,    -1,    -1,   686,    -1,   365,    78,   400,    -1,   365,
      78,   353,   400,    -1,    -1,    74,  1440,    -1,    -1,   689,
     690,    -1,   750,    -1,   752,    -1,   748,    -1,   769,    -1,
     787,    -1,   789,    -1,   784,    -1,   754,    -1,   756,    -1,
     757,    -1,   758,    -1,   759,    -1,   761,    -1,    -1,  1443,
     639,  1443,    -1,  1443,    -1,    -1,   693,   695,    -1,    -1,
     694,   696,    -1,    74,  1440,    -1,   253,   509,    -1,   355,
     509,    -1,    88,   509,    -1,   415,   509,   106,    -1,   330,
     509,   106,    -1,   697,    -1,   695,    -1,   130,    -1,  1150,
     130,    -1,   509,   468,   123,    -1,   509,   468,   238,    -1,
      -1,    49,   692,   699,   700,    -1,    -1,   631,   701,   632,
      -1,    -1,   702,    -1,   702,   633,  1144,    -1,  1144,    -1,
      -1,   704,    -1,   704,   633,   706,    -1,   706,    -1,    -1,
    1443,   705,   955,    -1,    -1,   708,    -1,   708,   633,   709,
      -1,   709,    -1,   710,   705,  1443,   955,    -1,    -1,   239,
      -1,   379,    -1,   230,    -1,    -1,   711,   747,   637,    -1,
     747,   637,    -1,   712,   747,   637,    -1,    -1,   713,   714,
     637,    -1,    -1,   120,   744,   715,   955,   745,    -1,   120,
    1443,    81,   187,   721,    -1,    -1,   120,   718,   206,   187,
     716,   719,   747,    -1,    -1,   120,  1443,   100,   187,   717,
    1119,    -1,   168,    -1,    90,    -1,   720,    -1,   719,   633,
     720,    -1,   724,    -1,  1263,    -1,   722,    -1,   498,   723,
    1441,    -1,    -1,   594,    -1,   721,    -1,  1443,    -1,   499,
      -1,  1150,   189,    -1,   497,    -1,   484,   726,   728,    -1,
    1443,    -1,   722,    -1,    -1,   726,    -1,    -1,   477,   729,
      -1,   731,   156,   730,    -1,   729,   633,   731,   156,   730,
      -1,  1425,    -1,  1171,    -1,  1431,    -1,    63,    -1,   525,
      -1,    85,    -1,    87,    -1,    86,    -1,    54,    -1,   465,
      -1,   542,    -1,    73,    -1,   101,    -1,   321,    -1,   338,
      -1,   444,   727,   728,    -1,   199,   734,   131,   735,    -1,
      -1,    98,    -1,   736,    -1,    81,   740,   741,    -1,   737,
      -1,   736,   633,   737,    -1,   738,   156,   739,    -1,  1443,
      -1,   638,  1445,    -1,   360,    -1,   461,    -1,   730,    -1,
     742,    -1,   741,   633,   742,    -1,   738,   156,   743,    -1,
      63,    -1,   525,    -1,    85,    -1,    87,    -1,    86,    -1,
      54,    -1,   465,    -1,   542,    -1,    73,    -1,   101,    -1,
     321,    -1,   338,    -1,   449,    -1,  1443,    -1,   744,   633,
    1443,    -1,    -1,    -1,   121,   746,  1144,    -1,   750,    -1,
     752,    -1,   748,    -1,   769,    -1,   787,    -1,   789,    -1,
     784,    -1,   754,    -1,   756,    -1,   757,    -1,   758,    -1,
     759,    -1,   761,    -1,    -1,   221,   749,   764,   150,   221,
      -1,    -1,   751,   646,    -1,    -1,   451,   753,  1144,    -1,
      -1,   755,   793,    -1,   258,  1444,    -1,   247,  1444,    -1,
     368,  1443,    -1,    -1,   178,   762,  1443,   236,   760,   763,
      -1,    65,  1443,    -1,    -1,   349,   190,    -1,   190,    -1,
    1443,    -1,   763,   633,  1443,    -1,    -1,    -1,    -1,   765,
    1144,   766,   549,   712,   767,   768,    -1,    -1,   147,   764,
      -1,   146,   712,    -1,   770,    -1,   773,    -1,    -1,    -1,
      52,   771,  1144,   772,   775,   783,   150,    52,    -1,    -1,
      52,   774,   776,   783,   150,    52,    -1,   777,    -1,   775,
     777,    -1,   780,    -1,   776,   780,    -1,    -1,    -1,   606,
     778,  1144,   779,   549,   712,    -1,    -1,    -1,   606,   781,
    1144,   782,   549,   712,    -1,    -1,   146,   712,    -1,    -1,
    1444,   640,   785,   793,   786,    -1,    -1,  1444,    -1,    -1,
    1444,   640,   788,   791,   786,    -1,    -1,   790,   791,    -1,
      -1,    30,   792,   713,   711,   150,    -1,   280,   712,   150,
     280,    -1,    -1,    -1,   608,   794,  1144,   795,   139,   712,
     150,   608,    -1,    -1,    -1,   439,   712,   582,   796,  1144,
     797,   150,   439,    -1,    29,    -1,     8,    -1,   232,    -1,
     583,    -1,   126,    -1,   827,   829,    -1,   827,    56,   824,
     808,    -1,   827,     6,   824,   803,   812,    -1,    -1,   588,
     274,   203,  1443,    -1,   827,     6,   824,   815,    -1,   827,
     140,   824,   815,    -1,   828,   807,   818,    -1,   828,   807,
     821,    -1,     6,   825,    -1,     6,   826,    -1,    -1,   809,
     810,    -1,   811,    -1,   810,   811,    -1,   810,   633,   811,
      -1,   830,    -1,   831,    -1,   832,    -1,    -1,   813,    -1,
     814,    -1,   813,   814,    -1,   813,   633,   814,    -1,   830,
      -1,   831,    -1,   832,    -1,   833,    -1,   836,    -1,   838,
      -1,   839,    -1,   837,    -1,    -1,   816,    -1,   817,    -1,
     816,   817,    -1,   816,   633,   817,    -1,   830,    -1,   831,
      -1,   832,    -1,   838,    -1,   839,    -1,    -1,   819,    -1,
     820,    -1,   819,   820,    -1,   819,   633,   820,    -1,   830,
      -1,   834,    -1,   835,    -1,   836,    -1,   838,    -1,   839,
      -1,   837,    -1,    -1,   822,    -1,   823,    -1,   822,   823,
      -1,   822,   633,   823,    -1,   830,    -1,   838,    -1,   839,
      -1,   105,  1440,    -1,   572,  1440,    -1,   422,  1440,    -1,
    1443,    -1,  1443,    -1,   416,    -1,   418,    -1,   353,     4,
      -1,   228,  1319,   840,    -1,    24,  1319,   840,    -1,   310,
    1319,   840,    -1,   173,  1319,   840,    -1,   573,  1319,   840,
      -1,   423,  1319,   840,    -1,   350,  1319,  1264,    -1,    74,
    1319,  1440,    -1,  1360,   154,  1319,   915,    -1,   602,    -1,
     356,    -1,  1266,    -1,  1438,    -1,   631,   842,    -1,   908,
     847,   844,    -1,   263,  1435,    -1,   631,   263,  1435,   632,
      -1,   921,   632,   908,   847,   844,    -1,    -1,   847,   897,
     632,   843,  1535,    -1,    -1,    -1,  1405,   900,   897,   845,
    1532,    -1,    -1,  1405,   900,   631,   897,   632,   846,  1535,
      -1,   848,    -1,    -1,   849,    -1,    -1,   386,   851,   850,
     854,    -1,    -1,    -1,   386,   853,   854,    -1,    46,   855,
     865,   866,   873,    -1,   857,   251,   858,   631,   859,   632,
      -1,    -1,   857,   207,   856,   863,    -1,   414,   863,    -1,
     414,   862,    -1,   268,   863,    -1,   268,   862,    -1,    -1,
     265,    -1,    -1,    11,   156,  1264,    -1,    -1,   860,    -1,
     861,    -1,   860,   633,   861,    -1,  1443,    -1,    70,   631,
     859,   632,    -1,   631,  1140,   871,  1141,   632,    -1,   631,
    1140,   871,  1141,   632,    -1,    -1,   387,  1264,    -1,    -1,
      -1,   529,    46,   857,   207,   864,   867,   872,    -1,    -1,
     529,    46,   857,   251,   858,   631,   869,   632,   868,   872,
      -1,   870,    -1,   869,   633,   870,    -1,  1443,    -1,  1147,
      -1,    -1,   528,  1264,    -1,    -1,   631,   874,   632,    -1,
     875,    -1,   874,   633,   875,    -1,    -1,   386,   876,   877,
     878,   894,   889,    -1,  1443,    -1,    -1,    -1,   593,   260,
     548,   879,   881,    -1,    -1,   593,   239,   880,   882,    -1,
     314,    -1,   884,    -1,   884,    -1,   631,   883,   632,    -1,
     884,    -1,   883,   633,   884,    -1,    -1,    -1,   631,   885,
     887,   886,   632,    -1,   888,    -1,   887,   633,   888,    -1,
     314,    -1,  1147,    -1,    -1,   631,   890,   632,    -1,   891,
      -1,   890,   633,   891,    -1,    -1,   529,   892,   893,   894,
      -1,  1445,    -1,    -1,   895,    -1,   895,   896,    -1,   896,
      -1,   538,  1319,  1445,    -1,  1360,   154,  1319,   915,    -1,
     350,  1319,  1264,    -1,   309,  1319,  1266,    -1,   327,  1319,
    1266,    -1,   106,   132,  1319,  1440,    -1,   226,   132,  1319,
    1440,    -1,    74,  1319,  1440,    -1,    -1,    -1,   469,   898,
    1134,  1138,   899,   919,    -1,    -1,    19,    -1,    -1,   902,
      -1,   903,    -1,   902,   903,    -1,   914,    -1,   913,    -1,
      -1,   905,    -1,   906,    -1,   906,   905,    -1,   543,    -1,
      -1,   221,  1150,   167,    -1,    -1,   910,    -1,   911,    -1,
     911,   909,    -1,   911,    -1,   911,   910,    -1,   911,   633,
     910,    -1,   154,  1319,   915,    -1,   309,  1319,  1265,    -1,
     327,  1319,  1265,    -1,    26,  1319,  1263,    -1,   389,  1319,
    1440,    -1,    74,  1319,  1440,    -1,    25,  1319,  1265,    -1,
     381,  1319,  1263,    -1,   381,  1319,   121,    -1,   515,  1319,
    1263,    -1,   515,  1319,   121,    -1,   516,  1319,  1263,    -1,
     516,  1319,   121,    -1,   517,  1319,  1263,    -1,   517,  1319,
     121,    -1,    60,  1319,  1263,    -1,   541,  1319,  1263,    -1,
     125,  1319,  1263,    -1,   459,  1319,   917,    -1,    -1,   577,
    1319,   912,   631,  1383,   632,    -1,   913,    -1,   914,    -1,
     233,  1319,   918,    -1,   106,   132,  1319,  1440,    -1,   226,
     132,  1319,  1440,    -1,   538,  1443,    -1,   522,   135,    -1,
     522,   319,    -1,    82,  1319,  1440,    -1,   250,  1319,  1263,
      -1,   967,   958,  1319,   960,    -1,   967,    68,  1319,   966,
      -1,  1445,    -1,  1445,    -1,   121,    -1,   181,    -1,   144,
      -1,    79,    -1,   424,    -1,    77,    -1,   355,    -1,   180,
      -1,   254,    -1,  1258,    -1,  1133,  1137,    -1,   524,    -1,
     419,    -1,   119,    -1,   237,    -1,   922,    -1,   923,    -1,
     922,   633,   923,    -1,   924,    -1,   925,    -1,   930,   926,
      -1,   930,   984,    -1,   990,  1014,   999,   631,  1012,   632,
    1000,    -1,   996,   993,  1014,   998,   631,  1012,   632,  1001,
      -1,   997,   993,  1014,   998,   631,  1012,   632,  1002,    -1,
     928,   991,  1014,   999,   631,  1012,   632,  1000,    -1,   928,
     186,   251,  1014,   631,  1012,   632,   984,    -1,   928,   927,
      -1,    -1,   927,    -1,    61,   631,  1144,   632,    -1,    -1,
     929,    -1,    84,  1014,    -1,    -1,  1434,   931,   932,   952,
      -1,   940,   950,   946,    -1,   941,   951,   946,    -1,   183,
     942,   946,    -1,    38,    -1,    38,   949,    -1,    43,    -1,
      42,    -1,   936,   949,   970,    -1,   936,   970,    -1,   937,
     949,   971,    -1,   937,   971,    -1,    33,   949,    -1,    33,
      -1,   938,   949,   970,    -1,   939,   949,   971,    -1,   595,
     949,    -1,   620,   950,   946,    -1,   110,    -1,   553,   944,
      -1,   550,   944,    -1,   107,   944,    -1,   554,    -1,    40,
     950,    -1,   935,    -1,   315,    -1,   276,    -1,   279,   595,
      -1,   279,   938,   970,    -1,   556,   970,    -1,   547,   950,
     970,    -1,   317,   970,    -1,   277,   970,    -1,   119,   942,
     946,    -1,   361,   942,   946,    -1,   181,   942,   946,    -1,
      -1,   155,   933,   631,  1016,   632,   970,    -1,    -1,   477,
     934,   631,  1016,   632,   970,    -1,   279,   970,    -1,   473,
      -1,   197,    -1,   196,    -1,   394,    -1,   335,    -1,   267,
      -1,   334,    -1,   395,    -1,   336,    -1,    59,    -1,   344,
      -1,   341,    59,    -1,   936,   599,    -1,   596,    -1,   341,
     596,    -1,   362,    -1,   344,   596,    -1,   341,    59,   599,
      -1,   344,   599,    -1,   237,    -1,   555,    -1,   489,    -1,
     316,    -1,    32,    -1,   419,    -1,   138,    -1,   138,   398,
      -1,    -1,   949,    -1,   943,    -1,   631,   359,   633,   359,
     632,    -1,    -1,   631,   359,   632,    -1,    -1,   631,   632,
      -1,   631,   359,   632,    -1,    -1,   947,    -1,   947,   948,
      -1,   948,    -1,   485,    -1,   581,    -1,   621,    -1,   631,
     278,   632,    -1,   631,   568,   632,    -1,   631,   118,   632,
      -1,   631,   359,   632,    -1,    -1,   949,    -1,    -1,   943,
      -1,    -1,   953,    -1,   953,   954,    -1,   954,    -1,   358,
      -1,  1150,   358,    -1,   121,   957,    -1,   365,   583,   956,
      -1,    25,    -1,   473,   121,   594,    -1,   983,   251,    -1,
     578,    -1,   578,   251,    -1,    74,  1440,    -1,    68,   964,
      -1,    72,   121,    -1,    72,   181,    -1,    72,   144,    -1,
     522,   121,    -1,   522,   135,    -1,   522,   319,    -1,   932,
     965,    -1,   354,   945,    -1,   956,    -1,  1424,    -1,    59,
     477,    -1,    58,    -1,  1445,    -1,    33,    -1,   959,    -1,
     121,    -1,    -1,   958,   960,    -1,  1445,    -1,    33,    -1,
     962,    -1,   121,    -1,  1445,    -1,    -1,    68,   966,    -1,
     964,    -1,   121,    -1,    -1,   121,    -1,    21,    -1,    33,
      21,    -1,    21,    33,    -1,   575,    -1,   575,    33,    -1,
      33,   575,    -1,    -1,   968,    -1,   969,    -1,    47,    -1,
     958,   959,   971,    -1,    33,    -1,    33,   958,   959,    -1,
      -1,    33,    -1,    -1,   631,  1264,   973,   632,    -1,    20,
      -1,   127,    -1,   452,    -1,    -1,   974,    -1,   974,   975,
      -1,   975,    -1,  1264,    -1,   977,   976,    -1,   978,    -1,
     979,   633,   978,    -1,   977,   624,   977,    -1,   979,    -1,
     980,    -1,    -1,   261,   981,    -1,    -1,   402,    -1,   425,
    1435,   985,   987,   988,    -1,    -1,   631,   986,   632,    -1,
     986,   633,  1443,    -1,  1443,    -1,    -1,   306,   191,    -1,
     306,   385,    -1,   306,   486,    -1,    -1,   365,   583,   989,
      -1,   365,   126,   989,    -1,   365,   583,   989,   365,   126,
     989,    -1,   365,   126,   989,   365,   583,   989,    -1,   447,
      -1,    50,    -1,   477,   358,    -1,   355,     5,    -1,   477,
     121,    -1,   992,    -1,   402,   251,    -1,   578,   993,    -1,
     251,    -1,   226,    -1,    -1,   992,    -1,   249,    -1,   226,
      -1,   225,    -1,    -1,   578,    -1,   192,    -1,   495,    -1,
      -1,   998,    -1,   998,  1006,    -1,    -1,  1003,    -1,    -1,
    1005,    -1,    -1,  1004,    -1,  1008,    -1,  1003,  1008,    -1,
    1009,    -1,  1004,  1009,    -1,  1010,    -1,  1005,  1010,    -1,
     589,  1011,    -1,   566,  1011,    -1,   250,  1319,  1263,    -1,
      74,  1440,    -1,  1007,    -1,  1006,    -1,  1007,    -1,  1007,
      -1,   609,   384,  1438,    -1,    45,    -1,   462,    -1,   207,
      -1,  1012,   633,  1013,  1256,    -1,  1013,  1256,    -1,  1443,
      -1,  1443,   631,   359,   632,    -1,    -1,  1434,    -1,    -1,
     639,  1443,    -1,  1422,    -1,  1016,   633,  1422,    -1,    -1,
      13,  1055,   540,  1435,  1018,  1030,    -1,    -1,    13,   103,
    1029,  1019,   902,    -1,    13,   103,  1443,   584,   106,   132,
     340,    -1,    -1,    13,   404,   692,  1020,   693,    -1,    -1,
      13,   193,   692,  1021,   693,    -1,    -1,    13,  1558,  1553,
    1022,  1560,    -1,    -1,    13,  1553,  1023,  1560,    -1,    -1,
      13,  1553,   163,   692,  1024,  1026,  1027,   682,   687,  1028,
      -1,    13,   538,   804,    -1,    13,   274,   203,   806,    -1,
      13,   538,   801,    -1,    13,   538,   800,    -1,    13,   475,
    1445,   370,   631,   676,   632,    -1,    13,   586,   691,  1025,
      -1,  1446,   389,   170,    -1,  1025,   633,  1446,   389,   170,
      -1,    -1,   365,   464,   680,    -1,   686,    -1,   365,   464,
     680,   686,    -1,    -1,   435,   557,   692,    -1,    -1,   139,
     688,    -1,    -1,  1443,    -1,    -1,   134,   538,    -1,   224,
     538,    -1,  1045,   848,    -1,  1045,  1034,    -1,  1034,    -1,
     849,    -1,  1036,    -1,   140,   386,  1043,    -1,   420,   386,
    1093,  1035,    -1,    -1,   369,   386,  1093,  1035,  1031,  1093,
      -1,    15,   386,  1093,  1035,    -1,    -1,    61,   386,  1035,
    1032,  1088,    -1,    -1,   437,   386,  1093,  1035,  1033,  1080,
      -1,    66,   386,  1093,  1264,    -1,   564,   386,  1035,    -1,
    1039,    -1,   165,   386,  1044,   609,   540,  1435,   851,    -1,
     434,   388,   851,    -1,    12,    -1,  1043,    -1,    -1,     6,
     386,  1093,  1037,  1038,    -1,    -1,   631,   874,   632,    -1,
     387,  1264,    -1,    -1,   436,   386,  1093,  1040,  1041,    -1,
      -1,    -1,  1043,  1042,   236,   631,   874,   632,    -1,  1044,
      -1,  1043,   633,  1044,    -1,  1443,    -1,  1047,    -1,  1045,
     633,  1047,    -1,     6,  1054,    -1,  1046,   924,  1057,    -1,
       6,   925,    -1,  1046,   631,   921,   632,    -1,    -1,    56,
    1054,  1434,  1048,   930,  1057,    -1,    -1,    -1,   331,  1054,
    1434,  1049,   932,   952,  1050,  1057,    -1,   140,  1054,  1434,
    1056,    -1,   140,   186,   251,  1434,    -1,   140,   402,   251,
      -1,   140,   992,  1434,    -1,   133,   249,    -1,   148,   249,
      -1,    13,  1054,  1434,   477,   121,  1424,    -1,    13,  1054,
    1434,   140,   121,    -1,   435,  1058,  1435,    -1,    91,   557,
     958,   960,   965,    -1,   909,    -1,   185,    -1,  1249,    -1,
    1052,    -1,  1053,    -1,    -1,  1053,    -1,  1052,    -1,  1053,
    1052,    -1,  1052,  1053,    -1,    11,  1319,   121,    -1,    11,
    1319,  1443,    -1,   273,  1319,   121,    -1,   273,  1319,  1443,
      -1,    -1,    71,    -1,    -1,   222,    -1,    -1,   447,    -1,
      50,    -1,    -1,     8,  1443,    -1,   180,    -1,    -1,   557,
      -1,   156,    -1,    19,    -1,    -1,   514,   487,  1070,  1060,
    1073,  1065,    -1,   521,   487,  1070,    -1,   514,   559,  1062,
      -1,    -1,  1063,    -1,  1064,    -1,  1063,   633,  1064,    -1,
     609,    83,   490,    -1,   417,   367,    -1,   417,   614,    -1,
    1066,  1067,  1068,  1069,    -1,    -1,   586,   156,  1440,    -1,
      -1,   389,   156,  1440,    -1,    -1,   122,   156,  1440,    -1,
      -1,   391,   156,  1440,    -1,    -1,  1071,    -1,  1072,    -1,
    1071,   633,  1072,    -1,   510,    -1,   431,    -1,    -1,   582,
    1074,    -1,   664,    -1,  1074,   633,   664,    -1,   502,   156,
    1440,    -1,   500,   156,  1440,    -1,   501,    -1,    -1,    60,
    1479,  1076,  1289,  1077,    -1,    -1,   413,    -1,   172,    -1,
      -1,   437,  1093,  1479,  1079,  1289,  1080,    -1,    -1,  1081,
      -1,  1082,    -1,  1082,  1081,    -1,   413,    -1,   172,    -1,
     587,    -1,    -1,    15,  1093,  1479,  1084,  1289,    -1,    34,
    1440,    -1,    -1,    61,  1479,  1087,  1289,  1088,    -1,    -1,
    1089,    -1,  1090,    -1,  1090,  1089,    -1,   413,    -1,   176,
      -1,   318,    -1,   172,    -1,    57,    -1,   187,   584,    -1,
      -1,   369,  1093,  1479,  1092,  1289,    -1,    -1,   357,    -1,
     270,    -1,    -1,   435,  1479,  1095,  1097,    -1,   435,   586,
     691,  1096,    -1,  1446,   557,  1446,    -1,  1096,   633,  1446,
     557,  1446,    -1,  1098,    -1,  1097,   633,  1098,    -1,  1435,
     557,  1435,    -1,    -1,    48,   226,  1100,  1101,   239,  1105,
      -1,  1102,    -1,  1104,    -1,  1103,    -1,  1102,   633,  1103,
      -1,  1435,  1114,    -1,  1435,  1112,  1114,    -1,  1443,    -1,
     121,    -1,    -1,   269,   226,   236,    48,  1107,  1108,    -1,
    1111,    -1,  1109,    -1,  1110,    -1,  1109,   633,  1110,    -1,
    1435,  1114,  1117,    -1,  1435,  1112,  1114,  1117,    -1,    -1,
     386,   851,  1113,   631,  1035,   632,    -1,    -1,  1115,  1116,
      -1,    -1,   992,   631,  1231,   632,    -1,    -1,   222,   257,
      -1,   116,  1129,  1131,  1130,    -1,  1120,    -1,   469,  1123,
      -1,   631,  1121,   632,  1535,    -1,   469,  1125,    -1,   631,
    1121,   632,    -1,   469,  1210,    -1,   631,  1122,   632,    -1,
      -1,  1125,  1124,  1532,    -1,    -1,    -1,  1126,  1134,  1138,
    1127,  1128,  1137,    -1,  1252,  1258,    -1,  1277,    -1,  1133,
      -1,  1277,  1133,    -1,  1133,  1277,    -1,    -1,   136,    -1,
     190,  1190,  1132,    -1,    -1,  1131,   633,  1139,    -1,  1139,
      -1,   626,    -1,    -1,   607,  1144,    -1,   190,  1190,  1241,
    1246,  1243,  1252,  1258,  1269,    -1,   190,   141,  1241,  1258,
      -1,    -1,  1135,    -1,  1135,  1136,    -1,  1136,    -1,  1549,
      -1,   507,    -1,   505,    -1,    -1,   187,   583,    -1,   273,
     239,   479,   329,    -1,  1138,   633,  1139,    -1,  1139,    -1,
     626,    -1,  1140,  1429,  1141,    -1,  1140,  1144,  1141,  1142,
      -1,    -1,    -1,    -1,    19,  1443,    -1,    19,  1440,    -1,
    1443,    -1,  1440,    -1,    -1,   631,   632,    -1,  1144,  1148,
    1144,    -1,  1144,   618,  1144,    -1,  1144,  1149,  1144,    -1,
     353,  1144,    -1,  1145,   244,   563,    -1,  1145,   244,  1150,
     563,    -1,  1145,   244,   175,    -1,  1145,   244,  1150,   175,
      -1,  1145,   244,   579,    -1,  1145,   244,  1150,   579,    -1,
    1145,    -1,  1145,   244,   358,    -1,  1145,   244,  1150,   358,
      -1,  1145,   157,  1146,    -1,  1145,  1152,  1146,    -1,  1145,
    1152,  1153,   631,  1544,   632,    -1,  1146,    -1,  1147,   239,
     631,  1544,   632,    -1,  1147,  1150,   239,   631,  1544,   632,
      -1,  1147,   239,   631,  1144,   632,    -1,  1147,   239,   631,
    1144,   633,  1183,   632,    -1,  1147,  1150,   239,   631,  1144,
     632,    -1,  1147,  1150,   239,   631,  1144,   633,  1183,   632,
      -1,  1147,    31,  1147,    17,  1146,    -1,  1147,  1150,    31,
    1147,    17,  1146,    -1,  1147,   493,   263,  1147,    -1,  1147,
     263,  1154,  1245,    -1,  1147,  1150,   263,  1154,  1245,    -1,
    1147,   426,  1147,    -1,  1147,  1150,   426,  1147,    -1,  1147,
      -1,  1147,   622,  1147,    -1,  1147,   623,  1147,    -1,  1147,
     480,  1147,    -1,  1147,   481,  1147,    -1,  1147,   625,  1147,
      -1,  1147,   624,  1147,    -1,  1147,   625,   235,  1144,  1235,
      -1,  1147,   624,   235,  1144,  1235,    -1,  1147,   626,  1147,
      -1,  1147,   627,  1147,    -1,  1147,   628,  1147,    -1,  1147,
     137,  1147,    -1,  1147,   332,  1147,    -1,  1147,   629,  1147,
      -1,  1154,    -1,   376,    -1,   373,    -1,    17,    -1,    16,
      -1,   353,    -1,   352,    -1,   634,    -1,   352,    -1,   156,
      -1,   194,    -1,   205,    -1,   255,    -1,   282,    -1,   346,
      -1,    12,    -1,    18,    -1,  1431,    -1,  1155,    -1,  1156,
      -1,  1159,    -1,  1157,    -1,  1154,    68,  1445,    -1,  1425,
      -1,  1423,    -1,  1171,    -1,  1167,    -1,  1154,   375,  1154,
      -1,   625,  1154,    -1,   624,  1154,    -1,   630,  1154,    -1,
    1151,  1154,    -1,   631,  1544,   632,    -1,   631,  1144,   632,
      -1,   631,  1144,   633,  1183,   632,    -1,   460,   631,  1144,
     633,  1183,   632,    -1,   167,   631,  1544,   632,    -1,   635,
    1443,  1144,   636,    -1,   306,  1184,     9,   631,  1147,  1161,
     632,    -1,    33,  1154,    -1,    53,   631,  1144,    19,  1181,
     632,    -1,    52,  1186,  1188,  1187,   150,    -1,    91,   631,
    1144,   633,  1181,   632,    -1,    91,   631,  1144,   589,   959,
     632,    -1,   121,   631,  1431,   632,    -1,   593,   631,  1432,
     632,    -1,   235,  1144,  1235,   625,  1144,    -1,    59,   631,
    1183,   632,    -1,    59,   631,  1183,   589,   959,   632,    -1,
      99,  1143,    -1,   110,   631,  1144,   632,    -1,   115,   631,
    1144,   632,    -1,   217,   631,  1144,   632,    -1,   232,   631,
    1144,   633,  1144,   633,  1144,   633,  1144,   632,    -1,   235,
     631,  1144,   633,  1144,   632,    -1,   235,   631,  1144,   633,
    1144,   633,  1183,   632,    -1,   259,   631,  1144,   633,  1144,
     632,    -1,   326,   631,  1144,   632,    -1,   333,   631,  1144,
     632,    -1,   454,   631,  1144,   633,  1144,   632,    -1,   467,
     631,  1144,   632,    -1,   553,   631,  1144,   632,    -1,   550,
     631,  1144,   632,    -1,   550,   631,  1144,   633,  1144,   632,
      -1,   562,   631,  1144,   632,    -1,   562,   631,   256,  1144,
     190,  1144,   632,    -1,   562,   631,   558,  1144,   190,  1144,
     632,    -1,   562,   631,    44,  1144,   190,  1144,   632,    -1,
     562,   631,   256,   190,  1144,   632,    -1,   562,   631,   558,
     190,  1144,   632,    -1,   562,   631,    44,   190,  1144,   632,
      -1,   562,   631,  1144,   190,  1144,   632,    -1,   586,   631,
     632,    -1,   620,   631,  1144,   632,    -1,     7,   631,  1144,
     633,  1144,   632,    -1,     7,   631,  1144,   633,   235,  1144,
    1235,   632,    -1,    97,  1143,    -1,   102,   945,    -1,   108,
     631,  1144,   633,   235,  1144,  1235,   632,    -1,   109,   631,
    1144,   633,   235,  1144,  1235,   632,    -1,   174,   631,  1235,
     190,  1144,   632,    -1,   198,   631,  1237,   633,  1144,   632,
      -1,   956,    -1,   397,   631,  1147,   239,  1144,   632,    -1,
     526,   631,  1144,   633,  1144,   632,    -1,   526,   631,  1144,
     633,   235,  1144,  1235,   632,    -1,   530,   631,  1144,   633,
    1144,   633,  1144,   632,    -1,   530,   631,  1144,   633,  1144,
     632,    -1,   530,   631,  1144,   190,  1144,   187,  1144,   632,
      -1,   530,   631,  1144,   190,  1144,   632,    -1,   536,   945,
      -1,   551,   631,  1236,   633,  1144,   633,  1144,   632,    -1,
     552,   631,  1236,   633,  1144,   633,  1144,   632,    -1,   590,
    1143,    -1,   592,   945,    -1,   591,   945,    -1,    21,   631,
    1144,   632,    -1,    58,   631,  1144,   632,    -1,    66,   631,
    1183,   632,    -1,    69,   631,  1144,   632,    -1,   103,   631,
     632,    -1,   221,   631,  1144,   633,  1144,   633,  1144,   632,
      -1,   188,   631,  1144,   633,  1144,   632,    -1,   188,   631,
    1144,   633,  1144,   633,  1144,   632,    -1,   322,   631,  1144,
     632,    -1,   332,   631,  1144,   633,  1144,   632,    -1,   364,
     631,  1144,   632,    -1,   389,   631,  1144,   632,    -1,   411,
     631,  1144,   632,    -1,   439,   631,  1144,   633,  1144,   632,
      -1,   440,   631,  1144,   633,  1144,   633,  1144,   632,    -1,
     452,   631,  1144,   632,    -1,   461,   631,   632,    -1,   564,
     631,  1144,   633,  1144,   632,    -1,   604,   631,  1144,   632,
      -1,   604,   631,  1144,   633,  1144,   632,    -1,   605,   631,
    1144,   982,   632,    -1,   605,   631,  1144,    19,    59,   972,
     982,   632,    -1,   605,   631,  1144,    19,    33,   972,   632,
      -1,   605,   631,  1144,   633,  1263,   633,  1263,   633,  1263,
     632,    -1,  1158,    -1,    88,   631,  1144,   633,  1144,   632,
      -1,   196,   631,  1183,   632,    -1,   267,   631,  1183,   632,
      -1,   334,   631,  1183,   632,    -1,   335,   631,  1183,   632,
      -1,   336,   631,  1183,   632,    -1,   394,   631,  1144,   633,
    1144,   632,    -1,   395,   631,  1183,   632,    -1,    -1,  1438,
     631,  1160,  1164,   632,    -1,  1443,   639,  1443,   631,  1182,
     632,    -1,  1162,  1163,    -1,   239,    42,   329,    -1,    -1,
     239,   342,   253,   329,    -1,    -1,   609,   412,   169,    -1,
      -1,  1165,    -1,  1166,    -1,  1165,   633,  1166,    -1,  1140,
    1144,  1141,  1142,    -1,    27,   631,  1179,   632,    -1,    27,
     631,   136,  1179,   632,    -1,    36,   631,  1179,   632,    -1,
      37,   631,  1179,   632,    -1,    39,   631,  1179,   632,    -1,
      92,   631,  1240,   626,   632,    -1,    92,   631,  1179,   632,
      -1,    -1,    -1,    92,   631,   136,  1168,  1183,  1169,   632,
      -1,   328,   631,  1179,   632,    -1,   328,   631,   136,  1179,
     632,    -1,   311,   631,  1179,   632,    -1,   311,   631,   136,
    1179,   632,    -1,   520,   631,  1179,   632,    -1,   598,   631,
    1179,   632,    -1,   519,   631,  1179,   632,    -1,   600,   631,
    1179,   632,    -1,   531,   631,  1179,   632,    -1,   531,   631,
     136,  1179,   632,    -1,    -1,   204,   631,  1174,  1170,  1183,
    1176,  1175,   632,    -1,    -1,   638,  1172,  1173,    -1,  1445,
     478,  1144,    -1,  1445,    -1,   638,  1465,  1445,  1015,    -1,
      -1,   136,    -1,    -1,   471,  1422,    -1,    -1,    -1,   374,
      46,  1177,  1178,    -1,  1178,   633,  1430,  1256,    -1,  1430,
    1256,    -1,    -1,  1240,  1180,  1144,    -1,    33,   950,    -1,
      59,   950,   970,    -1,   344,   950,    -1,   485,    -1,   485,
     237,    -1,   581,    -1,   581,   237,    -1,   110,    -1,   553,
     944,    -1,   107,   944,    -1,   119,   942,    -1,    -1,  1183,
      -1,  1144,    -1,  1183,   633,  1144,    -1,  1185,    -1,   631,
    1185,   632,    -1,  1431,    -1,  1185,   633,  1431,    -1,    -1,
    1144,    -1,    -1,   146,  1144,    -1,   606,  1144,   549,  1144,
      -1,  1188,   606,  1144,   549,  1144,    -1,  1204,    -1,  1193,
      -1,  1192,    -1,  1189,    -1,   635,  1443,  1189,   636,    -1,
    1191,    -1,  1192,   633,  1191,    -1,  1189,  1201,  1189,    -1,
    1189,   523,  1204,    -1,    -1,  1189,  1201,  1189,   365,  1194,
    1144,    -1,    -1,  1189,   523,  1204,   365,  1195,  1144,    -1,
      -1,  1189,  1201,  1189,   589,  1196,   631,  1234,   632,    -1,
    1189,   342,   248,  1204,    -1,    -1,  1189,   259,  1220,   248,
    1189,   365,  1197,  1144,    -1,    -1,  1189,   259,  1220,   248,
    1204,  1198,   589,   631,  1234,   632,    -1,  1189,   342,   259,
    1220,   248,  1204,    -1,    -1,  1189,   454,  1220,   248,  1189,
     365,  1199,  1144,    -1,    -1,  1189,   454,  1220,   248,  1204,
    1200,   589,   631,  1234,   632,    -1,  1189,   342,   454,  1220,
     248,  1204,    -1,   248,    -1,   229,   248,    -1,    95,   248,
      -1,    -1,  1203,    -1,   386,   631,  1234,   632,   851,    -1,
      -1,  1205,  1435,  1202,  1239,  1229,    -1,  1219,  1218,  1215,
      -1,   631,  1218,  1206,   632,  1239,    -1,  1213,  1536,    -1,
      -1,    -1,  1206,   577,  1540,  1207,  1541,  1208,  1536,    -1,
    1210,    -1,    -1,    -1,  1211,  1547,  1138,  1212,   919,  1137,
      -1,    -1,  1218,  1214,  1192,    -1,    -1,    -1,  1216,  1134,
    1138,  1217,   919,    -1,    -1,   469,    -1,    -1,   377,    -1,
      -1,   187,   248,    -1,   187,   374,    46,    -1,   187,   203,
      46,    -1,   185,    -1,   222,    -1,    -1,  1222,   992,  1221,
    1224,   631,  1233,   632,    -1,    -1,   588,   992,  1221,  1225,
     631,  1231,   632,    -1,  1223,    -1,  1226,  1223,    -1,    -1,
      -1,  1228,  1226,    -1,    -1,  1230,  1227,    -1,    -1,  1233,
      -1,  1443,    -1,   402,    -1,  1232,    -1,  1233,   633,  1232,
      -1,  1443,    -1,  1234,   633,  1443,    -1,  1236,    -1,   111,
      -1,   112,    -1,   113,    -1,   114,    -1,   214,    -1,   215,
      -1,   216,    -1,   324,    -1,   325,    -1,   466,    -1,   619,
      -1,   115,    -1,   604,    -1,   217,    -1,   326,    -1,   333,
      -1,   411,    -1,   467,    -1,   322,    -1,   620,    -1,   110,
      -1,   553,    -1,   550,    -1,   107,    -1,    -1,    19,    -1,
     156,    -1,    -1,  1238,  1443,    -1,    -1,    12,    -1,    -1,
      -1,   607,  1242,  1144,    -1,    -1,    -1,   208,  1244,  1144,
      -1,   161,  1154,    -1,    -1,    -1,   203,    46,  1247,  1248,
      -1,  1247,   633,  1430,  1256,    -1,  1430,  1256,    -1,    -1,
     610,    -1,   611,    -1,   374,    46,  1250,    -1,  1250,   633,
    1251,    -1,  1251,    -1,  1432,  1256,    -1,    -1,  1253,    -1,
      -1,   374,    46,  1254,  1255,    -1,  1255,   633,  1430,  1256,
      -1,  1430,  1256,    -1,    -1,    20,    -1,   127,    -1,    -1,
    1259,    -1,    -1,  1259,    -1,   264,  1260,    -1,  1261,    -1,
    1261,   633,  1261,    -1,  1261,   363,  1261,    -1,  1443,    -1,
    1423,    -1,   568,    -1,   278,    -1,   359,    -1,    -1,   264,
    1261,    -1,   359,    -1,   210,    -1,   278,    -1,   568,    -1,
     118,    -1,   182,    -1,   359,    -1,   210,    -1,   278,    -1,
     568,    -1,  1267,    -1,   359,    -1,   568,    -1,   278,    -1,
     118,    -1,   182,    -1,   359,    -1,   568,    -1,   278,    -1,
    1267,    -1,  1268,    -1,   118,    -1,   182,    -1,    -1,    -1,
     404,    14,  1270,   631,  1271,   632,    -1,    -1,  1272,    -1,
    1272,   633,  1272,    -1,   359,    -1,    -1,  1274,  1275,    -1,
    1275,   633,  1276,    -1,  1276,    -1,   638,  1445,    -1,  1445,
      -1,    -1,   236,  1278,  1279,    -1,    -1,    -1,   378,  1442,
    1280,   961,  1281,  1406,  1409,    -1,   142,  1442,    -1,  1273,
      -1,    -1,   139,  1283,  1183,    -1,    -1,   140,  1295,  1479,
    1294,  1285,  1289,  1056,    -1,    -1,    -1,   140,   226,  1443,
     365,  1435,  1286,  1287,  1051,    -1,   140,   103,  1294,  1443,
      -1,   140,   193,  1294,  1443,   639,  1443,    -1,   140,   193,
    1294,  1443,    -1,   140,   404,  1294,   692,    -1,   140,   586,
     691,  1511,    -1,    -1,   140,   601,  1294,  1288,  1289,  1056,
      -1,   140,   163,  1294,   692,    -1,   140,   561,  1294,   692,
      -1,   140,   538,   827,  1296,    -1,   140,   274,   203,   828,
    1296,    -1,   140,   475,  1294,  1445,    -1,  1290,    -1,  1289,
     633,  1290,    -1,  1435,    -1,  1435,  1202,    -1,  1293,    -1,
    1292,   633,  1293,    -1,  1436,    -1,    -1,   221,   167,    -1,
      -1,   543,    -1,    -1,  1297,    -1,  1298,    -1,  1297,  1298,
      -1,  1296,   633,  1298,    -1,   838,    -1,   839,    -1,    -1,
      -1,   232,  1300,  1305,  1055,  1307,  1301,  1309,  1325,    -1,
      -1,    -1,   440,  1303,  1306,  1307,  1304,  1309,    -1,    -1,
     281,    -1,   124,    -1,   211,    -1,  1334,    -1,   124,    -1,
     236,  1308,    -1,  1308,    -1,  1291,    -1,  1312,    -1,   631,
     632,  1312,    -1,   631,  1311,   632,  1312,    -1,    -1,   477,
    1310,  1316,    -1,  1311,   633,  1428,    -1,  1428,    -1,   593,
    1315,    -1,   594,  1315,    -1,    -1,   897,  1313,  1532,    -1,
      -1,   631,   897,   632,  1314,  1535,    -1,  1315,   633,  1320,
      -1,  1320,    -1,  1316,   633,  1317,    -1,  1317,    -1,  1432,
    1318,  1324,    -1,   156,    -1,   478,    -1,    -1,  1318,    -1,
      -1,   631,  1321,  1322,   632,    -1,    -1,  1323,    -1,  1323,
     633,  1324,    -1,  1324,    -1,  1144,    -1,   121,    -1,    -1,
      -1,   365,   143,  1326,   251,   583,  1332,    -1,    -1,    -1,
     583,  1328,  1334,  1055,  1190,   477,  1330,  1329,  1241,  1252,
    1262,    -1,  1330,   633,  1331,    -1,  1331,    -1,  1432,  1318,
    1324,    -1,  1332,   633,  1333,    -1,  1333,    -1,  1432,  1318,
    1324,    -1,    -1,   281,    -1,    -1,   126,  1336,  1344,  1337,
      -1,    -1,   190,  1435,  1202,  1338,  1241,  1252,  1262,    -1,
      -1,  1341,  1339,   190,  1190,  1241,    -1,    -1,   190,  1292,
    1340,   589,  1190,  1241,    -1,  1342,    -1,  1341,   633,  1342,
      -1,  1443,  1343,    -1,  1443,   639,  1443,  1343,    -1,    -1,
     639,   626,    -1,    -1,  1345,  1344,    -1,   413,    -1,   281,
      -1,   222,    -1,    -1,   564,  1348,  1347,  1290,    -1,    -1,
     540,    -1,    -1,  1350,    -1,  1351,    -1,  1350,   633,  1351,
      -1,    93,    -1,   319,    -1,    41,   242,    -1,    89,   535,
      -1,   382,   177,    -1,   243,    -1,   534,    -1,   494,    -1,
      12,    -1,    -1,   187,   412,   359,    -1,    -1,   482,  1354,
    1355,    -1,   104,  1366,    -1,  1362,   537,  1361,  1366,    -1,
    1362,   560,  1361,  1366,    -1,   162,  1361,  1366,    -1,   540,
     518,  1361,  1366,    -1,   368,   537,  1361,  1366,    -1,   393,
      -1,   154,   916,  1358,    -1,   154,    12,  1358,    -1,  1362,
      70,  1363,  1435,  1361,  1366,    -1,  1359,   275,    -1,   487,
     213,    -1,    -1,    34,   162,  1364,  1365,  1356,  1257,    -1,
      -1,   428,   162,  1364,  1365,  1357,  1257,    -1,   994,  1363,
    1435,  1361,  1241,    -1,  1360,   153,    -1,   403,    -1,    92,
     631,   626,   632,   603,    -1,    92,   631,   626,   632,   159,
      -1,   603,  1257,    -1,   159,  1257,    -1,   408,    -1,   407,
    1349,  1352,  1257,    -1,  1464,   518,  1366,    -1,  1362,   406,
      -1,  1464,   597,  1366,    -1,   958,  1366,    -1,    69,  1366,
      -1,   202,    -1,   202,   187,  1446,    -1,    94,   103,   907,
    1443,    -1,    94,   540,  1435,    -1,    94,   601,  1435,    -1,
     303,   518,    -1,   487,   518,    -1,    94,   404,   692,    -1,
      94,   193,   692,    -1,    94,   561,   692,    -1,   404,   518,
    1366,    -1,   193,   518,  1366,    -1,   404,    67,   692,    -1,
     193,    67,   692,    -1,    94,   163,   692,    -1,   518,    -1,
     337,    -1,   275,    -1,   303,    -1,    33,    -1,    -1,   522,
      -1,    -1,  1363,  1443,    -1,    -1,   191,    -1,   190,    -1,
     239,    -1,    -1,   239,  1440,    -1,    -1,   190,  1265,    -1,
      -1,   263,  1440,    -1,   607,  1144,    -1,  1371,   116,  1129,
    1131,  1130,    -1,    -1,  1371,  1435,  1368,  1373,    -1,    -1,
    1371,  1372,  1369,  1370,    -1,  1119,    -1,  1299,    -1,  1302,
      -1,  1327,    -1,  1335,    -1,   127,    -1,   128,    -1,    -1,
     172,    -1,   387,    -1,   188,   156,  1445,    -1,    -1,  1422,
      -1,  1443,    -1,    -1,   184,  1093,  1375,  1376,    -1,    -1,
      -1,  1479,  1377,  1383,  1378,  1379,    -1,  1381,    -1,    -1,
     609,   417,   273,    -1,    -1,   187,  1380,   171,    -1,  1381,
     633,  1382,    -1,  1382,    -1,   158,   275,    -1,   154,   275,
      -1,   195,   275,    -1,   488,   275,    -1,    33,   275,    -1,
     427,   275,    -1,   412,    48,    -1,   213,    -1,   403,    -1,
     275,    -1,   518,    -1,   129,    -1,   445,    -1,    -1,  1289,
      -1,    -1,   443,  1385,  1386,    -1,  1386,   633,  1387,    -1,
    1387,    -1,    -1,   487,  1388,  1389,    -1,   303,    -1,   412,
      48,    -1,    -1,    12,    -1,    -1,   410,  1391,  1392,    -1,
    1359,   275,  1393,    -1,   557,  1440,    -1,    29,  1144,    -1,
     252,  1395,  1144,    -1,    -1,    82,    -1,   412,    -1,   588,
    1443,    -1,    -1,    -1,    -1,    -1,   269,  1402,  1398,  1404,
    1403,   227,  1442,  1399,  1405,   236,   540,  1435,  1202,  1400,
     961,  1401,  1412,  1406,  1409,  1413,  1415,  1418,    -1,   106,
      -1,   617,    -1,    -1,   270,    -1,    -1,    80,    -1,   281,
      -1,    -1,   440,    -1,   222,    -1,    -1,    70,  1407,    -1,
    1407,  1408,    -1,  1408,    -1,   545,    46,  1422,    -1,   372,
     149,    46,  1422,    -1,   149,    46,  1422,    -1,   160,    46,
    1422,    -1,    -1,   266,  1410,    -1,  1410,  1411,    -1,  1411,
      -1,   545,    46,  1422,    -1,   512,    46,  1422,    -1,    -1,
     458,   219,    46,  1422,    -1,    -1,   222,   359,  1414,    -1,
     266,    -1,   458,    -1,    -1,   631,  1416,   632,    -1,   631,
     632,    -1,  1416,   633,  1417,    -1,  1417,    -1,  1432,    -1,
     638,  1445,    -1,    -1,   477,  1419,    -1,  1419,   633,  1420,
      -1,  1420,    -1,  1432,  1318,  1140,  1324,  1141,    -1,   546,
      -1,   343,    -1,   571,   546,    -1,  1421,  1441,    -1,  1441,
      -1,   210,    -1,    35,    -1,   383,    -1,  1425,    -1,   625,
    1426,    -1,   624,  1426,    -1,  1421,    -1,  1426,    -1,  1427,
      -1,   358,    -1,   175,    -1,   563,    -1,   210,    -1,    35,
      -1,   571,   210,    -1,   571,    35,    -1,   359,    -1,   278,
      -1,   568,    -1,   118,    -1,   182,    -1,   110,   546,    -1,
     553,   546,    -1,   550,   546,    -1,  1432,    -1,  1429,    -1,
    1443,   639,   626,    -1,  1443,   639,  1443,   639,   626,    -1,
    1144,    -1,  1443,    -1,  1433,    -1,  1443,    -1,  1433,    -1,
    1443,   639,  1443,    -1,   639,  1443,   639,  1443,    -1,  1443,
     639,  1443,   639,  1443,    -1,  1443,    -1,  1443,   639,  1443,
     639,  1443,    -1,  1443,   639,  1443,    -1,   639,  1443,    -1,
    1443,    -1,  1443,   639,  1443,    -1,   639,  1443,    -1,  1443,
    1343,    -1,  1443,   639,  1443,  1343,    -1,  1443,    -1,   218,
      -1,   220,    -1,  1440,    -1,   546,    -1,   546,    -1,   546,
      -1,  1438,    -1,  1447,    -1,  1438,    -1,  1448,    -1,  1443,
      -1,  1440,    -1,   262,    -1,  1445,    -1,  1445,   638,  1445,
      -1,    99,  1143,    -1,  1448,    -1,    21,    -1,    28,    -1,
      30,    -1,    47,    -1,    48,    -1,    58,    -1,    60,    -1,
      65,    -1,    74,    -1,    76,    -1,    88,    -1,   117,    -1,
     139,    -1,   150,    -1,   166,    -1,   184,    -1,   188,    -1,
     206,    -1,   209,    -1,   212,    -1,   234,    -1,   253,    -1,
     355,    -1,   368,    -1,   370,    -1,   380,    -1,   384,    -1,
     396,    -1,   399,    -1,   434,    -1,   437,    -1,   443,    -1,
     446,    -1,   455,    -1,   463,    -1,   468,    -1,   475,    -1,
     485,    -1,   491,    -1,   487,    -1,   492,    -1,   514,    -1,
     521,    -1,   564,    -1,   575,    -1,   576,    -1,   613,    -1,
     616,    -1,   584,    -1,     5,    -1,     7,    -1,     8,    -1,
       9,    -1,    10,    -1,    11,    -1,    14,    -1,    18,    -1,
      23,    -1,    25,    -1,    24,    -1,    26,    -1,    27,    -1,
      34,    -1,    38,    -1,    41,    -1,    43,    -1,    42,    -1,
      45,    -1,    51,    -1,    54,    -1,    55,    -1,    57,    -1,
      62,    -1,    64,    -1,    63,    -1,    66,    -1,    67,    -1,
      69,    -1,    73,    -1,    72,    -1,    70,    -1,    75,    -1,
      77,    -1,    78,    -1,    79,    -1,    80,    -1,    82,    -1,
      83,    -1,    85,    -1,    87,    -1,    86,    -1,    89,    -1,
      93,    -1,    96,    -1,    98,    -1,   101,    -1,   106,    -1,
     105,    -1,   107,    -1,   110,    -1,   115,    -1,   122,    -1,
     123,    -1,   125,    -1,   129,    -1,   131,    -1,   132,    -1,
     133,    -1,   134,    -1,   135,    -1,   142,    -1,   143,    -1,
     144,    -1,   151,    -1,   155,    -1,   154,    -1,   153,    -1,
     158,    -1,   159,    -1,   161,    -1,   163,    -1,   162,    -1,
     164,    -1,   165,    -1,   169,    -1,   170,    -1,   171,    -1,
     172,    -1,   173,    -1,   177,    -1,   176,    -1,   189,    -1,
     148,    -1,   191,    -1,   179,    -1,   180,    -1,   181,    -1,
     195,    -1,   197,    -1,   196,    -1,   198,    -1,   202,    -1,
     200,    -1,   207,    -1,   213,    -1,   217,    -1,   219,    -1,
     223,    -1,   238,    -1,   224,    -1,   225,    -1,   228,    -1,
     242,    -1,   243,    -1,   245,    -1,   246,    -1,   233,    -1,
     250,    -1,   254,    -1,   257,    -1,   260,    -1,   261,    -1,
     267,    -1,   268,    -1,   270,    -1,   272,    -1,   274,    -1,
     275,    -1,   309,    -1,   303,    -1,   305,    -1,   287,    -1,
     291,    -1,   288,    -1,   289,    -1,   304,    -1,   290,    -1,
     293,    -1,   285,    -1,   292,    -1,   286,    -1,   301,    -1,
     295,    -1,   294,    -1,   296,    -1,   297,    -1,   298,    -1,
     299,    -1,   300,    -1,   283,    -1,   307,    -1,   308,    -1,
     310,    -1,   312,    -1,   313,    -1,   318,    -1,   319,    -1,
     320,    -1,   321,    -1,   322,    -1,   323,    -1,   326,    -1,
     327,    -1,   331,    -1,   329,    -1,   333,    -1,   334,    -1,
     335,    -1,   336,    -1,   337,    -1,   338,    -1,   340,    -1,
     339,    -1,   341,    -1,   344,    -1,   345,    -1,   349,    -1,
     348,    -1,   356,    -1,   350,    -1,   351,    -1,   360,    -1,
     362,    -1,   363,    -1,   364,    -1,   366,    -1,   367,    -1,
     381,    -1,   382,    -1,   385,    -1,   388,    -1,   387,    -1,
     389,    -1,   390,    -1,   391,    -1,   392,    -1,   393,    -1,
     394,    -1,   395,    -1,   400,    -1,   401,    -1,   403,    -1,
     405,    -1,   406,    -1,   407,    -1,   408,    -1,   409,    -1,
     411,    -1,   412,    -1,   413,    -1,   416,    -1,   420,    -1,
     421,    -1,   423,    -1,   422,    -1,   424,    -1,   427,    -1,
     428,    -1,   429,    -1,   430,    -1,   431,    -1,   433,    -1,
     436,    -1,   438,    -1,   441,    -1,   445,    -1,   448,    -1,
     449,    -1,   450,    -1,   452,    -1,   456,    -1,   457,    -1,
     458,    -1,   461,    -1,   459,    -1,   460,    -1,   462,    -1,
     464,    -1,   465,    -1,   467,    -1,   473,    -1,   472,    -1,
     474,    -1,   486,    -1,   479,    -1,   483,    -1,   488,    -1,
     490,    -1,   493,    -1,   494,    -1,   500,    -1,   501,    -1,
     502,    -1,   505,    -1,   504,    -1,   507,    -1,   510,    -1,
     513,    -1,   515,    -1,   516,    -1,   517,    -1,   518,    -1,
     522,    -1,   524,    -1,   525,    -1,   526,    -1,   527,    -1,
     529,    -1,   528,    -1,   532,    -1,   533,    -1,   534,    -1,
     535,    -1,   542,    -1,   537,    -1,   541,    -1,   538,    -1,
     543,    -1,   544,    -1,   547,    -1,   548,    -1,   559,    -1,
     560,    -1,   550,    -1,   551,    -1,   552,    -1,   553,    -1,
     565,    -1,   566,    -1,   567,    -1,   193,    -1,   569,    -1,
     570,    -1,   573,    -1,   572,    -1,   579,    -1,   582,    -1,
     586,    -1,   587,    -1,   597,    -1,   601,    -1,   594,    -1,
     603,    -1,   602,    -1,   604,    -1,   612,    -1,   605,    -1,
     615,    -1,   617,    -1,   620,    -1,    -1,   477,  1450,  1451,
      -1,    -1,  1467,  1452,  1457,    -1,    -1,   559,  1453,  1470,
      -1,    -1,  1463,  1454,  1455,    -1,    -1,  1466,  1456,  1457,
      -1,   559,  1470,    -1,    -1,   633,  1458,    -1,    -1,  1459,
    1461,    -1,    -1,  1458,   633,  1460,  1461,    -1,    -1,  1463,
    1462,  1466,    -1,  1467,    -1,   200,    -1,   270,    -1,   474,
      -1,    -1,   200,    -1,   270,    -1,   474,    -1,    -1,   200,
     639,    -1,   270,   639,    -1,   474,   639,    -1,  1469,  1318,
    1476,    -1,    -1,  1469,  1318,  1468,  1476,    -1,   638,  1445,
    1318,  1144,    -1,   638,   638,  1465,  1469,  1318,  1476,    -1,
     958,   963,    -1,   339,  1318,  1144,    -1,   339,   960,   965,
      -1,   389,  1318,  1475,    -1,   389,   187,  1446,  1318,  1475,
      -1,  1443,    -1,  1443,   639,  1443,    -1,   121,   639,  1443,
      -1,  1471,    -1,  1472,    -1,  1471,   633,  1472,    -1,  1472,
     633,  1471,    -1,  1473,    -1,   245,   261,  1474,    -1,   417,
     367,    -1,   417,   614,    -1,   417,   569,    -1,   417,    75,
      -1,   438,   417,    -1,   472,    -1,   546,    -1,   389,   631,
     546,   632,    -1,   364,   631,   546,   632,    -1,  1144,    -1,
     121,    -1,   365,    -1,    12,    -1,    33,    -1,    -1,   273,
    1479,  1478,  1480,    -1,   540,    -1,   537,    -1,  1481,    -1,
    1480,   633,  1481,    -1,  1435,  1239,  1482,    -1,   417,    -1,
     614,    -1,   281,   614,    -1,   417,   270,    -1,    -1,   580,
    1484,  1479,    -1,   206,  1435,   368,  1239,    -1,   206,  1437,
      65,    -1,    -1,   206,  1437,   417,  1486,  1487,  1241,  1258,
      -1,  1488,    -1,  1443,  1489,    -1,   180,    -1,   349,    -1,
     180,    -1,   349,    -1,   401,    -1,   254,    -1,    -1,  1491,
    1490,   631,  1323,   632,    -1,   156,    -1,   194,    -1,   255,
      -1,   205,    -1,   282,    -1,    -1,   453,   691,  1493,  1494,
      -1,  1499,   365,  1498,  1510,   190,  1512,    -1,  1499,   365,
     193,  1510,   190,  1512,    -1,  1499,   365,   404,  1510,   190,
    1512,    -1,    12,  1500,   633,   201,   371,   190,  1512,    -1,
     409,   365,  1446,   190,  1512,    -1,    -1,   201,   691,  1496,
    1497,    -1,  1499,   365,  1498,  1510,   557,  1512,  1517,  1518,
      -1,  1499,   365,   193,  1510,   557,  1512,  1517,  1518,    -1,
    1499,   365,   404,  1510,   557,  1512,  1517,  1518,    -1,   409,
     365,  1446,   557,  1512,  1519,    -1,    -1,   540,    -1,  1501,
      -1,    12,  1500,    -1,    -1,   403,    -1,  1502,    -1,  1501,
     633,  1502,    -1,    -1,   469,  1503,  1514,    -1,    -1,   232,
    1504,  1514,    -1,    -1,   583,  1505,  1514,    -1,    -1,   425,
    1506,  1514,    -1,   126,    -1,   585,    -1,   226,    -1,    13,
      -1,    94,    -1,   140,    -1,   166,    -1,   433,    -1,   483,
      -1,   405,    -1,   179,    -1,   201,   371,    -1,   482,   104,
      -1,   532,    -1,    94,   543,   537,    -1,   273,   537,    -1,
     441,   487,    -1,   441,    64,    -1,    94,   601,    -1,   482,
     601,    -1,    94,   457,    -1,    13,   457,    -1,    94,   586,
      -1,   163,    -1,   561,    -1,    94,   538,    -1,    -1,    17,
      -1,  1509,  1507,  1508,    -1,  1509,    -1,   527,   546,    -1,
     246,   546,    -1,    62,   546,    -1,   626,    -1,  1443,   639,
     626,    -1,   626,   639,   626,    -1,  1435,    -1,  1446,    -1,
    1511,   633,  1446,    -1,  1513,    -1,  1512,   633,  1513,    -1,
    1446,   219,    46,   546,    -1,  1446,   219,    46,   389,   546,
      -1,  1446,   219,   609,  1445,    -1,  1446,   219,   609,  1445,
      19,  1440,    -1,  1446,    -1,    -1,   631,  1515,   632,    -1,
    1515,   633,  1516,    -1,  1516,    -1,  1443,    -1,    -1,   442,
    1508,    -1,   442,   511,    -1,   442,   615,    -1,   442,   351,
      -1,    -1,   609,  1520,    -1,    -1,   609,   201,   371,    -1,
    1520,  1521,    -1,  1521,    -1,   201,   371,    -1,   308,  1263,
      -1,   312,  1263,    -1,   307,  1263,    -1,   313,  1263,    -1,
      -1,    30,  1523,  1524,    -1,    -1,   612,    -1,    -1,    17,
     355,    55,    -1,    17,    55,    -1,    -1,   432,    -1,   355,
     432,    -1,    -1,   463,    -1,    76,  1524,  1525,  1526,    -1,
     455,  1524,  1525,  1526,    -1,   455,  1524,   557,  1527,  1443,
      -1,   463,  1443,    -1,   432,   463,  1443,    -1,    -1,  1533,
      -1,    -1,   577,  1540,  1534,  1120,    -1,    -1,  1533,    -1,
    1537,    -1,    -1,  1537,    -1,    -1,  1538,  1539,    -1,  1253,
    1257,    -1,  1259,    -1,    -1,   136,    -1,    12,    -1,   469,
    1209,    -1,   631,  1122,   632,    -1,  1541,  1536,    -1,    -1,
    1542,   577,  1540,  1543,  1541,  1536,    -1,  1545,  1542,  1546,
      -1,    -1,    -1,    -1,  1548,    -1,  1548,  1549,    -1,  1549,
      -1,   523,    -1,   211,    -1,   136,    -1,   508,    -1,   503,
      -1,   504,    -1,   506,    -1,    12,    -1,  1555,  1551,    -1,
    1554,  1552,    -1,  1556,  1553,  1560,    -1,  1560,    -1,  1572,
      -1,  1583,    -1,  1577,    -1,   678,    -1,  1560,    -1,  1572,
      -1,  1583,    -1,  1577,    -1,  1576,    -1,   678,    -1,  1554,
      -1,  1555,    -1,    -1,   123,   156,  1446,    -1,  1557,    -1,
    1557,  1558,    -1,  1558,    -1,   376,   440,    -1,    11,   156,
     570,    -1,    11,   156,   320,    -1,    11,   156,   544,    -1,
      -1,   509,   468,   123,    -1,   509,   468,   238,    -1,    -1,
    1559,   601,  1435,  1561,  1562,    19,  1564,    -1,    -1,   631,
    1563,   632,    -1,  1443,    -1,  1563,   633,  1443,    -1,    -1,
    1565,  1566,  1571,    -1,    -1,  1569,  1567,  1532,    -1,   631,
    1568,   632,  1535,    -1,  1569,    -1,   631,  1568,   632,    -1,
      -1,   469,  1570,  1125,    -1,    -1,   609,    61,   371,    -1,
     609,    51,    61,   371,    -1,   609,   270,    61,   371,    -1,
      -1,    -1,    -1,   561,  1140,   692,   798,   799,   365,  1140,
    1573,  1435,   187,  1140,  1574,   145,   460,  1575,   747,    -1,
      10,  1140,   193,  1443,   450,   920,   492,  1440,    -1,  1140,
     193,  1443,   450,   920,   492,  1440,    -1,    -1,    -1,    -1,
      -1,    -1,  1140,   193,   692,   631,  1578,   703,   632,  1579,
     450,  1580,   955,  1581,   694,  1582,   747,    -1,    -1,    -1,
      -1,    -1,   404,  1140,   692,  1584,   631,  1585,   707,   632,
    1586,   694,  1587,   747,    -1,   616,  1590,  1589,  1591,    -1,
     616,   150,  1589,  1593,    -1,   616,   399,  1589,    -1,   616,
      76,  1589,  1592,    -1,   616,   455,  1589,    -1,   616,   421,
      -1,  1422,    -1,  1422,   633,  1422,    -1,  1422,   633,  1422,
     633,  1263,    -1,    30,    -1,   514,    -1,    -1,   248,    -1,
     448,    -1,    -1,   366,   390,    -1,    -1,    -1,   533,  1594,
    1595,    -1,    -1,   187,   323,    -1,   234,   392,  1443,   492,
    1440,    -1,   576,   392,  1443,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1973,  1973,  1986,  1985,  2010,  2017,  2019,  2023,  2024,
    2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,  2038,
    2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,  2047,  2048,
    2049,  2050,  2051,  2052,  2053,  2054,  2055,  2056,  2057,  2058,
    2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,
    2069,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,
    2080,  2081,  2082,  2086,  2096,  2097,  2101,  2121,  2128,  2139,
    2138,  2149,  2151,  2155,  2156,  2160,  2173,  2172,  2192,  2191,
    2209,  2210,  2214,  2218,  2222,  2226,  2231,  2235,  2239,  2244,
    2257,  2262,  2266,  2270,  2274,  2278,  2282,  2287,  2291,  2296,
    2327,  2332,  2339,  2342,  2344,  2345,  2349,  2363,  2367,  2383,
    2387,  2400,  2399,  2447,  2452,  2446,  2459,  2464,  2457,  2471,
    2476,  2469,  2482,  2481,  2494,  2493,  2501,  2505,  2509,  2513,
    2520,  2538,  2539,  2543,  2547,  2551,  2555,  2559,  2564,  2568,
    2576,  2575,  2607,  2606,  2613,  2620,  2621,  2627,  2633,  2643,
    2649,  2655,  2657,  2664,  2665,  2669,  2675,  2684,  2685,  2693,
    2693,  2748,  2749,  2750,  2751,  2752,  2753,  2754,  2755,  2756,
    2757,  2758,  2759,  2760,  2765,  2779,  2793,  2812,  2813,  2817,
    2818,  2823,  2825,  2827,  2829,  2831,  2833,  2835,  2841,  2842,
    2843,  2847,  2851,  2859,  2858,  2871,  2873,  2876,  2878,  2882,
    2886,  2893,  2895,  2899,  2900,  2905,  2924,  2954,  2956,  2960,
    2961,  2965,  2994,  2995,  2996,  2997,  3001,  3002,  3006,  3007,
    3012,  3015,  3042,  3041,  3125,  3142,  3141,  3216,  3215,  3288,
    3289,  3294,  3296,  3301,  3324,  3335,  3339,  3361,  3362,  3366,
    3370,  3383,  3389,  3395,  3404,  3419,  3445,  3451,  3452,  3458,
    3461,  3465,  3473,  3493,  3495,  3513,  3519,  3521,  3523,  3525,
    3527,  3529,  3531,  3533,  3535,  3537,  3539,  3541,  3546,  3562,
    3578,  3579,  3584,  3590,  3599,  3605,  3614,  3622,  3651,  3660,
    3662,  3671,  3676,  3682,  3691,  3699,  3701,  3703,  3705,  3707,
    3709,  3711,  3713,  3715,  3717,  3719,  3721,  3723,  3728,  3748,
    3772,  3774,  3773,  3780,  3781,  3782,  3783,  3784,  3785,  3786,
    3787,  3788,  3789,  3790,  3791,  3792,  3797,  3796,  3807,  3807,
    3864,  3863,  3920,  3920,  3942,  4001,  4051,  4076,  4075,  4101,
    4124,  4126,  4127,  4131,  4149,  4170,  4179,  4215,  4170,  4244,
    4246,  4247,  4251,  4252,  4257,  4268,  4256,  4319,  4318,  4332,
    4333,  4337,  4338,  4343,  4352,  4342,  4401,  4410,  4400,  4454,
    4467,  4472,  4471,  4509,  4510,  4515,  4514,  4548,  4548,  4567,
    4566,  4616,  4633,  4642,  4632,  4696,  4705,  4695,  4745,  4747,
    4752,  4754,  4756,  4773,  4778,  4784,  4791,  4792,  4800,  4806,
    4815,  4821,  4827,  4828,  4832,  4832,  4837,  4838,  4839,  4843,
    4844,  4845,  4848,  4850,  4854,  4855,  4856,  4860,  4861,  4862,
    4863,  4864,  4865,  4866,  4867,  4870,  4872,  4876,  4877,  4878,
    4882,  4883,  4884,  4885,  4886,  4889,  4891,  4895,  4896,  4897,
    4901,  4902,  4903,  4904,  4905,  4906,  4907,  4910,  4912,  4916,
    4917,  4918,  4922,  4923,  4924,  4929,  4937,  4945,  4953,  4965,
    4977,  4982,  4987,  4995,  5003,  5011,  5019,  5027,  5035,  5043,
    5056,  5069,  5083,  5088,  5101,  5102,  5153,  5154,  5157,  5172,
    5190,  5195,  5193,  5200,  5202,  5201,  5205,  5204,  5210,  5247,
    5248,  5253,  5252,  5271,  5290,  5289,  5306,  5310,  5318,  5317,
    5320,  5322,  5324,  5326,  5331,  5332,  5338,  5339,  5356,  5357,
    5361,  5362,  5366,  5385,  5395,  5406,  5415,  5416,  5432,  5434,
    5433,  5438,  5436,  5447,  5448,  5452,  5470,  5486,  5487,  5503,
    5518,  5540,  5541,  5546,  5545,  5569,  5585,  5607,  5606,  5624,
    5623,  5643,  5665,  5669,  5698,  5710,  5711,  5716,  5727,  5715,
    5752,  5753,  5757,  5770,  5791,  5804,  5830,  5831,  5836,  5835,
    5872,  5885,  5886,  5890,  5891,  5895,  5897,  5903,  5905,  5907,
    5909,  5911,  5913,  5923,  5938,  5922,  5952,  5953,  5957,  5958,
    5962,  5963,  5967,  5968,  5972,  5973,  5977,  5978,  5982,  5986,
    5987,  5990,  5992,  5996,  5997,  6001,  6002,  6003,  6007,  6012,
    6017,  6022,  6027,  6032,  6037,  6042,  6057,  6063,  6078,  6083,
    6098,  6104,  6122,  6127,  6132,  6137,  6142,  6148,  6147,  6173,
    6174,  6175,  6180,  6185,  6190,  6192,  6194,  6196,  6202,  6210,
    6228,  6245,  6271,  6289,  6290,  6291,  6292,  6293,  6294,  6298,
    6299,  6300,  6304,  6305,  6309,  6310,  6311,  6312,  6317,  6324,
    6325,  6329,  6330,  6334,  6335,  6342,  6347,  6353,  6359,  6365,
    6384,  6390,  6392,  6396,  6400,  6401,  6405,  6410,  6409,  6432,
    6433,  6434,  6435,  6440,  6444,  6449,  6454,  6458,  6463,  6468,
    6474,  6479,  6485,  6489,  6494,  6499,  6517,  6519,  6521,  6537,
    6539,  6544,  6549,  6561,  6566,  6571,  6576,  6578,  6580,  6582,
    6584,  6586,  6588,  6590,  6593,  6592,  6597,  6596,  6600,  6602,
    6611,  6612,  6613,  6619,  6620,  6621,  6622,  6623,  6627,  6631,
    6632,  6636,  6637,  6641,  6642,  6643,  6644,  6645,  6649,  6650,
    6651,  6652,  6653,  6657,  6662,  6664,  6670,  6671,  6673,  6678,
    6688,  6689,  6693,  6694,  6695,  6703,  6704,  6708,  6709,  6713,
    6714,  6715,  6719,  6720,  6721,  6722,  6725,  6726,  6730,  6731,
    6735,  6736,  6740,  6741,  6745,  6746,  6747,  6748,  6749,  6750,
    6756,  6762,  6768,  6774,  6775,  6788,  6794,  6800,  6806,  6811,
    6816,  6825,  6846,  6854,  6855,  6860,  6861,  6865,  6873,  6877,
    6878,  6882,  6883,  6887,  6896,  6900,  6901,  6905,  6913,  6914,
    6918,  6919,  6923,  6924,  6929,  6930,  6934,  6941,  6950,  6955,
    6963,  6964,  6965,  6966,  6967,  6968,  6973,  6981,  6982,  6987,
    6986,  6999,  7000,  7004,  7007,  7008,  7009,  7010,  7014,  7022,
    7029,  7030,  7034,  7044,  7045,  7049,  7050,  7053,  7055,  7059,
    7071,  7072,  7076,  7083,  7096,  7097,  7099,  7101,  7107,  7112,
    7118,  7124,  7131,  7141,  7142,  7143,  7144,  7145,  7149,  7153,
    7154,  7158,  7159,  7163,  7164,  7168,  7169,  7170,  7174,  7175,
    7179,  7183,  7196,  7208,  7209,  7213,  7214,  7218,  7219,  7223,
    7224,  7228,  7229,  7233,  7234,  7238,  7239,  7243,  7244,  7248,
    7250,  7254,  7255,  7259,  7263,  7264,  7277,  7278,  7279,  7283,
    7284,  7288,  7294,  7308,  7309,  7313,  7314,  7318,  7319,  7327,
    7326,  7372,  7371,  7385,  7397,  7396,  7415,  7414,  7433,  7432,
    7451,  7445,  7465,  7464,  7497,  7502,  7507,  7512,  7517,  7524,
    7531,  7536,  7544,  7545,  7546,  7547,  7551,  7552,  7564,  7565,
    7569,  7570,  7573,  7575,  7583,  7591,  7593,  7595,  7596,  7604,
    7605,  7609,  7618,  7616,  7630,  7644,  7643,  7657,  7655,  7669,
    7676,  7687,  7688,  7716,  7723,  7727,  7732,  7731,  7747,  7749,
    7754,  7762,  7761,  7777,  7781,  7780,  7792,  7793,  7797,  7812,
    7813,  7817,  7826,  7830,  7835,  7841,  7840,  7851,  7860,  7850,
    7875,  7884,  7893,  7902,  7911,  7917,  7923,  7932,  7941,  7969,
    7990,  8000,  8004,  8009,  8010,  8013,  8015,  8016,  8017,  8018,
    8021,  8026,  8037,  8042,  8053,  8054,  8058,  8059,  8063,  8064,
    8065,  8069,  8070,  8075,  8083,  8084,  8085,  8086,  8091,  8090,
    8119,  8129,  8146,  8149,  8156,  8160,  8167,  8171,  8175,  8182,
    8187,  8190,  8197,  8200,  8207,  8210,  8217,  8220,  8228,  8231,
    8238,  8242,  8249,  8253,  8260,  8261,  8286,  8287,  8288,  8293,
    8298,  8306,  8305,  8317,  8318,  8319,  8324,  8323,  8345,  8346,
    8350,  8351,  8355,  8356,  8357,  8362,  8361,  8383,  8392,  8391,
    8418,  8419,  8423,  8424,  8428,  8429,  8430,  8431,  8432,  8433,
    8438,  8437,  8459,  8460,  8461,  8466,  8465,  8471,  8478,  8483,
    8491,  8492,  8496,  8510,  8509,  8522,  8523,  8527,  8528,  8532,
    8542,  8552,  8553,  8558,  8557,  8568,  8569,  8573,  8574,  8578,
    8588,  8599,  8598,  8606,  8606,  8617,  8618,  8623,  8624,  8629,
    8642,  8651,  8652,  8656,  8661,  8666,  8671,  8676,  8675,  8695,
    8703,  8695,  8710,  8711,  8712,  8713,  8714,  8718,  8720,  8727,
    8729,  8731,  8732,  8733,  8747,  8748,  8760,  8767,  8774,  8776,
    8787,  8788,  8792,  8793,  8821,  8851,  8853,  8862,  8875,  8876,
    8877,  8892,  8899,  8924,  8930,  8936,  8937,  8938,  8939,  8940,
    8944,  8945,  8950,  9001,  9008,  9051,  9057,  9063,  9069,  9075,
    9081,  9087,  9093,  9097,  9103,  9109,  9115,  9121,  9127,  9131,
    9137,  9147,  9153,  9161,  9167,  9177,  9183,  9192,  9202,  9208,
    9218,  9224,  9233,  9237,  9243,  9249,  9255,  9261,  9267,  9273,
    9279,  9285,  9291,  9297,  9303,  9309,  9315,  9321,  9325,  9326,
    9330,  9331,  9335,  9336,  9340,  9341,  9345,  9346,  9347,  9348,
    9349,  9350,  9354,  9355,  9359,  9360,  9361,  9362,  9363,  9364,
    9376,  9377,  9378,  9379,  9380,  9386,  9390,  9396,  9402,  9408,
    9414,  9416,  9423,  9430,  9436,  9477,  9486,  9493,  9501,  9507,
    9514,  9520,  9534,  9541,  9557,  9563,  9569,  9577,  9583,  9589,
    9595,  9601,  9616,  9628,  9634,  9640,  9646,  9652,  9658,  9664,
    9670,  9676,  9682,  9688,  9694,  9700,  9706,  9712,  9718,  9724,
    9732,  9753,  9760,  9766,  9773,  9780,  9787,  9794,  9800,  9806,
    9811,  9817,  9824,  9830,  9836,  9842,  9848,  9854,  9872,  9878,
    9884,  9891,  9898,  9913,  9919,  9925,  9931,  9937,  9944,  9950,
    9956,  9962,  9968,  9974,  9982,  9995, 10001, 10007, 10013, 10019,
   10027, 10033, 10045, 10051, 10057, 10065, 10075, 10081, 10097, 10103,
   10110, 10117, 10124, 10131, 10138, 10142, 10162, 10161, 10234, 10274,
   10276, 10281, 10282, 10286, 10287, 10291, 10292, 10296, 10303, 10311,
   10337, 10343, 10349, 10355, 10361, 10367, 10376, 10383, 10385, 10382,
   10392, 10403, 10409, 10415, 10421, 10427, 10433, 10439, 10445, 10451,
   10458, 10457, 10477, 10476, 10491, 10502, 10510, 10526, 10527, 10532,
   10537, 10540, 10543, 10542, 10559, 10561, 10567, 10566, 10583, 10585,
   10587, 10589, 10591, 10593, 10595, 10597, 10599, 10601, 10603, 10608,
   10609, 10613, 10620, 10628, 10629, 10633, 10640, 10648, 10649, 10653,
   10654, 10658, 10666, 10677, 10678, 10687, 10698, 10699, 10705, 10706,
   10726, 10728, 10732, 10730, 10747, 10745, 10763, 10761, 10768, 10777,
   10775, 10793, 10792, 10802, 10813, 10811, 10830, 10829, 10840, 10851,
   10852, 10853, 10861, 10862, 10866, 10881, 10881, 10896, 10942, 11015,
   11026, 11031, 11023, 11050, 11070, 11079, 11070, 11088, 11087, 11110,
   11128, 11110, 11135, 11139, 11165, 11166, 11171, 11174, 11175, 11176,
   11180, 11181, 11186, 11185, 11191, 11190, 11198, 11199, 11202, 11204,
   11204, 11208, 11208, 11213, 11214, 11218, 11220, 11225, 11226, 11230,
   11241, 11254, 11255, 11256, 11257, 11258, 11259, 11260, 11261, 11262,
   11263, 11264, 11265, 11269, 11270, 11271, 11272, 11273, 11274, 11275,
   11276, 11277, 11281, 11282, 11283, 11284, 11287, 11289, 11290, 11294,
   11295, 11303, 11305, 11309, 11311, 11310, 11324, 11327, 11326, 11341,
   11347, 11362, 11364, 11368, 11370, 11375, 11376, 11396, 11427, 11431,
   11432, 11436, 11449, 11451, 11456, 11455, 11490, 11492, 11497, 11498,
   11499, 11504, 11510, 11514, 11515, 11519, 11526, 11533, 11540, 11550,
   11577, 11581, 11587, 11593, 11603, 11607, 11617, 11618, 11619, 11620,
   11621, 11622, 11626, 11627, 11628, 11629, 11630, 11634, 11635, 11636,
   11637, 11638, 11642, 11643, 11644, 11645, 11649, 11654, 11655, 11658,
   11661, 11660, 11694, 11695, 11699, 11707, 11720, 11720, 11730, 11731,
   11735, 11754, 11794, 11793, 11806, 11814, 11805, 11816, 11828, 11840,
   11839, 11857, 11856, 11867, 11868, 11867, 11884, 11891, 11912, 11933,
   11945, 11950, 11949, 11959, 11965, 11972, 11977, 11982, 11992, 11993,
   11997, 12008, 12021, 12022, 12026, 12037, 12038, 12042, 12043, 12046,
   12048, 12051, 12052, 12053, 12057, 12058, 12066, 12074, 12065, 12084,
   12091, 12083, 12101, 12113, 12114, 12127, 12131, 12132, 12148, 12149,
   12153, 12162, 12163, 12164, 12166, 12165, 12176, 12177, 12181, 12182,
   12184, 12183, 12187, 12186, 12192, 12193, 12197, 12198, 12202, 12212,
   12213, 12217, 12218, 12223, 12222, 12236, 12237, 12241, 12246, 12254,
   12255, 12263, 12265, 12265, 12273, 12281, 12272, 12303, 12304, 12308,
   12316, 12317, 12321, 12331, 12332, 12339, 12338, 12354, 12353, 12367,
   12366, 12378, 12377, 12391, 12392, 12396, 12409, 12425, 12426, 12430,
   12431, 12435, 12436, 12437, 12442, 12441, 12463, 12465, 12468, 12470,
   12473, 12474, 12477, 12481, 12485, 12489, 12493, 12497, 12501, 12505,
   12509, 12517, 12520, 12530, 12529, 12544, 12551, 12559, 12567, 12575,
   12583, 12591, 12598, 12600, 12602, 12611, 12615, 12620, 12619, 12625,
   12624, 12629, 12638, 12645, 12650, 12652, 12654, 12656, 12658, 12666,
   12677, 12685, 12687, 12695, 12702, 12709, 12719, 12726, 12732, 12741,
   12749, 12753, 12757, 12764, 12771, 12777, 12784, 12791, 12796, 12801,
   12809, 12811, 12813, 12818, 12819, 12822, 12824, 12828, 12829, 12833,
   12834, 12838, 12839, 12843, 12844, 12848, 12849, 12852, 12854, 12861,
   12872, 12880, 12879, 12895, 12894, 12901, 12902, 12903, 12904, 12905,
   12909, 12910, 12915, 12919, 12925, 12931, 12953, 12954, 12955, 12970,
   12969, 12982, 12991, 12981, 12993, 12997, 12998, 13010, 13009, 13031,
   13032, 13037, 13039, 13041, 13043, 13045, 13047, 13049, 13051, 13053,
   13055, 13057, 13059, 13061, 13066, 13067, 13072, 13071, 13081, 13082,
   13086, 13086, 13088, 13089, 13093, 13094, 13099, 13098, 13109, 13113,
   13117, 13129, 13139, 13140, 13141, 13147, 13159, 13171, 13181, 13191,
   13158, 13199, 13200, 13204, 13205, 13209, 13210, 13222, 13226, 13227,
   13228, 13231, 13233, 13237, 13238, 13242, 13247, 13254, 13259, 13266,
   13268, 13272, 13273, 13277, 13282, 13290, 13291, 13294, 13296, 13304,
   13306, 13310, 13311, 13312, 13316, 13318, 13323, 13324, 13333, 13334,
   13338, 13339, 13343, 13363, 13387, 13399, 13410, 13429, 13437, 13449,
   13464, 13485, 13486, 13487, 13496, 13497, 13498, 13499, 13514, 13520,
   13526, 13532, 13538, 13569, 13602, 13612, 13622, 13628, 13637, 13649,
   13655, 13661, 13677, 13678, 13682, 13691, 13707, 13711, 13762, 13766,
   13784, 13788, 13868, 13893, 13924, 13925, 13941, 13951, 13955, 13961,
   13967, 13977, 13983, 13992, 14002, 14003, 14033, 14046, 14062, 14078,
   14095, 14096, 14107, 14108, 14119, 14120, 14121, 14125, 14152, 14185,
   14200, 14201, 14202, 14203, 14204, 14205, 14206, 14207, 14208, 14209,
   14210, 14211, 14212, 14213, 14214, 14215, 14216, 14217, 14218, 14219,
   14220, 14221, 14222, 14223, 14224, 14225, 14226, 14227, 14228, 14229,
   14230, 14231, 14232, 14233, 14234, 14235, 14236, 14237, 14238, 14239,
   14240, 14241, 14242, 14243, 14244, 14245, 14246, 14247, 14248, 14249,
   14259, 14260, 14261, 14262, 14263, 14264, 14265, 14266, 14267, 14268,
   14269, 14270, 14271, 14272, 14273, 14274, 14275, 14276, 14277, 14278,
   14279, 14280, 14281, 14282, 14283, 14284, 14285, 14286, 14287, 14288,
   14289, 14290, 14291, 14292, 14293, 14294, 14295, 14296, 14297, 14298,
   14299, 14300, 14301, 14302, 14303, 14308, 14309, 14310, 14311, 14312,
   14313, 14314, 14315, 14316, 14317, 14318, 14319, 14320, 14321, 14322,
   14323, 14324, 14325, 14326, 14327, 14328, 14329, 14330, 14331, 14332,
   14333, 14334, 14335, 14336, 14337, 14338, 14339, 14340, 14341, 14342,
   14343, 14344, 14345, 14346, 14347, 14348, 14349, 14350, 14351, 14352,
   14353, 14354, 14355, 14356, 14357, 14358, 14359, 14360, 14361, 14362,
   14363, 14364, 14365, 14366, 14367, 14368, 14369, 14370, 14371, 14372,
   14373, 14374, 14375, 14376, 14377, 14378, 14379, 14380, 14381, 14382,
   14383, 14384, 14385, 14386, 14387, 14388, 14389, 14390, 14391, 14392,
   14393, 14394, 14395, 14396, 14397, 14398, 14399, 14400, 14401, 14402,
   14403, 14404, 14405, 14406, 14407, 14408, 14409, 14410, 14411, 14412,
   14413, 14414, 14415, 14416, 14417, 14418, 14419, 14420, 14421, 14422,
   14423, 14424, 14425, 14426, 14427, 14428, 14429, 14430, 14431, 14432,
   14433, 14434, 14435, 14436, 14437, 14438, 14439, 14440, 14441, 14442,
   14443, 14444, 14445, 14446, 14447, 14448, 14449, 14450, 14451, 14452,
   14453, 14454, 14455, 14456, 14457, 14458, 14459, 14460, 14461, 14462,
   14463, 14464, 14465, 14466, 14467, 14468, 14469, 14470, 14471, 14472,
   14473, 14474, 14475, 14476, 14477, 14478, 14479, 14480, 14481, 14482,
   14483, 14484, 14485, 14486, 14487, 14488, 14489, 14490, 14491, 14492,
   14493, 14494, 14495, 14496, 14497, 14498, 14499, 14500, 14501, 14502,
   14503, 14504, 14505, 14506, 14507, 14508, 14509, 14510, 14511, 14512,
   14513, 14514, 14515, 14516, 14517, 14518, 14519, 14520, 14521, 14522,
   14523, 14524, 14525, 14526, 14527, 14528, 14529, 14530, 14531, 14532,
   14533, 14534, 14535, 14536, 14537, 14538, 14539, 14540, 14541, 14542,
   14543, 14544, 14545, 14546, 14547, 14548, 14549, 14550, 14551, 14552,
   14553, 14554, 14555, 14556, 14557, 14558, 14559, 14560, 14561, 14562,
   14563, 14575, 14574, 14594, 14593, 14600, 14599, 14609, 14608, 14619,
   14618, 14624, 14632, 14634, 14639, 14639, 14648, 14647, 14661, 14660,
   14665, 14669, 14670, 14671, 14675, 14676, 14677, 14678, 14682, 14683,
   14684, 14685, 14690, 14716, 14715, 14815, 14826, 14839, 14855, 14868,
   14890, 14925, 14967, 14995, 15041, 15055, 15056, 15057, 15058, 15062,
   15080, 15098, 15099, 15103, 15104, 15105, 15106, 15110, 15111, 15129,
   15143, 15144, 15145, 15151, 15157, 15169, 15168, 15184, 15185, 15189,
   15190, 15194, 15207, 15208, 15209, 15214, 15219, 15218, 15238, 15254,
   15271, 15270, 15309, 15310, 15314, 15315, 15319, 15320, 15321, 15322,
   15324, 15323, 15337, 15338, 15339, 15340, 15341, 15347, 15347, 15352,
   15357, 15367, 15377, 15381, 15390, 15390, 15395, 15401, 15412, 15423,
   15431, 15433, 15437, 15444, 15451, 15453, 15457, 15458, 15463, 15462,
   15466, 15465, 15469, 15468, 15472, 15471, 15474, 15475, 15476, 15477,
   15478, 15479, 15480, 15481, 15482, 15483, 15484, 15485, 15486, 15487,
   15488, 15489, 15490, 15491, 15492, 15493, 15494, 15495, 15496, 15497,
   15498, 15499, 15503, 15504, 15508, 15509, 15513, 15523, 15533, 15546,
   15561, 15574, 15587, 15599, 15604, 15612, 15617, 15625, 15643, 15663,
   15675, 15688, 15697, 15701, 15705, 15706, 15710, 15737, 15739, 15743,
   15747, 15751, 15758, 15759, 15763, 15764, 15768, 15769, 15773, 15774,
   15780, 15786, 15792, 15802, 15801, 15811, 15812, 15817, 15818, 15819,
   15824, 15825, 15826, 15830, 15831, 15835, 15847, 15856, 15866, 15875,
   15889, 15890, 15895, 15894, 15910, 15911, 15912, 15916, 15917, 15921,
   15921, 15945, 15946, 15950, 15951, 15952, 15956, 15960, 15967, 15970,
   15968, 15984, 15991, 16012, 16037, 16039, 16043, 16044, 16048, 16049,
   16057, 16058, 16059, 16060, 16066, 16072, 16082, 16084, 16086, 16091,
   16092, 16093, 16094, 16095, 16099, 16100, 16101, 16102, 16103, 16104,
   16114, 16115, 16120, 16133, 16146, 16148, 16150, 16155, 16160, 16162,
   16164, 16170, 16171, 16173, 16179, 16178, 16196, 16197, 16201, 16206,
   16214, 16214, 16240, 16239, 16256, 16260, 16265, 16270, 16269, 16281,
   16282, 16284, 16286, 16304, 16310, 16315, 16297, 16378, 16396, 16421,
   16453, 16458, 16466, 16489, 16417, 16555, 16575, 16588, 16598, 16554,
   16619, 16623, 16627, 16631, 16635, 16639, 16646, 16653, 16660, 16670,
   16671, 16675, 16676, 16677, 16681, 16682, 16687, 16689, 16688, 16694,
   16695, 16699, 16709
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC",
  "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM",
  "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND",
  "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM",
  "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM",
  "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DBXP_SELECT_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFAULT_AUTH_SYM", "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM",
  "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS",
  "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM",
  "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM",
  "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM",
  "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT",
  "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM",
  "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM",
  "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM", "MASTER_BIND_SYM",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM",
  "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR",
  "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "create", "$@5", "$@6", "$@7",
  "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "server_def",
  "server_options_list", "server_option", "event_tail", "$@14",
  "ev_schedule_time", "$@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@16", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@17", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@18", "$@19", "$@20", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "$@21", "sp_proc_stmt", "sp_proc_stmt_if", "$@22",
  "sp_proc_stmt_statement", "$@23", "sp_proc_stmt_return", "$@24",
  "sp_proc_stmt_unlabeled", "$@25", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@26", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@27", "$@28", "$@29", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@30", "$@31", "searched_case_stmt", "$@32",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@33", "$@34", "searched_when_clause", "$@35",
  "$@36", "else_clause_opt", "sp_labeled_control", "$@37", "sp_opt_label",
  "sp_labeled_block", "$@38", "sp_unlabeled_block", "$@39",
  "sp_block_content", "$@40", "sp_unlabeled_control", "$@41", "$@42",
  "$@43", "$@44", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@45", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "$@46",
  "create3", "$@47", "$@48", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "$@49", "have_partitioning", "partition_entry", "$@50",
  "partition", "part_type_def", "$@51", "opt_linear", "opt_key_algo",
  "part_field_list", "part_field_item_list", "part_field_item",
  "part_column_list", "part_func", "sub_part_func", "opt_num_parts",
  "opt_sub_part", "$@52", "$@53", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "$@54", "part_name",
  "opt_part_values", "$@55", "$@56", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "$@57", "$@58",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@59", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@60", "$@61", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@62", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@63", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@66", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@67", "$@68", "$@69", "$@70", "$@71", "$@72",
  "$@73", "alter_user_list", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@74", "$@75", "$@76", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@77",
  "add_part_extra", "reorg_partition_rule", "$@78", "reorg_parts_rule",
  "$@79", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "$@80", "$@81", "$@82",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@83", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_connection_opts",
  "slave_user_name_opt", "slave_user_pass_opt", "slave_plugin_auth_opt",
  "slave_plugin_dir_opt", "opt_slave_thread_option_list",
  "slave_thread_option_list", "slave_thread_option", "slave_until",
  "slave_until_opts", "checksum", "$@84", "opt_checksum_type", "repair",
  "$@85", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@86", "binlog_base64_event", "check", "$@87",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@88", "opt_no_write_to_binlog", "rename", "$@89", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@90",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@91",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@92", "cache_keys_spec", "$@93",
  "cache_key_list_or_empty", "opt_ignore_leaves", "dbxp_select", "select",
  "select_init", "select_paren", "select_paren_derived", "select_init2",
  "$@94", "select_part2", "$@95", "$@96", "select_into",
  "DBXP_select_options", "DBXP_select_from", "DBXP_select_item_list",
  "DBXP_where_clause", "select_from", "select_options",
  "select_option_list", "select_option", "select_lock_type",
  "select_item_list", "select_item", "remember_name", "remember_end",
  "select_alias", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "simple_expr", "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@97", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@98", "$@99", "$@100", "variable", "$@101", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause", "$@102",
  "gorder_list", "in_sum_expr", "$@103", "cast_type", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@104", "$@105", "$@106", "$@107",
  "$@108", "$@109", "$@110", "normal_join", "opt_use_partition",
  "use_partition", "table_factor", "$@111", "select_derived_union",
  "$@112", "$@113", "select_init2_derived", "select_part2_derived",
  "$@114", "$@115", "select_derived", "$@116", "select_derived2", "$@117",
  "$@118", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@119",
  "$@120", "index_hints_list", "opt_index_hints_list", "$@121",
  "opt_key_definition", "$@122", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@123", "having_clause", "$@124", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@125", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "$@126",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "$@127", "select_var_list", "select_var_ident",
  "into", "$@128", "into_destination", "$@129", "$@130", "do", "$@131",
  "drop", "$@132", "$@133", "$@134", "$@135", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "$@136", "$@137",
  "replace", "$@138", "$@139", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@140", "fields",
  "insert_values", "$@141", "$@142", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@143",
  "opt_values", "values", "expr_or_default", "opt_insert_update", "$@144",
  "update", "$@145", "$@146", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@147", "single_multi", "$@148", "$@149", "$@150", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@151", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@152", "show_param",
  "$@153", "$@154", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@155", "$@156", "explanable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@157", "flush_options", "$@158", "$@159", "opt_flush_lock",
  "$@160", "flush_options_list", "flush_option", "opt_table_list", "reset",
  "$@161", "reset_options", "reset_option", "$@162", "slave_reset_options",
  "purge", "$@163", "purge_options", "purge_option", "kill", "kill_option",
  "use", "load", "$@164", "$@165", "$@166", "$@167", "data_or_xml",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_xml_rows_identified_by", "opt_ignore_lines",
  "lines_or_rows", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "load_data_set_list",
  "load_data_set_elem", "text_literal", "text_string", "param_marker",
  "signed_literal", "literal", "NUM_literal", "temporal_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys_nonewline", "TEXT_STRING_sys", "TEXT_STRING_literal",
  "TEXT_STRING_filesystem", "ident", "label_ident", "ident_or_text",
  "user", "keyword", "keyword_sp", "set", "$@168",
  "start_option_value_list", "$@169", "$@170", "$@171",
  "start_option_value_list_following_option_type", "$@172",
  "option_value_list_continued", "option_value_list", "$@173", "$@174",
  "option_value", "$@175", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "$@176", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@177",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@178", "handler", "$@179", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@180",
  "handler_rkey_mode", "revoke", "$@181", "revoke_command", "grant",
  "$@182", "grant_command", "opt_table", "grant_privileges",
  "opt_privileges", "object_privilege_list", "object_privilege", "$@183",
  "$@184", "$@185", "$@186", "opt_and", "require_list",
  "require_list_element", "grant_ident", "user_list", "grant_list",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@187", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@188",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@189",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@190", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@191",
  "view_list_opt", "view_list", "view_select", "$@192", "view_select_aux",
  "$@193", "create_view_select_paren", "create_view_select", "$@194",
  "view_check_option", "trigger_tail", "$@195", "$@196", "$@197",
  "udf_tail", "sf_tail", "$@198", "$@199", "$@200", "$@201", "$@202",
  "sp_tail", "$@203", "$@204", "$@205", "$@206", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@207", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   641,   642,   643,   642,   642,   644,   644,   645,   645,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   647,   648,   648,   649,   650,   650,   652,
     651,   653,   653,   654,   654,   655,   657,   656,   659,   658,
     660,   660,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   662,   662,   662,   663,   664,   664,   664,
     664,   666,   665,   667,   668,   665,   669,   670,   665,   671,
     672,   665,   673,   665,   674,   665,   665,   665,   665,   665,
     675,   676,   676,   677,   677,   677,   677,   677,   677,   677,
     679,   678,   681,   680,   680,   682,   682,   682,   682,   683,
     683,   684,   684,   685,   685,   686,   686,   687,   687,   689,
     688,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   691,   692,   692,   693,   693,   694,
     694,   695,   695,   695,   695,   695,   695,   695,   696,   696,
     696,   697,   697,   699,   698,   700,   700,   701,   701,   702,
     702,   703,   703,   704,   704,   705,   706,   707,   707,   708,
     708,   709,   710,   710,   710,   710,   711,   711,   712,   712,
     713,   713,   715,   714,   714,   716,   714,   717,   714,   718,
     718,   719,   719,   720,   721,   721,   722,   723,   723,   724,
     724,   724,   724,   724,   725,   726,   726,   727,   727,   728,
     728,   729,   729,   730,   730,   730,   731,   731,   731,   731,
     731,   731,   731,   731,   731,   731,   731,   731,   732,   733,
     734,   734,   735,   735,   736,   736,   737,   738,   738,   739,
     739,   740,   741,   741,   742,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   744,   744,
     745,   746,   745,   747,   747,   747,   747,   747,   747,   747,
     747,   747,   747,   747,   747,   747,   749,   748,   751,   750,
     753,   752,   755,   754,   756,   757,   758,   760,   759,   761,
     762,   762,   762,   763,   763,   765,   766,   767,   764,   768,
     768,   768,   769,   769,   771,   772,   770,   774,   773,   775,
     775,   776,   776,   778,   779,   777,   781,   782,   780,   783,
     783,   785,   784,   786,   786,   788,   787,   790,   789,   792,
     791,   793,   794,   795,   793,   796,   797,   793,   798,   798,
     799,   799,   799,   800,   801,   802,   803,   803,   804,   804,
     805,   806,   807,   807,   809,   808,   810,   810,   810,   811,
     811,   811,   812,   812,   813,   813,   813,   814,   814,   814,
     814,   814,   814,   814,   814,   815,   815,   816,   816,   816,
     817,   817,   817,   817,   817,   818,   818,   819,   819,   819,
     820,   820,   820,   820,   820,   820,   820,   821,   821,   822,
     822,   822,   823,   823,   823,   824,   825,   826,   827,   828,
     829,   829,   829,   830,   831,   832,   833,   834,   835,   836,
     837,   838,   839,   839,   840,   840,   841,   841,   841,   841,
     842,   843,   842,   844,   845,   844,   846,   844,   847,   848,
     848,   850,   849,   851,   853,   852,   854,   855,   856,   855,
     855,   855,   855,   855,   857,   857,   858,   858,   859,   859,
     860,   860,   861,   862,   863,   864,   865,   865,   866,   867,
     866,   868,   866,   869,   869,   870,   871,   872,   872,   873,
     873,   874,   874,   876,   875,   877,   878,   879,   878,   880,
     878,   881,   881,   882,   882,   883,   883,   885,   886,   884,
     887,   887,   888,   888,   889,   889,   890,   890,   892,   891,
     893,   894,   894,   895,   895,   896,   896,   896,   896,   896,
     896,   896,   896,   898,   899,   897,   900,   900,   901,   901,
     902,   902,   903,   903,   904,   904,   905,   905,   906,   907,
     907,   908,   908,   909,   909,   910,   910,   910,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   912,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   913,
     914,   915,   916,   917,   917,   917,   917,   917,   917,   918,
     918,   918,   919,   919,   920,   920,   920,   920,   921,   922,
     922,   923,   923,   924,   924,   925,   925,   925,   925,   925,
     925,   926,   926,   927,   928,   928,   929,   931,   930,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   933,   932,   934,   932,   932,   932,
     935,   935,   935,   935,   935,   935,   935,   935,   936,   937,
     937,   938,   938,   939,   939,   939,   939,   939,   940,   940,
     940,   940,   940,   941,   941,   941,   942,   942,   942,   943,
     944,   944,   945,   945,   945,   946,   946,   947,   947,   948,
     948,   948,   949,   949,   949,   949,   950,   950,   951,   951,
     952,   952,   953,   953,   954,   954,   954,   954,   954,   954,
     954,   954,   954,   954,   954,   954,   954,   954,   954,   954,
     954,   955,   956,   957,   957,   958,   958,   959,   959,   960,
     960,   961,   961,   962,   962,   963,   963,   964,   965,   965,
     966,   966,   967,   967,   968,   968,   968,   969,   969,   969,
     970,   970,   970,   970,   970,   970,   970,   971,   971,   973,
     972,   974,   974,   975,   976,   976,   976,   976,   977,   978,
     979,   979,   980,   981,   981,   982,   982,   983,   983,   984,
     985,   985,   986,   986,   987,   987,   987,   987,   988,   988,
     988,   988,   988,   989,   989,   989,   989,   989,   990,   991,
     991,   992,   992,   993,   993,   994,   994,   994,   995,   995,
     996,   997,   998,   999,   999,  1000,  1000,  1001,  1001,  1002,
    1002,  1003,  1003,  1004,  1004,  1005,  1005,  1006,  1006,  1007,
    1007,  1008,  1008,  1009,  1010,  1010,  1011,  1011,  1011,  1012,
    1012,  1013,  1013,  1014,  1014,  1015,  1015,  1016,  1016,  1018,
    1017,  1019,  1017,  1017,  1020,  1017,  1021,  1017,  1022,  1017,
    1023,  1017,  1024,  1017,  1017,  1017,  1017,  1017,  1017,  1017,
    1025,  1025,  1026,  1026,  1026,  1026,  1027,  1027,  1028,  1028,
    1029,  1029,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1031,  1030,  1030,  1032,  1030,  1033,  1030,  1030,
    1030,  1030,  1030,  1034,  1035,  1035,  1037,  1036,  1038,  1038,
    1038,  1040,  1039,  1041,  1042,  1041,  1043,  1043,  1044,  1045,
    1045,  1046,  1047,  1047,  1047,  1048,  1047,  1049,  1050,  1047,
    1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,
    1047,  1047,  1047,  1047,  1047,  1051,  1051,  1051,  1051,  1051,
    1052,  1052,  1053,  1053,  1054,  1054,  1055,  1055,  1056,  1056,
    1056,  1057,  1057,  1057,  1058,  1058,  1058,  1058,  1060,  1059,
    1059,  1061,  1062,  1062,  1063,  1063,  1064,  1064,  1064,  1065,
    1066,  1066,  1067,  1067,  1068,  1068,  1069,  1069,  1070,  1070,
    1071,  1071,  1072,  1072,  1073,  1073,  1074,  1074,  1074,  1074,
    1074,  1076,  1075,  1077,  1077,  1077,  1079,  1078,  1080,  1080,
    1081,  1081,  1082,  1082,  1082,  1084,  1083,  1085,  1087,  1086,
    1088,  1088,  1089,  1089,  1090,  1090,  1090,  1090,  1090,  1090,
    1092,  1091,  1093,  1093,  1093,  1095,  1094,  1094,  1096,  1096,
    1097,  1097,  1098,  1100,  1099,  1101,  1101,  1102,  1102,  1103,
    1104,  1105,  1105,  1107,  1106,  1108,  1108,  1109,  1109,  1110,
    1111,  1113,  1112,  1115,  1114,  1116,  1116,  1117,  1117,  1118,
    1119,  1120,  1120,  1121,  1121,  1122,  1122,  1124,  1123,  1126,
    1127,  1125,  1128,  1128,  1128,  1128,  1128,  1129,  1129,  1130,
    1131,  1131,  1131,  1131,  1132,  1132,  1133,  1133,  1134,  1134,
    1135,  1135,  1136,  1136,  1136,  1137,  1137,  1137,  1138,  1138,
    1138,  1139,  1139,  1140,  1141,  1142,  1142,  1142,  1142,  1142,
    1143,  1143,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1145,  1145,  1145,  1145,  1145,  1145,  1146,
    1146,  1146,  1146,  1146,  1146,  1146,  1146,  1146,  1146,  1146,
    1146,  1146,  1146,  1147,  1147,  1147,  1147,  1147,  1147,  1147,
    1147,  1147,  1147,  1147,  1147,  1147,  1147,  1147,  1148,  1148,
    1149,  1149,  1150,  1150,  1151,  1151,  1152,  1152,  1152,  1152,
    1152,  1152,  1153,  1153,  1154,  1154,  1154,  1154,  1154,  1154,
    1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,
    1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,
    1154,  1154,  1154,  1154,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,
    1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,
    1156,  1156,  1156,  1157,  1157,  1157,  1157,  1157,  1157,  1157,
    1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,
    1157,  1157,  1157,  1157,  1157,  1157,  1157,  1157,  1158,  1158,
    1158,  1158,  1158,  1158,  1158,  1158,  1160,  1159,  1159,  1161,
    1161,  1162,  1162,  1163,  1163,  1164,  1164,  1165,  1165,  1166,
    1167,  1167,  1167,  1167,  1167,  1167,  1167,  1168,  1169,  1167,
    1167,  1167,  1167,  1167,  1167,  1167,  1167,  1167,  1167,  1167,
    1170,  1167,  1172,  1171,  1173,  1173,  1173,  1174,  1174,  1175,
    1175,  1176,  1177,  1176,  1178,  1178,  1180,  1179,  1181,  1181,
    1181,  1181,  1181,  1181,  1181,  1181,  1181,  1181,  1181,  1182,
    1182,  1183,  1183,  1184,  1184,  1185,  1185,  1186,  1186,  1187,
    1187,  1188,  1188,  1189,  1189,  1190,  1191,  1191,  1192,  1192,
    1193,  1193,  1194,  1193,  1195,  1193,  1196,  1193,  1193,  1197,
    1193,  1198,  1193,  1193,  1199,  1193,  1200,  1193,  1193,  1201,
    1201,  1201,  1202,  1202,  1203,  1205,  1204,  1204,  1204,  1206,
    1207,  1208,  1206,  1209,  1211,  1212,  1210,  1214,  1213,  1216,
    1217,  1215,  1218,  1219,  1220,  1220,  1221,  1221,  1221,  1221,
    1222,  1222,  1224,  1223,  1225,  1223,  1226,  1226,  1227,  1228,
    1227,  1230,  1229,  1231,  1231,  1232,  1232,  1233,  1233,  1234,
    1234,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,
    1235,  1235,  1235,  1236,  1236,  1236,  1236,  1236,  1236,  1236,
    1236,  1236,  1237,  1237,  1237,  1237,  1238,  1238,  1238,  1239,
    1239,  1240,  1240,  1241,  1242,  1241,  1243,  1244,  1243,  1245,
    1245,  1246,  1246,  1247,  1247,  1248,  1248,  1248,  1249,  1250,
    1250,  1251,  1252,  1252,  1254,  1253,  1255,  1255,  1256,  1256,
    1256,  1257,  1257,  1258,  1258,  1259,  1260,  1260,  1260,  1261,
    1261,  1261,  1261,  1261,  1262,  1262,  1263,  1263,  1263,  1263,
    1263,  1263,  1264,  1264,  1264,  1264,  1264,  1265,  1265,  1265,
    1265,  1265,  1266,  1266,  1266,  1266,  1267,  1268,  1268,  1269,
    1270,  1269,  1271,  1271,  1271,  1272,  1274,  1273,  1275,  1275,
    1276,  1276,  1278,  1277,  1280,  1281,  1279,  1279,  1279,  1283,
    1282,  1285,  1284,  1286,  1287,  1284,  1284,  1284,  1284,  1284,
    1284,  1288,  1284,  1284,  1284,  1284,  1284,  1284,  1289,  1289,
    1290,  1291,  1292,  1292,  1293,  1294,  1294,  1295,  1295,  1296,
    1296,  1297,  1297,  1297,  1298,  1298,  1300,  1301,  1299,  1303,
    1304,  1302,  1305,  1305,  1305,  1305,  1306,  1306,  1307,  1307,
    1308,  1309,  1309,  1309,  1310,  1309,  1311,  1311,  1312,  1312,
    1313,  1312,  1314,  1312,  1315,  1315,  1316,  1316,  1317,  1318,
    1318,  1319,  1319,  1321,  1320,  1322,  1322,  1323,  1323,  1324,
    1324,  1325,  1326,  1325,  1328,  1329,  1327,  1330,  1330,  1331,
    1332,  1332,  1333,  1334,  1334,  1336,  1335,  1338,  1337,  1339,
    1337,  1340,  1337,  1341,  1341,  1342,  1342,  1343,  1343,  1344,
    1344,  1345,  1345,  1345,  1347,  1346,  1348,  1348,  1349,  1349,
    1350,  1350,  1351,  1351,  1351,  1351,  1351,  1351,  1351,  1351,
    1351,  1352,  1352,  1354,  1353,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1356,  1355,  1357,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1358,  1358,  1358,  1359,  1359,  1360,  1360,  1361,  1361,  1362,
    1362,  1363,  1363,  1364,  1364,  1365,  1365,  1366,  1366,  1366,
    1367,  1368,  1367,  1369,  1367,  1370,  1370,  1370,  1370,  1370,
    1371,  1371,  1372,  1372,  1372,  1372,  1373,  1373,  1373,  1375,
    1374,  1377,  1378,  1376,  1376,  1379,  1379,  1380,  1379,  1381,
    1381,  1382,  1382,  1382,  1382,  1382,  1382,  1382,  1382,  1382,
    1382,  1382,  1382,  1382,  1383,  1383,  1385,  1384,  1386,  1386,
    1388,  1387,  1387,  1387,  1389,  1389,  1391,  1390,  1392,  1393,
    1393,  1394,  1395,  1395,  1395,  1396,  1398,  1399,  1400,  1401,
    1397,  1402,  1402,  1403,  1403,  1404,  1404,  1404,  1405,  1405,
    1405,  1406,  1406,  1407,  1407,  1408,  1408,  1408,  1408,  1409,
    1409,  1410,  1410,  1411,  1411,  1412,  1412,  1413,  1413,  1414,
    1414,  1415,  1415,  1415,  1416,  1416,  1417,  1417,  1418,  1418,
    1419,  1419,  1420,  1421,  1421,  1421,  1421,  1422,  1422,  1422,
    1423,  1424,  1424,  1424,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1426,  1426,  1426,  1426,  1426,  1427,
    1427,  1427,  1428,  1428,  1429,  1429,  1430,  1431,  1431,  1432,
    1432,  1433,  1433,  1433,  1434,  1434,  1434,  1434,  1435,  1435,
    1435,  1436,  1436,  1437,  1438,  1438,  1439,  1440,  1441,  1442,
    1443,  1443,  1444,  1444,  1445,  1445,  1445,  1446,  1446,  1446,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1450,  1449,  1452,  1451,  1453,  1451,  1454,  1451,  1456,
    1455,  1455,  1457,  1457,  1459,  1458,  1460,  1458,  1462,  1461,
    1461,  1463,  1463,  1463,  1464,  1464,  1464,  1464,  1465,  1465,
    1465,  1465,  1466,  1468,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1469,  1469,  1469,  1470,  1470,  1470,  1470,  1471,
    1472,  1473,  1473,  1474,  1474,  1474,  1474,  1475,  1475,  1475,
    1476,  1476,  1476,  1476,  1476,  1478,  1477,  1479,  1479,  1480,
    1480,  1481,  1482,  1482,  1482,  1482,  1484,  1483,  1485,  1485,
    1486,  1485,  1487,  1487,  1488,  1488,  1489,  1489,  1489,  1489,
    1490,  1489,  1491,  1491,  1491,  1491,  1491,  1493,  1492,  1494,
    1494,  1494,  1494,  1494,  1496,  1495,  1497,  1497,  1497,  1497,
    1498,  1498,  1499,  1499,  1500,  1500,  1501,  1501,  1503,  1502,
    1504,  1502,  1505,  1502,  1506,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1507,  1507,  1508,  1508,  1509,  1509,  1509,  1510,
    1510,  1510,  1510,  1511,  1511,  1512,  1512,  1513,  1513,  1513,
    1513,  1513,  1514,  1514,  1515,  1515,  1516,  1517,  1517,  1517,
    1517,  1517,  1518,  1518,  1519,  1519,  1520,  1520,  1521,  1521,
    1521,  1521,  1521,  1523,  1522,  1524,  1524,  1525,  1525,  1525,
    1526,  1526,  1526,  1527,  1527,  1528,  1529,  1529,  1530,  1531,
    1532,  1532,  1534,  1533,  1535,  1535,  1535,  1536,  1536,  1538,
    1537,  1539,  1539,  1540,  1540,  1540,  1541,  1541,  1542,  1543,
    1542,  1544,  1545,  1546,  1547,  1547,  1548,  1548,  1549,  1549,
    1549,  1549,  1549,  1549,  1549,  1549,  1550,  1550,  1550,  1551,
    1551,  1551,  1551,  1551,  1552,  1552,  1552,  1552,  1552,  1552,
    1553,  1553,  1554,  1555,  1556,  1556,  1556,  1557,  1558,  1558,
    1558,  1559,  1559,  1559,  1561,  1560,  1562,  1562,  1563,  1563,
    1565,  1564,  1567,  1566,  1566,  1568,  1568,  1570,  1569,  1571,
    1571,  1571,  1571,  1573,  1574,  1575,  1572,  1576,  1576,  1578,
    1579,  1580,  1581,  1582,  1577,  1584,  1585,  1586,  1587,  1583,
    1588,  1588,  1588,  1588,  1588,  1588,  1589,  1589,  1589,  1590,
    1590,  1591,  1591,  1591,  1592,  1592,  1593,  1594,  1593,  1595,
    1595,  1596,  1597
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     3,     1,     0,     1,     3,     1,     3,     3,     3,
       3,     0,     7,     0,     0,    14,     0,     0,    14,     0,
       0,    14,     0,     6,     0,     3,     4,     4,     3,     2,
      10,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       0,    13,     0,     6,     2,     0,     1,     3,     1,     0,
       2,     0,     2,     0,     1,     3,     4,     0,     2,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     1,     0,     2,     0,
       2,     2,     2,     2,     2,     3,     3,     1,     1,     1,
       2,     3,     3,     0,     4,     0,     3,     0,     1,     3,
       1,     0,     1,     3,     1,     0,     3,     0,     1,     3,
       1,     4,     0,     1,     1,     1,     0,     3,     2,     3,
       0,     3,     0,     5,     5,     0,     7,     0,     6,     1,
       1,     1,     3,     1,     1,     1,     3,     0,     1,     1,
       1,     1,     2,     1,     3,     1,     1,     0,     1,     0,
       2,     3,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     4,
       0,     1,     1,     3,     1,     3,     3,     1,     2,     1,
       1,     1,     1,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       0,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     5,     0,     2,
       0,     3,     0,     2,     2,     2,     2,     0,     6,     2,
       0,     2,     1,     1,     3,     0,     0,     0,     7,     0,
       2,     2,     1,     1,     0,     0,     8,     0,     6,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     5,     0,     1,     0,     5,     0,     2,     0,
       5,     4,     0,     0,     8,     0,     0,     8,     1,     1,
       1,     1,     1,     2,     4,     5,     0,     4,     4,     4,
       3,     3,     2,     2,     0,     2,     1,     2,     3,     1,
       1,     1,     0,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       2,     3,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     4,     1,     1,     1,     1,     2,     3,     2,     4,
       5,     0,     5,     0,     0,     5,     0,     7,     1,     0,
       1,     0,     4,     0,     0,     3,     5,     6,     0,     4,
       2,     2,     2,     2,     0,     1,     0,     3,     0,     1,
       1,     3,     1,     4,     5,     5,     0,     2,     0,     0,
       7,     0,    10,     1,     3,     1,     1,     0,     2,     0,
       3,     1,     3,     0,     6,     1,     0,     0,     5,     0,
       4,     1,     1,     1,     3,     1,     3,     0,     0,     5,
       1,     3,     1,     1,     0,     3,     1,     3,     0,     4,
       1,     0,     1,     2,     1,     3,     4,     3,     3,     3,
       4,     4,     3,     0,     0,     6,     0,     1,     0,     1,
       1,     2,     1,     1,     0,     1,     1,     2,     1,     0,
       3,     0,     1,     1,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     0,     6,     1,
       1,     3,     4,     4,     2,     2,     2,     3,     3,     4,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     2,     2,     7,     8,     8,     8,     8,
       2,     0,     1,     4,     0,     1,     2,     0,     4,     3,
       3,     3,     1,     2,     1,     1,     3,     2,     3,     2,
       2,     1,     3,     3,     2,     3,     1,     2,     2,     2,
       1,     2,     1,     1,     1,     2,     3,     2,     3,     2,
       2,     3,     3,     3,     0,     6,     0,     6,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     5,
       0,     3,     0,     2,     3,     0,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     0,     1,     0,     1,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     3,
       2,     1,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     1,     1,     1,     1,
       1,     0,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     0,     1,     1,     2,     2,     1,     2,     2,
       0,     1,     1,     1,     3,     1,     3,     0,     1,     0,
       4,     1,     1,     1,     0,     1,     2,     1,     1,     2,
       1,     3,     3,     1,     1,     0,     2,     0,     1,     5,
       0,     3,     3,     1,     0,     2,     2,     2,     0,     3,
       3,     6,     6,     1,     1,     2,     2,     2,     1,     2,
       2,     1,     1,     0,     1,     1,     1,     1,     0,     1,
       1,     1,     0,     1,     2,     0,     1,     0,     1,     0,
       1,     1,     2,     1,     2,     1,     2,     2,     2,     3,
       2,     1,     1,     1,     1,     3,     1,     1,     1,     4,
       2,     1,     4,     0,     1,     0,     2,     1,     3,     0,
       6,     0,     5,     7,     0,     5,     0,     5,     0,     5,
       0,     4,     0,    10,     3,     4,     3,     3,     7,     4,
       3,     5,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       3,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     7,     3,     1,     1,     0,     5,     0,     3,
       2,     0,     5,     0,     0,     6,     1,     3,     1,     1,
       3,     2,     3,     2,     4,     0,     6,     0,     0,     8,
       4,     4,     3,     3,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       1,     0,     2,     1,     0,     1,     1,     1,     0,     6,
       3,     3,     0,     1,     1,     3,     3,     2,     2,     4,
       0,     3,     0,     3,     0,     3,     0,     3,     0,     1,
       1,     3,     1,     1,     0,     2,     1,     3,     3,     3,
       1,     0,     5,     0,     1,     1,     0,     6,     0,     1,
       1,     2,     1,     1,     1,     0,     5,     2,     0,     5,
       0,     1,     1,     2,     1,     1,     1,     1,     1,     2,
       0,     5,     0,     1,     1,     0,     4,     4,     3,     5,
       1,     3,     3,     0,     6,     1,     1,     1,     3,     2,
       3,     1,     1,     0,     6,     1,     1,     1,     3,     3,
       4,     0,     6,     0,     2,     0,     4,     0,     2,     4,
       1,     2,     4,     2,     3,     2,     3,     0,     3,     0,
       0,     6,     2,     1,     1,     2,     2,     0,     1,     3,
       0,     3,     1,     1,     0,     2,     8,     4,     0,     1,
       2,     1,     1,     1,     1,     0,     2,     4,     3,     1,
       1,     3,     4,     0,     0,     0,     2,     2,     1,     1,
       0,     2,     3,     3,     3,     2,     3,     4,     3,     4,
       3,     4,     1,     3,     4,     3,     3,     6,     1,     5,
       6,     5,     7,     6,     8,     5,     6,     4,     4,     5,
       3,     4,     1,     3,     3,     3,     3,     3,     3,     5,
       5,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     3,     2,     2,     2,     2,     3,
       3,     5,     6,     4,     4,     7,     2,     6,     5,     6,
       6,     4,     4,     5,     4,     6,     2,     4,     4,     4,
      10,     6,     8,     6,     4,     4,     6,     4,     4,     4,
       6,     4,     7,     7,     7,     6,     6,     6,     6,     3,
       4,     6,     8,     2,     2,     8,     8,     6,     6,     1,
       6,     6,     8,     8,     6,     8,     6,     2,     8,     8,
       2,     2,     2,     4,     4,     4,     4,     3,     8,     6,
       8,     4,     6,     4,     4,     4,     6,     8,     4,     3,
       6,     4,     6,     5,     8,     7,    10,     1,     6,     4,
       4,     4,     4,     4,     6,     4,     0,     5,     6,     2,
       3,     0,     4,     0,     3,     0,     1,     1,     3,     4,
       4,     5,     4,     4,     4,     5,     4,     0,     0,     7,
       4,     5,     4,     5,     4,     4,     4,     4,     4,     5,
       0,     8,     0,     3,     3,     1,     4,     0,     1,     0,
       2,     0,     0,     4,     4,     2,     0,     3,     2,     3,
       2,     1,     2,     1,     2,     1,     2,     2,     2,     0,
       1,     1,     3,     1,     3,     1,     3,     0,     1,     0,
       2,     4,     5,     1,     1,     1,     1,     4,     1,     3,
       3,     3,     0,     6,     0,     6,     0,     8,     4,     0,
       8,     0,    10,     6,     0,     8,     0,    10,     6,     1,
       2,     2,     0,     1,     5,     0,     5,     3,     5,     2,
       0,     0,     7,     1,     0,     0,     6,     0,     3,     0,
       0,     5,     0,     1,     0,     1,     0,     2,     3,     3,
       1,     1,     0,     7,     0,     7,     1,     2,     0,     0,
       2,     0,     2,     0,     1,     1,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     0,
       2,     0,     1,     0,     0,     3,     0,     0,     3,     2,
       0,     0,     4,     4,     2,     0,     1,     1,     3,     3,
       1,     2,     0,     1,     0,     4,     4,     2,     0,     1,
       1,     0,     1,     0,     1,     2,     1,     3,     3,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       0,     6,     0,     1,     3,     1,     0,     2,     3,     1,
       2,     1,     0,     3,     0,     0,     7,     2,     1,     0,
       3,     0,     7,     0,     0,     8,     4,     6,     4,     4,
       4,     0,     6,     4,     4,     4,     5,     4,     1,     3,
       1,     2,     1,     3,     1,     0,     2,     0,     1,     0,
       1,     1,     2,     3,     1,     1,     0,     0,     8,     0,
       0,     6,     0,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     3,     4,     0,     3,     3,     1,     2,     2,
       0,     3,     0,     5,     3,     1,     3,     1,     3,     1,
       1,     0,     1,     0,     4,     0,     1,     3,     1,     1,
       1,     0,     0,     6,     0,     0,    11,     3,     1,     3,
       3,     1,     3,     0,     1,     0,     4,     0,     7,     0,
       5,     0,     6,     1,     3,     2,     4,     0,     2,     0,
       2,     1,     1,     1,     0,     4,     0,     1,     0,     1,
       1,     3,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     0,     3,     0,     3,     2,     4,     4,     3,     4,
       4,     1,     3,     3,     6,     2,     2,     0,     6,     0,
       6,     5,     2,     1,     5,     5,     2,     2,     1,     4,
       3,     2,     3,     2,     2,     1,     3,     4,     3,     3,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     0,     1,     0,     2,     0,
       1,     1,     1,     0,     2,     0,     2,     0,     2,     2,
       5,     0,     4,     0,     4,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     3,     0,     1,     1,     0,
       4,     0,     0,     5,     1,     0,     3,     0,     3,     3,
       1,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       1,     1,     1,     1,     0,     1,     0,     3,     3,     1,
       0,     3,     1,     2,     0,     1,     0,     3,     3,     2,
       2,     3,     0,     1,     1,     2,     0,     0,     0,     0,
      22,     1,     1,     0,     1,     0,     1,     1,     0,     1,
       1,     0,     2,     2,     1,     3,     4,     3,     3,     0,
       2,     2,     1,     3,     3,     0,     4,     0,     3,     1,
       1,     0,     3,     2,     3,     1,     1,     2,     0,     2,
       3,     1,     5,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       2,     2,     1,     1,     3,     5,     1,     1,     1,     1,
       1,     3,     4,     5,     1,     5,     3,     2,     1,     3,
       2,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     2,     0,     2,     0,     2,     0,     4,     0,     3,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     3,     0,     4,     4,     6,     2,     3,     3,
       3,     5,     1,     3,     3,     1,     1,     3,     3,     1,
       3,     2,     2,     2,     2,     2,     1,     1,     4,     4,
       1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
       3,     3,     1,     1,     2,     2,     0,     3,     4,     3,
       0,     7,     1,     2,     1,     1,     1,     1,     1,     1,
       0,     5,     1,     1,     1,     1,     1,     0,     4,     6,
       6,     6,     7,     5,     0,     4,     8,     8,     8,     6,
       0,     1,     1,     2,     0,     1,     1,     3,     0,     3,
       0,     3,     0,     3,     0,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       3,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     2,     0,     1,     3,     1,     2,     2,     2,     1,
       3,     3,     1,     1,     3,     1,     3,     4,     5,     4,
       6,     1,     0,     3,     3,     1,     1,     0,     2,     2,
       2,     2,     0,     2,     0,     3,     2,     1,     2,     2,
       2,     2,     2,     0,     3,     0,     1,     0,     3,     2,
       0,     1,     2,     0,     1,     4,     4,     5,     2,     3,
       0,     1,     0,     4,     0,     1,     1,     0,     1,     0,
       2,     2,     1,     0,     1,     1,     2,     3,     2,     0,
       6,     3,     0,     0,     0,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     3,     1,     2,     1,     2,     3,     3,
       3,     0,     3,     3,     0,     7,     0,     3,     1,     3,
       0,     3,     0,     3,     4,     1,     3,     0,     3,     0,
       3,     4,     4,     0,     0,     0,    16,     8,     7,     0,
       0,     0,     0,     0,    15,     0,     0,     0,     0,    12,
       4,     4,     3,     4,     3,     2,     1,     3,     5,     1,
       1,     0,     1,     1,     0,     2,     0,     0,     3,     0,
       2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2612,  1082,  2543,     0,     0,     0,     0,     0,     0,
    2545,   124,  1137,    64,  1715,  1830,  1831,  1619,  1647,     2,
       0,  1082,   270,   174,     0,    76,  1656,     0,  1882,     0,
       0,  1082,   484,     0,  1876,     0,     0,  1082,  1659,  1866,
     247,   174,  2545,     0,  1129,  2351,  1753,     0,     0,     0,
    1736,     0,  2426,  1704,     0,     0,     0,     0,     3,     8,
      19,     0,    39,    24,    29,    14,    18,    13,    53,    46,
      26,    37,    10,    55,    56,    16,    43,    11,    12,    15,
      35,    42,    36,    38,    51,    50,  1120,    22,    23,    30,
      44,    60,    20,    57,    54,    21,  1832,    25,    45,    40,
      32,    61,    33,    52,    34,    59,    28,    47,    27,     9,
      17,    48,    49,    41,    62,    31,    58,     0,   930,     0,
       0,  1007,     0,     0,     0,     0,   174,     0,   910,  2610,
    2611,  2612,  1084,  1083,     0,  2545,  1987,  1067,  1093,  2050,
    2051,  2052,  2053,  2054,  2055,  2056,  2057,  2001,  2058,  2060,
    2059,  2061,  2062,  2002,  2003,  2063,  2064,  2065,  2067,  2066,
    2068,  2004,  2005,  2069,  2070,  2071,  2072,  2006,  2007,  2073,
    2075,  2074,  2008,  2076,  2077,  2078,  2081,  2080,  2079,  2009,
    2082,  2010,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  2091,
    2090,  2011,  2092,  2093,  2094,  2095,  2096,  2098,  2097,  2099,
    2100,  2101,  2012,  2102,  2103,  2104,  2105,  2106,  2107,  2108,
    2109,  2110,  2013,  2111,  2112,  2113,  2133,  2014,  2114,  2117,
    2116,  2115,  2118,  2119,  2120,  2122,  2121,  2123,  2124,  2015,
    2125,  2126,  2127,  2128,  2129,  2131,  2130,  2135,  2136,  2137,
    2016,  2017,  2132,  2134,  2331,  2138,  2140,  2139,  2141,  2143,
    2142,  2018,  2144,  2019,  2020,  2145,  2146,  1984,  2147,  1985,
    2148,  2150,  2151,  2152,  2157,  2021,  2149,  2153,  2154,  2155,
    2156,  2158,  2022,  2159,  2160,  2161,  2162,  2163,  2164,  2165,
    2166,  2167,  2168,  2190,  2179,  2181,  2172,  2174,  2175,  2177,
    2173,  2180,  2178,  2184,  2183,  2185,  2186,  2187,  2188,  2189,
    2182,  2170,  2176,  2171,  2191,  2192,  2169,  2193,  2194,  2195,
    2196,  2197,  2198,  2199,  2200,  2201,  2202,  2203,  2205,  2204,
    2206,  2207,  2208,  2209,  2210,  2211,  2213,  2212,  2214,  2215,
    2216,  2218,  2217,  2220,  2221,  2023,  2219,  2222,  2223,  2224,
    2225,  2226,  2227,  2024,  2025,  2026,  2228,  2229,  2027,  2230,
    2232,  2231,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2028,
    2029,  2240,  2241,  2242,  2243,  2244,  2245,  2246,  2247,  2248,
    2249,  2250,  2251,  2252,  2253,  2255,  2254,  2256,  2257,  2258,
    2259,  2260,  2261,  2262,  2030,  2263,  2031,  2264,  2265,  2032,
    2266,  2033,  2267,  2268,  2269,  2270,  2034,  2271,  2272,  2273,
    2275,  2276,  2274,  2277,  2035,  2278,  2279,  2280,  2036,  2282,
    2281,  2283,  2037,  2285,  2286,  2038,  2284,  2040,  2287,  2288,
    2039,  2041,  2289,  2290,  2291,  2292,  2293,  2295,  2294,  2296,
    2297,  2298,  2042,  2299,  2300,  2301,  2302,  2043,  2303,  2304,
    2305,  2306,  2307,  2309,  2308,  2310,  2311,  2312,  2313,  2315,
    2317,  2316,  2314,  2318,  2319,  2320,  2321,  2324,  2325,  2326,
    2327,  2322,  2323,  2044,  2328,  2329,  2330,  2332,  2333,  2335,
    2334,  2045,  2046,  2336,  2337,  2049,  2338,  2339,  2342,  2340,
    2341,  2344,  2343,  2345,  2347,  2346,  2047,  2348,  2048,  2349,
    2350,   193,  1990,   176,  1991,  2000,     0,  2418,  2417,  1051,
    1068,  2546,  2547,   579,   860,     0,     0,   861,     0,   578,
     859,   174,  2612,   129,     0,   575,   576,     0,     0,     0,
    1138,  1163,  1729,     0,  1645,  1645,  1645,     0,     0,  1645,
    1645,     0,  1648,  1645,   174,  1645,     0,    69,  1839,   271,
       0,  2454,     0,     0,     0,  1983,     0,  1662,     0,  1883,
    1884,     0,  1891,     0,  1892,  1886,  2415,     0,     0,     0,
       0,     0,   174,  1085,     0,  1713,     0,   237,   246,   248,
     249,   245,  2447,  2547,  2558,  1121,  1127,  1148,     0,  1809,
     249,  1038,  1022,  1038,  1737,  1734,     0,     0,  1713,  1885,
    2669,     0,     0,     0,  2665,     0,  2670,     0,  1129,     0,
       0,     1,     5,     0,     0,  1137,  2128,  2017,  2232,  1823,
    1821,  1978,     0,   901,   931,     0,   906,     0,   904,  1996,
    1995,  1994,     0,   917,   916,   914,     0,   448,     0,     0,
       0,  2621,   908,  1065,  2544,     0,   195,     0,    78,     0,
       0,     0,  2550,     0,     0,     0,     0,   128,     0,     0,
       0,   125,  1163,  1163,  2612,  2614,  2616,   579,   577,     0,
       0,     0,  1143,     0,  1142,     0,  1733,  1732,  1731,     0,
    1729,  2051,  2001,  2062,     0,  1951,     0,     0,     0,  1417,
       0,  2006,     0,  2076,  2078,  2011,     0,     0,  1170,  1170,
     732,     0,     0,     0,  2100,  2101,  1957,     0,     0,     0,
    1948,  1958,  2017,  2140,  2141,     0,  1950,  2146,     0,     0,
       0,     0,  2163,  1955,     0,     0,  2200,  2202,     0,     0,
    2206,  2207,  2208,  2209,  1934,  1225,     0,   732,  1947,  1954,
    2225,  1940,  2233,  2238,  2239,     0,  2248,     0,     0,  2270,
       0,  2276,  2274,  2280,     0,     0,  2306,     0,     0,   732,
    1933,  2324,  2325,  2326,  2327,     0,  1949,  2044,  1956,     0,
    2338,  1170,   732,   732,     0,     0,     0,  2345,  2347,  2350,
       0,     0,     0,  2582,  1224,     0,  1382,     0,  1299,  1411,
    1182,  1188,  1202,     0,  1217,  1235,  1236,  1238,  1337,  1237,
    1243,  1242,  1620,  1944,  1241,  1240,  1945,  1946,  1234,  1968,
    1990,  1967,     0,     0,     0,     0,     0,     0,     0,     0,
    1649,     0,     0,  1631,  1645,    71,     0,     0,     0,  1980,
    1526,  2429,  2430,     0,    77,  1664,  1665,  1663,  1006,     0,
    1881,     0,  1895,     0,  1080,   494,   485,     0,  1804,  1803,
       0,  1877,  2559,     0,     0,  1056,  1667,  1714,     0,  1666,
    1872,     0,  1870,  1867,  1869,   238,     0,     0,   268,     0,
    2553,  2550,  2560,  2595,  2590,  2589,  2592,  2593,  1154,  2594,
    1153,  2591,  2588,  1163,  1149,  1151,  1152,   776,     0,     0,
    2371,  2372,  2213,  2233,  2373,  2322,     0,     0,  2392,  2352,
    2357,  2353,     0,     0,   776,  1817,     0,     0,  1817,     0,
    1561,  1807,  1810,     0,  2375,  1785,   857,   856,   855,  2376,
    1803,     0,  1761,  1773,     0,  1738,  1778,     0,  2377,     0,
    1806,     0,  1561,  1817,     0,  1754,     0,     0,     0,     0,
     244,  1043,  1042,  1018,  1039,  1040,     0,     0,  1021,  1023,
    1024,  1020,     0,  2682,  2427,  1006,  1939,  1938,  1988,  2666,
    1937,  2674,  2676,  2662,  2664,  2671,  1123,     0,  2564,     6,
      63,  1163,     0,     0,  1836,  2619,  2620,  2618,   792,     0,
    1170,  1997,  2613,   177,   915,     0,   449,   177,     0,     0,
       0,     0,     0,   450,   451,   383,   919,     0,   899,   912,
       0,     0,   911,  2621,     0,     0,  1095,  1097,  1096,  1113,
     197,   194,   175,     0,  1053,  1638,  1640,  1070,  2549,     0,
       0,  2551,  2555,  1223,  1222,     0,   122,   127,     0,     0,
       0,  2521,   126,  2515,  2617,  1163,  1163,  1163,  2609,     0,
    2597,  2604,  2605,  2608,  2607,  2606,  2603,     0,  2596,  2599,
    2600,  2602,  2601,  2621,  2615,     0,   862,   862,   862,  1455,
    1163,  1119,  1164,  1164,  1967,     0,  1716,  1719,  1723,  1727,
    1730,     0,     0,  1531,  1256,  1531,  1531,  1531,  1418,     0,
       0,     0,     0,     0,     0,     0,     0,  1531,     0,  1293,
    1266,     0,  1294,     0,     0,     0,  1959,     0,     0,     0,
    2582,     0,     0,     0,     0,  1387,     0,     0,     0,  2582,
       0,     0,     0,     0,     0,  1413,  1415,  1967,  1531,     0,
       0,  1531,     0,     0,     0,     0,     0,  1175,   772,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1531,  1531,     0,     0,  1531,  1307,  1961,     0,
       0,     0,  1960,     0,     0,     0,  1953,  1952,  1935,     0,
    1310,  1312,  1311,     0,  1531,  1531,     0,     0,     0,  1246,
    1245,  1247,     0,     0,     0,     0,     0,     0,  1221,  1220,
    1219,  1218,     0,     0,     0,  1226,     0,  1227,  1228,     0,
    1229,  1230,  1231,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1248,     0,     0,     0,  1936,  1346,     0,  1646,
    1626,  1633,  1628,     0,  1649,  1629,  1637,   463,   462,  1654,
    1655,  1635,  1650,  1651,     0,  1634,  2513,  1630,     0,  1621,
       0,    70,     0,  1862,     0,     0,     0,  1858,  1860,  1859,
       0,     0,  1863,     0,  1861,  1840,  1844,  1850,  1841,     0,
       0,   269,   272,   274,     0,   277,  2464,  2479,  2480,  2476,
    2481,  2499,  2482,  2486,     0,  2478,  2470,     0,  2485,     0,
    2474,  2483,     0,  2468,     0,  2484,  2489,  2500,  2472,  2477,
    2455,     0,  2462,  2466,  1527,  1528,     0,  2428,     0,  1979,
       0,     0,  1103,  1896,  1897,  1893,  1526,  2416,  2419,     0,
     495,     0,     0,   506,     0,     0,    66,    67,     0,  1087,
       0,  1086,  1090,     0,     0,     0,  1670,  1660,  1669,  1452,
    1873,  1874,     0,   236,   261,   256,   264,   258,   260,   259,
     265,   266,   267,   262,   257,   263,   250,     0,  2464,     0,
    2448,     0,  2554,     0,  2556,  2573,  1128,  2561,  1160,  1130,
    1159,  1150,   775,     0,   778,   780,  1689,  1690,   779,   788,
       0,   777,     0,     0,     0,  2378,     0,   784,   786,   785,
    2387,   783,     0,     0,  2362,  2383,  1813,     0,     0,  1784,
       0,   579,     0,     0,     0,     0,     0,     0,  1755,     0,
       0,   622,     0,  1777,  1562,  1811,  1812,  1817,     0,     0,
    1817,     0,  1790,  1807,     0,  1817,  1750,     0,     0,  1742,
    1747,  1743,     0,  1749,  1748,  1751,  1739,  1740,  1813,  1766,
    1791,  1807,  1776,  1783,     0,  1765,  1772,     0,  1781,  1807,
    1807,  1817,  1817,  1044,     0,  1027,  1028,     0,     0,  1735,
    1455,     0,     0,  2663,  2677,  2661,  2672,  2673,  2660,  1124,
    2565,  1122,  2566,     0,     7,     4,     0,  1835,  1825,  1826,
    1827,  1828,  1829,  1824,  1822,  1837,  1838,   793,   792,   570,
     573,   572,     0,     0,  1999,     0,   907,     0,   437,   905,
       0,     0,   415,   394,   415,   452,     0,     0,   792,   922,
       0,     0,   909,  1066,     0,     0,   483,  1113,  1099,  1115,
       0,   198,   200,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    79,    80,   102,
    1055,  1054,     0,  1052,  1078,  1077,  1075,     0,  1076,  1074,
    1069,  1071,  1072,  2548,  2552,   580,   792,   425,     0,   386,
       0,     0,     0,     0,     0,   579,     0,     0,  2598,   111,
     863,     0,     0,     0,  1473,  1472,     0,  1426,  1144,  1428,
    1425,  1424,  1423,     0,  1472,  1141,  1165,  1161,     0,  1721,
    1642,  1452,  1644,  1978,     0,     0,     0,  1725,     0,     0,
    1532,  1531,     0,  1396,     0,     0,     0,     0,  1419,     0,
       0,     0,     0,     0,     0,     0,  1367,     0,  1396,  1171,
       0,   733,  1317,     0,     0,     0,     0,     0,     0,  1502,
    1503,  1504,  1505,  1513,  1506,  1507,  1508,  1515,  1520,  1509,
    1510,  1516,  1517,  1518,  1511,  1519,  1514,  1512,  1521,     0,
    1501,     0,     0,  1525,  1522,  1524,  1523,     0,  1388,  1380,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1531,     0,     0,     0,  1531,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1329,     0,     0,     0,     0,     0,  1531,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1289,     0,  1970,  1969,     0,     0,     0,   825,     0,  1250,
       0,  1249,  1464,     0,  2567,  2583,     0,  2378,  1383,  1385,
       0,  1173,  1172,  1174,  1185,  1178,  1183,  1176,  1180,     0,
    1232,  2057,  1186,     0,     0,  1214,  2582,  1540,  1215,  1200,
    1205,  1206,     0,  1203,  1204,     0,  1208,     0,  1207,  1211,
    1212,  1213,  1216,     0,     0,     0,     0,  1239,  1244,  1412,
    1163,  1971,     0,  1623,  1636,  1805,  1652,  1691,     0,  1008,
       0,     0,    72,    74,  1855,  1852,  1851,  1853,  1857,  1856,
    1854,     0,  1864,  2100,  2324,  2327,   281,     0,   254,   253,
     255,   278,     0,     0,  2465,  2463,  2497,  2496,  2501,     0,
    2498,  2494,  2487,  2522,  2491,     0,  2522,  2493,  2492,  2522,
    2488,  2495,  2522,  2460,     0,  1530,  2136,  2217,     0,  1533,
    2432,  1657,  2681,     0,  1894,     0,     0,     0,  1081,     0,
    1163,   493,   492,   491,   490,     0,   508,   488,   496,    68,
       0,     0,  1878,     0,     0,     0,     0,  1058,  1668,     0,
       0,  1641,  1453,  1875,  1871,  1868,     0,     0,  2463,     0,
    2460,  2557,  2575,  2574,  2562,  1163,  1552,  2394,     0,  2389,
    2388,     0,     0,     0,  2407,  2390,     0,     0,  2356,  2395,
    2396,  2399,     0,     0,     0,     0,     0,  2393,  2322,  2358,
    2359,     0,  2364,  2354,     0,     0,  1815,  1818,  1819,     0,
       0,  1799,  1793,  1792,  1788,  1794,  1789,  1802,  1801,  1800,
    1763,  1762,  1572,  1573,  1571,  1565,  1566,  1570,  1569,  1758,
    1808,  1798,  1796,  1786,  1817,  1797,  1795,  1744,  1745,  1746,
       0,  1561,     0,  1815,  1817,  1807,     0,  1817,  1817,  1780,
    1782,     0,  1030,  1041,  1026,  1025,     0,  2667,  2675,  2679,
       0,  1561,  2572,  2570,  1820,   571,  1691,  1691,     0,  1998,
       0,     0,     0,     0,     0,     0,     0,   178,   187,     0,
       0,   392,   393,  1691,   391,   438,   439,   442,   443,   444,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   445,
    1691,  1691,   388,   416,   417,   420,   421,   422,   423,   424,
     384,     0,   389,     0,   920,  1004,  1691,  1004,     0,  1691,
    1691,  1004,  1691,     0,     0,  1691,  1691,     0,     0,  1691,
       0,     0,  1004,     0,  1691,     0,   991,     0,     0,  1691,
    1691,  1691,  1691,  1691,  1004,     0,     0,  1691,   483,  1691,
       0,     0,  1014,     0,     0,  1691,  1691,  1691,  1691,     0,
       0,  1691,     0,  1691,   938,   990,   583,   609,   610,   900,
     937,   939,   951,   479,     0,   969,   993,   994,   992,     0,
     924,   926,  2622,  2623,  2624,  1102,  1094,  1101,  1098,  1113,
    1111,  1100,   852,   851,     0,  1114,   196,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1639,  1079,  1073,   123,   792,  1691,  1691,
    1691,  1691,   390,   426,   427,   430,   431,   432,   433,   436,
     434,   435,     0,     0,   402,     0,     0,  2516,     0,  2655,
       0,     0,     0,   176,   581,     0,     0,   864,     0,     0,
       0,  1472,  1455,     0,     0,  1449,  1474,     0,  1474,  1455,
    1455,     0,  1139,  1455,  1452,  1469,     0,  1162,  1169,  1168,
    1964,  1971,     0,     0,  1717,     0,  1981,  1724,  1455,  1728,
    1727,     0,  1313,     0,  1360,     0,  1362,  1363,  1364,     0,
       0,     0,     0,     0,  1314,     0,  1264,  1315,  1316,     0,
       0,     0,     0,  1366,     0,   734,     0,     0,  1267,  1268,
    1261,  1253,     0,     0,  1339,     0,     0,  1269,     0,     0,
       0,     0,     0,  1340,  1414,     0,  1416,  1971,     0,  1372,
    1321,  1274,     0,  1370,     0,  1275,  1341,  1342,  1343,  1323,
    1324,     0,  1345,     0,  1325,     0,     0,  1328,     0,     0,
    1277,  1376,  1374,     0,     0,     0,     0,  1378,  1279,     0,
       0,     0,  1278,     0,     0,     0,     0,     0,     0,     0,
    1281,     0,  1262,  1375,  1377,  1331,     0,     0,     0,     0,
       0,  1290,     0,  2576,  1463,  2584,  1464,     0,     0,  2578,
    2568,  2573,  2581,  1254,     0,     0,  1972,  1179,  1184,  1177,
    1181,  2582,     0,     0,     0,     0,  1198,  1197,     0,     0,
       0,  2582,  1540,  1201,     0,     0,  1356,  1357,  1409,     0,
    1627,  1624,  1653,  1692,     0,  2514,  1010,  1009,  1632,  1008,
      75,     0,  1849,  1865,  1842,     0,   273,   282,   275,   279,
     280,   276,  2490,     0,  2471,     0,  2475,  2469,  2473,     0,
       0,  2461,     0,  2467,  2442,  2436,  2443,  2445,  2439,  2444,
    2446,  2437,  2438,  2433,  2440,  1534,  1563,     0,  1104,  1106,
    1107,  1105,  1113,     0,     0,  2422,  2423,  2421,  2420,   498,
       0,  1597,  1598,  1583,  1584,  1582,  1585,   507,  1586,  1596,
       0,   519,     0,     0,     0,  1880,  1879,     0,  1088,  1091,
    1092,  1063,  1062,  1064,  1057,  1059,  1060,   563,  1674,     0,
       0,     0,  1680,  1661,  1671,     0,     0,   251,     0,     0,
       0,     0,     0,     0,  1158,  1455,  1612,  1155,  1134,  1563,
    1553,  1133,   791,   790,   789,   787,     0,     0,     0,     0,
    2401,  2402,     0,     0,  2379,  2380,  2381,     0,  2385,  2361,
    2362,     0,  2363,     0,  2413,  2414,  2411,  2412,  2410,  2384,
    1814,     0,  1767,     0,  1787,     0,     0,  1760,     0,  1779,
    1741,  1769,  1759,  1533,  1807,  1756,  1757,     0,  1050,     0,
    1046,  1045,     0,  1019,  1032,     0,     0,     0,  2678,  1554,
    2571,     0,     0,   903,   181,   184,   182,     0,   183,     0,
       0,   447,   446,     0,  1805,   440,   135,   134,   136,   137,
    1580,  1581,  1577,  1578,  1576,  1579,   139,   138,   133,   918,
       0,     0,     0,  1805,   418,   395,   396,   399,   400,   401,
       0,  1005,   893,  1082,   973,     0,   655,   893,   848,   853,
     853,   971,     0,     0,  1082,     0,     0,     0,     0,     0,
    1082,     0,     0,     0,  1691,     0,   984,   933,     0,     0,
       0,     0,     0,   985,     0,     0,   934,  1691,     0,     0,
       0,     0,     0,     0,  1082,     0,     0,   481,     0,  1082,
     483,  1017,  1016,  1015,     0,  1082,  1082,     0,     0,     0,
       0,   615,   616,   614,     0,     0,   607,   584,   792,   935,
     480,   936,   654,     0,  1011,   651,   657,  1974,     0,     0,
       0,   145,  2626,     0,  1493,   199,   103,   101,    83,  1986,
      87,    89,    82,   107,  1590,  1591,  1589,  1587,  1588,   108,
      85,    86,    88,    92,    91,    93,    94,    97,    98,    95,
      90,    96,    84,    99,   109,   110,    81,     0,     0,     0,
       0,  1805,   428,     0,     0,  1691,   385,   403,   404,   407,
     408,   409,   410,   411,   414,   412,   413,     0,  2517,  2519,
       0,     0,   379,   378,     0,   140,  2649,     0,     0,   654,
     112,   479,   582,   585,   886,   888,   887,   878,   877,   113,
     116,   119,     0,  2567,  1467,     0,  1451,  1450,  1475,     0,
    1455,  1474,  1474,     0,  1431,  1430,  1145,  1429,  1526,  1457,
    1148,  1167,  1166,     0,  1643,  1727,  1455,  1533,  1979,  1533,
       0,  1726,     0,     0,  1361,  1397,     0,  1420,     0,  1258,
     746,   746,   730,  1405,   726,   746,  1401,   730,  1403,     0,
       0,     0,     0,     0,  1368,  1365,     0,     0,     0,     0,
       0,  1391,     0,     0,     0,  1263,     0,  1351,  1373,  1371,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1379,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   814,   820,   823,   824,
     826,   818,     0,  1333,  1251,  1163,  2585,  2587,  1125,     0,
    2577,  2579,   895,  1384,     0,  1195,  1191,     0,  1189,  1539,
    1210,  1209,     0,     0,     0,  1199,  1164,  1347,  1163,     0,
    1410,  1973,   995,   461,   621,  1622,    73,  1845,     0,     0,
    2526,     0,  2525,     0,  2509,  2512,  1978,     0,     0,     0,
       0,     0,  2431,  1564,  1701,     0,  1113,  1117,  1989,  1887,
    2424,  2425,     0,   499,   500,   502,  1164,   516,   494,     0,
     486,   489,     0,   498,     0,  1061,  1148,     0,  1693,  1678,
    1685,  1679,     0,     0,     0,  1677,  1963,  1962,  1969,  2560,
       0,  1499,     0,     0,     0,     0,     0,     0,  2563,  1533,
    1533,  1606,     0,     0,  1131,  1136,  1132,  1135,  2391,     0,
       0,     0,     0,  2406,  2400,  2397,  2398,     0,  2360,  2382,
    2366,  2365,  2368,  2370,  1816,  1561,  1775,  1774,  1568,  1567,
    1752,  1561,  1771,  1817,     0,     0,     0,     0,     0,  1034,
    1705,  1708,     0,  2668,  2680,     0,   620,   619,   186,   185,
     191,   192,  1594,  1592,  1593,   453,   464,  1595,   465,   441,
     132,   454,   455,   419,     0,   397,   921,   656,   894,   956,
       0,     0,     0,   853,   650,   893,   862,   854,   893,   893,
    1000,  1001,     0,     0,   594,   591,   975,   603,   954,   945,
     955,   966,   968,     0,   593,   617,     0,     0,   605,     0,
     940,   982,   983,  1008,   588,     0,     0,   630,   631,   629,
     611,   618,  1002,  1003,   589,   590,   977,     0,  1548,  1550,
    1558,   596,   595,     0,   592,     0,   953,   988,   961,     0,
     628,   626,   623,   625,   624,   627,   606,   598,   597,   600,
     599,   602,   601,   604,   950,     0,  1004,  1004,   970,     0,
     638,   639,   641,   642,  1977,     0,  1013,   972,     0,   643,
     652,   644,     0,     0,     0,   155,     0,     0,   923,     0,
     148,   146,   157,     0,     0,     0,  1496,     0,  1497,  1494,
    1495,     0,   104,   106,   460,   459,   458,   457,   429,     0,
       0,     0,  1805,   405,  2518,     0,     0,  2656,   382,   380,
     381,     0,     0,   201,   636,   637,   635,   634,     0,   468,
       0,   466,     0,   478,     0,  1898,   792,   586,     0,     0,
       0,  2573,  1526,  1459,  1455,  1427,  1455,  1438,     0,     0,
    1455,  1434,  1432,  1436,  1491,  1163,  1965,     0,  1533,  1552,
    1982,  1720,     0,  1291,  1421,     0,     0,   747,  1398,   800,
       0,  1407,     0,  1408,   728,   727,  1400,  1402,  1406,  1404,
    1257,  1265,  1338,  1260,  1259,     0,     0,     0,  1297,  1319,
       0,  1298,     0,  1389,     0,     0,  1271,     0,  1273,     0,
       0,  1353,  1322,  1344,  1300,  1326,     0,  1276,  1252,     0,
    1301,     0,  1306,  1304,     0,  1280,     0,     0,  1287,     0,
    1285,     0,  1286,     0,  1288,  1330,  1332,     0,     0,   825,
     811,   812,   813,     0,   815,   817,   819,     0,     0,  1465,
    2586,  1126,     0,     0,  1386,  1187,     0,  1196,  1193,     0,
    1190,  1165,  1358,  1348,  1625,   997,   996,  1847,     0,  1843,
     290,   285,   293,   287,   289,   288,   294,   295,   296,   297,
     291,   286,   292,   284,   283,  2523,     0,  2534,     0,     0,
       0,     0,     0,     0,  1535,     0,  1658,  1108,  1113,  1117,
       0,  1109,  1898,   503,     0,     0,     0,   523,     0,   521,
     497,     0,  1089,  1163,  1675,  1687,     0,  1695,     0,     0,
    1672,  1682,     0,     0,     0,  1681,   483,     0,   252,     0,
    2453,     0,     0,     0,  1563,  1541,     0,     0,  1618,     0,
    1613,  1156,     0,  2409,  2408,  2404,  2403,  2405,  2386,     0,
       0,  1768,  1770,  1764,  1049,  1048,  1047,  1031,     0,     0,
    1036,     0,  1533,     0,  1966,  1555,  1558,   398,   958,     0,
     893,   849,   850,   862,     0,   862,   862,     0,     0,   944,
       0,  1070,     0,   949,   788,   612,   981,   980,     0,   613,
       0,   942,     0,  1559,  1560,  1551,   482,   941,   963,   947,
    1864,   974,   654,  1012,   830,   722,   671,   662,   746,   665,
     664,   708,   730,   676,   726,   724,   694,   726,   726,   701,
     700,   718,   704,   684,   800,   800,   683,   721,   800,   705,
     703,   707,     0,   709,   726,   714,   702,   706,   723,   699,
     696,   720,   746,   730,   730,   680,   719,   800,     0,   712,
     746,   750,   682,   800,   807,     0,     0,   746,   748,  1976,
     156,   144,     0,     0,   925,   927,     0,     0,   928,  2628,
       0,  2630,     0,  1116,     0,   100,     0,     0,   387,   456,
     406,  2520,     0,   212,  1163,     0,     0,   202,   204,   205,
       0,     0,     0,   581,  1900,  1899,   467,   566,   587,     0,
       0,     0,  1460,  1458,  1468,     0,  1423,  1455,  1455,     0,
    1423,     0,     0,     0,  1456,  1488,  1470,  1727,  1722,  1574,
       0,  1422,     0,     0,     0,     0,   794,   805,   803,   797,
       0,   801,   802,  1399,     0,     0,  1369,     0,     0,     0,
    1392,     0,     0,     0,     0,     0,     0,     0,  1255,     0,
    1349,     0,     0,     0,     0,     0,     0,  1284,  1282,  1283,
     809,  1335,     0,   822,   816,   814,   821,     0,  1563,  2567,
     896,  1192,     0,  1359,   999,   998,     0,     0,  2524,     0,
    2459,  2511,  2510,  2527,  2527,  2527,  1700,  1699,     0,  1698,
    1702,  1110,  1118,     0,   501,   504,     0,   496,     0,   520,
       0,   487,   564,     0,     0,     0,  1696,  1684,  2564,  1673,
    1676,  1971,  1454,  1500,     0,  2450,  2451,  2449,  1147,     0,
    1536,  1617,  1614,     0,  1607,  1609,  1611,     0,  2367,  2369,
    1033,     0,     0,  1029,  1707,  1552,  1709,     0,  1557,     0,
       0,   957,     0,     0,     0,     0,     0,     0,   987,     0,
    1011,   946,   967,   989,     0,   750,  1082,  1549,   962,   964,
    1058,     0,   640,     0,   834,   670,   663,   681,   679,   735,
     725,     0,   735,   735,   690,   708,   685,     0,   800,   698,
     689,   710,   713,   715,   717,   735,     0,   800,   678,   677,
     687,   674,   735,   758,     0,     0,     0,     0,   754,     0,
     828,     0,     0,   761,   658,   751,   753,     0,     0,   711,
     800,   667,   808,   807,   669,   800,   807,   735,     0,   749,
     735,     0,   142,   147,   158,   159,   913,  2627,     0,  2625,
       0,  1112,  1498,   105,     0,     0,   215,   213,   214,     0,
     208,   210,   205,  2643,     0,  2650,     0,     0,  2648,   469,
     471,   479,   567,     0,     0,  1558,   891,     0,     0,     0,
    1439,     0,  1443,  1448,  1444,     0,  1435,  1433,     0,  1492,
       0,  1563,     0,  1718,  1292,   744,   742,   745,   743,   796,
     795,   799,     0,   798,   807,   731,     0,  1295,  1296,  1320,
       0,  1390,  1381,  1318,     0,  1272,  1350,     0,     0,  1327,
    1302,  1305,  1303,  1308,  1309,     0,  1334,     0,  1155,  1155,
     632,  2580,  1194,  1848,  1846,     0,     0,  2532,  2532,  2532,
    2441,     0,     0,     0,  1163,   509,     0,   526,   525,   522,
    1563,  1686,  1688,  1694,  1683,  2452,     0,  1537,  1552,   781,
    1610,     0,  1157,  1035,     0,  1574,  1558,   960,     0,   653,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     986,  1941,   976,   483,   978,   943,     0,   948,   608,     0,
     833,     0,   838,   739,   740,   741,   691,   736,   738,     0,
     693,   661,   686,   716,   692,     0,   688,   675,   764,   765,
     767,   766,   763,   773,   756,   774,     0,     0,   768,   769,
     770,   762,   752,   760,   755,   666,   668,   672,   673,   659,
       0,   660,  1975,   149,   929,   318,  2629,  2637,     0,  2639,
    2632,   130,  2647,  2657,   212,     0,     0,   153,     0,   203,
     788,   206,  2564,  1898,     0,   474,   865,     0,   890,     0,
     867,   869,  1461,     0,     0,     0,     0,     0,  1480,  1481,
       0,     0,  1486,  1490,  1471,  1575,   806,   804,     0,  1393,
    1558,     0,  1352,  1354,   810,     0,  1466,   633,  2535,     0,
       0,  2531,  2529,     0,  2530,  2528,  2502,     0,  2457,  2458,
    2456,  1697,     0,     0,     0,   517,     0,     0,   551,   565,
    1545,  1558,     0,  1563,     0,  1615,  1608,  1037,  1706,  1556,
     959,     0,     0,   865,     0,     0,  1943,  1942,   952,  1011,
       0,   831,     0,   835,   836,   837,     0,   829,   737,     0,
     897,     0,   757,   759,     0,   151,   344,     0,   330,   316,
       0,     0,     0,   320,   160,   163,   161,     0,   162,   168,
       0,   169,   170,   171,   172,   173,   164,   342,   343,   167,
     165,   166,     0,  1992,     0,  1993,  1129,     0,     0,  2635,
       0,  2631,  2560,   179,   209,     0,     0,   145,   154,  2651,
     771,   472,   470,     0,  2560,     0,  1691,   114,   866,   882,
     881,   871,  1558,     0,     0,   117,   868,   884,   875,   120,
     870,   883,   873,  2567,  1440,     0,  1445,     0,  1437,  1476,
    1476,  1487,   729,     0,  1395,  1270,  1336,  2508,  2507,  2506,
    2503,     0,     0,     0,     0,     0,     0,  2533,  2537,     0,
    1452,  1164,     0,   510,     0,   513,   515,   529,     0,  1691,
       0,     0,  1691,  1691,  1691,  1691,   544,   552,   554,     0,
    1546,  1547,     0,  1542,  1544,  1538,  1599,   782,  1901,     0,
     865,   645,   867,   869,   979,     0,   832,     0,     0,   800,
       0,   800,   150,     0,   143,     0,     0,   329,   332,     0,
       0,   335,   325,   324,   326,     0,   319,   318,   318,   372,
     323,   369,   368,   361,  2638,     0,  2564,     0,     0,     0,
    2633,  2658,   211,  1163,   157,     0,   476,   475,   880,     0,
     995,   872,   889,   892,     0,   995,   876,   995,   874,  1462,
       0,     0,     0,  1484,  1482,  1558,  2504,  2538,  2541,  2539,
    2540,  2542,  2536,  1703,  1711,     0,  1888,     0,   518,   511,
       0,     0,   527,     0,  1691,  1691,     0,     0,     0,     0,
       0,   524,   553,  1691,  1558,     0,  1146,     0,  1909,   649,
     648,   646,   647,     0,   844,     0,   843,     0,   840,   839,
     695,   898,   697,   152,   345,   356,   359,   351,   331,     0,
       0,     0,   321,   318,     0,   305,   303,   304,   310,   311,
     312,   313,   314,   315,   306,   309,   307,   308,   318,     0,
     220,     0,     0,  2636,  2634,     0,  2640,     0,   189,   188,
     180,     0,   318,  2644,     0,  2652,  2564,   879,   115,   885,
     118,   121,  1442,  1447,     0,  1477,     0,     0,     0,  1394,
       0,     0,   781,   505,   517,   514,   537,   530,   533,     0,
     562,     0,     0,   558,   559,   557,   555,   548,     0,   546,
       0,  1543,  1600,     0,     0,     0,     0,  1902,  1904,     0,
    1616,   965,   846,   847,   845,     0,     0,     0,     0,   318,
     352,     0,   327,     0,   336,     0,     0,   218,   375,   373,
     216,   363,   363,  2641,  2642,   190,  2659,     0,   159,   179,
     477,  1479,  1478,  1493,     0,  1710,  1712,  1889,   512,   537,
       0,   535,     0,   531,   528,   532,   560,   561,     0,   545,
       0,   556,     0,     0,     0,     0,     0,  1903,     0,     0,
    1910,  1912,     0,     0,   353,   359,   349,   357,   318,     0,
       0,   317,     0,   371,   219,     0,     0,     0,   318,     0,
     362,   364,   366,     0,   141,  2653,     0,     0,  1915,   534,
       0,   542,   538,   540,   543,   551,   550,   547,  1602,  1907,
    1908,     0,  1905,     0,     0,  1911,   842,   841,     0,   350,
       0,     0,   348,   328,   333,   318,   376,   318,   230,   229,
       0,   222,   298,   370,     0,   221,  2645,   318,  1485,  1483,
       0,  1901,   536,     0,     0,   549,  1605,     0,  1603,  1906,
    1914,  1913,   354,     0,   318,     0,   318,     0,   318,     0,
       0,     0,     0,     0,   217,   318,  2654,     0,  1909,   541,
     539,  1601,     0,     0,   346,   318,   334,   339,     0,     0,
     225,   299,   300,     0,   227,  2646,     0,  1917,  1604,   318,
     318,   335,   338,   377,   374,     0,   301,   223,   224,   235,
     234,     0,  1916,     0,  1921,   318,   318,   340,   243,   241,
     318,   231,   239,   233,     0,   240,     0,   228,     0,     0,
    1928,     0,   226,   242,   302,  1919,  1920,  1918,  1923,     0,
       0,  1925,  1926,     0,  1890,   232,  1927,  1922,     0,  1929,
    1931,     0,  1924,     0,  1163,  1930,     0,  1164,  1932
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    57,   603,  1455,    58,    59,    60,    61,    62,  1306,
      63,   815,  1231,  1772,  1773,    64,   546,    65,  1003,  1527,
    1528,  3071,  3072,  1529,    66,  2144,  3108,  4160,  3109,  4165,
    3110,  4167,  1546,   512,   513,  1987,  1988,  1028,  3092,  3058,
    3873,  3062,  3985,  4124,  4027,  2070,  3428,  3874,  3875,  3994,
     541,  2142,  1476,  4151,  1967,  4260,  1968,    67,   636,  1001,
    1500,  1501,  3446,  3447,  3707,  3448,  3699,  3700,  3701,  3702,
    4388,  4233,  4330,  4389,  4461,  4495,  4501,  4430,  4510,  4511,
    4512,  4499,   856,  4513,    68,   569,   570,   858,  1336,  1786,
    1337,    69,    70,   540,  1251,  1252,  1253,  1254,  2341,  1787,
    2336,  2337,  3243,  4431,  4497,  4516,  4234,  4235,  4131,  4236,
    3997,  4237,  4135,  4238,  4000,  4239,  4240,  4241,  4242,  4380,
    4243,  4130,  4423,  4230,  4231,  4382,  4477,  4492,  4244,  4007,
    4125,  4317,  4008,  4126,  4375,  4226,  4376,  4418,  4473,  4227,
    4318,  4421,  4321,  4245,  4251,  4390,  4246,  4252,  4247,  4012,
    4142,  4250,  4140,  4249,  4386,  4385,  4457,  2674,  3091,   623,
     624,   647,  2134,   625,  1017,   974,  1478,  2000,  2001,  2525,
    2526,  2656,  2657,  2658,  1992,  1993,  1994,  2122,  2123,  2124,
    1974,  1975,  1976,  1482,  1971,  1972,   626,   975,   985,  1995,
    1996,  1997,  2662,  2126,  2127,  2128,  2129,  1219,  1220,  2945,
    2680,  3101,  3892,  3456,  4034,  4266,  3102,  3103,  2600,  3013,
    2080,    71,   558,   836,  1303,  2392,  1304,  2394,  2852,  2853,
    2854,  1831,  1832,  3785,  1836,  2391,  3945,  4284,  4084,  4085,
    2856,  4083,  2860,  3268,  3269,  3558,  3787,  3948,  4289,  4191,
    4354,  4287,  4350,  4288,  4352,  4444,  4402,  4403,  4201,  4298,
    4299,  4358,  4405,  4096,  4097,  4098,  2412,  2866,  3790,  3713,
    2116,  1468,  1469,   514,   515,   516,   644,  2681,  2055,  2682,
    2683,  3035,  2057,  2058,  2823,  1390,  3026,  3000,  3768,  3098,
    3039,  3040,  3041,  3042,  3043,  3049,  2964,  2535,  2536,  2605,
    3052,  3890,  3631,  3646,  3412,  3413,  3414,  3415,  3416,  3417,
    3418,  3143,  3144,  3141,  1082,  3836,  3837,  3838,  3137,  3138,
    3680,  3664,  3665,  3666,  3891,   778,  3854,  3490,  1358,  1359,
    3955,  1369,  1370,  2433,  1869,  2434,  1472,  3491,  3492,  3493,
    3674,  3198,  3765,  3204,  3205,  3206,  2786,  2787,  2788,  2789,
    2790,  2280,  3667,  3051,  3624,  3829,  3832,  3977,  4218,  2537,
    2965,  2538,  2968,   924,   517,  2539,  2540,  1560,  1561,  4037,
    4045,  4049,  4038,  4050,  4046,  4039,  4040,  4041,  4052,  4048,
    2687,  3714,  3715,  2957,  3214,  3979,    72,  1488,   968,   977,
     973,   993,   631,  1489,   986,  2071,  2611,  3686,   613,  2059,
    3616,  3341,  3620,  2060,  2979,  2061,  3328,  3601,  2062,  3358,
    3618,  3826,  2980,  2981,  2063,  2064,  2065,  3340,  3350,  3969,
    3224,  3225,  3226,  2541,   127,  2328,  3047,  2584,    73,  1433,
      74,   938,   939,   940,  2483,  2484,  2929,  3320,  3593,   933,
     934,   935,  1942,  2481,    75,   639,  1533,    76,  1314,  2404,
    2405,  2406,    77,   994,    78,    79,   640,  1540,  1541,  1542,
      80,  1299,   134,    81,   844,  1309,  1311,  1312,    82,   635,
     995,   996,   997,   998,  2076,    83,  1823,  2368,  2369,  2370,
    2371,  1497,  2613,  1498,  1499,  2085,  3261,    84,    85,    86,
     600,  2288,   575,   862,   576,   577,  1866,  2427,   521,  1051,
     663,  2162,  3769,   873,   874,   875,  2894,  1349,  1350,   665,
    1576,  2167,  1079,   779,   780,   781,   782,  1173,  1174,  3668,
     783,  1183,  1733,   784,   785,   786,   787,   788,   789,  1760,
    3170,  3171,  3510,  2315,  2316,  2317,   790,  2202,  3155,  2216,
     791,  1166,  1718,  1649,  3502,  3163,  3750,  3919,  1592,  2185,
    2739,  2819,  2282,  1104,  1105,  1069,  2192,  1598,  1567,  1568,
    1569,  1570,  1571,  3472,  3471,  3473,  3903,  3721,  3905,  3725,
    2160,  1851,  1852,  1572,  1573,  2692,  3719,  4053,  2283,  2284,
    2285,  3528,  2693,  3114,  2709,  2710,  3731,  2151,  1574,  2699,
    4173,  3911,  3912,  4278,  4277,  3913,  3729,  3730,  3474,  3475,
    3067,  3068,  3069,  2880,  1639,  1640,  1647,  1286,  1287,  1593,
    2366,  2841,  3798,  3952,  2306,  3580,  3950,  4103,  2068,  3008,
    3009,  2429,  2430,  2935,  3325,  3355,  1393,  3770,  2843,  1915,
    1916,  3733,  4500,  2791,  2629,  2946,  2388,  2389,  4206,  4362,
    4447,  4448,  3298,  3299,  3584,  3585,  2431,  2891,  3300,  3799,
    4108,    87,   523,    88,  1770,  2321,  2822,  1228,  2333,  1005,
    1316,  1579,  1580,   803,   536,  1221,  1222,  1223,    89,   547,
    2367,    90,   565,  1849,   828,   848,  1317,  1318,  2413,  2867,
    2874,  2414,  2879,  3568,  2869,  3274,  3275,  2323,  2324,  2870,
    3277,  3565,  3548,  3549,  3256,  3782,    91,   588,  3322,  2930,
    2931,  4183,  4184,   849,    92,   522,  1056,  2717,  1585,  2173,
    1057,  1058,  2176,   669,   670,    93,   942,   585,  1415,  1416,
    1417,  1931,    94,   579,   925,  2915,  2921,  1910,   840,  1224,
    1397,   928,  1398,  1896,  2462,  1379,    95,   964,   963,  1463,
      96,   609,  1464,    97,   816,  1245,  1782,  2827,  3229,  3536,
    1246,  1247,  2334,    98,   566,   853,   854,  1321,  1854,    99,
     560,   841,  1842,   100,   551,   101,   102,   832,  3262,  4282,
    4398,   555,  1825,  1295,  3457,  4208,  4307,  4308,  4310,  4370,
    4371,  4441,  4504,  4527,  4520,  4530,  4531,  4534,  4539,  4540,
     793,   949,   794,  3820,   795,   796,   797,  2875,  2876,  3326,
     798,  2877,   799,  2958,  1006,  1582,   544,   492,  2618,   620,
     950,  2849,   801,  4014,   971,  1021,   494,   495,   103,   578,
     889,  1374,  1364,  1373,  1889,  2450,  1893,  2452,  2453,  3309,
    2911,  3310,  2912,   929,  1885,  1890,  2913,  1894,   892,  1878,
    1879,  1880,  1881,  2904,  1875,  2459,   104,   833,   499,  1297,
    1298,  2377,   105,   587,   106,  1288,  1819,  1820,  2363,  2840,
    2364,   107,   859,  1340,   108,   818,  1280,  2352,  1281,  1795,
    1282,  1283,  1809,  1803,  1812,  1806,  4071,  3935,  3936,  2837,
    1227,  1022,  1023,  2344,  2831,  2832,  3777,  3938,  3540,  4077,
    4078,   109,   135,   502,   642,  1012,  1343,   110,   111,   112,
     113,  1346,  1450,  2423,  1451,  2289,  1452,  1453,  1953,  1864,
    1714,  1715,  3212,  1163,  1164,  2292,  2795,  2796,   876,   651,
    1038,  1030,   128,   129,   130,   654,   655,   131,   991,   992,
    2612,  3064,  3430,  3689,  3690,  3879,  4022,  4018,  4019,  4016,
    4021,  1032,  3886,  4337,  4465,  1033,  1034,  3093,  3888,  4155,
    4339,  4437,  1035,  2671,  3443,  4023,  4262,   114,   951,   597,
    1448,  1443,  1445,  1949,  2488,   115,   116
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3433
static const int yypact[] =
{
    4969,  1918,    87, -3433,   625,   156, 47748,   891,  -144,  -144,
     607,  2870,  1125, -3433, -3433, -3433, -3433, -3433,  2518, -3433,
   47748,    87,  1221, -3433, 24393, -3433, -3433,   969,   175,   117,
    -144,    87, -3433, 47748, -3433,   987,  1370,    87, -3433, -3433,
   41608, -3433,   607, 47748, -3433, -3433, -3433, 41608,  -143,  1097,
     994,  1345, -3433, -3433, 47748,  1650,  -164,  1715,  1567, -3433,
   -3433,  1434, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, 20682, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433,  1679, 47748,  1699,
   47748, -3433,  1672, 47748, 39766, 47748, -3433,  1350,  1751, -3433,
   -3433,  1821, -3433, -3433,  -144,   607, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433,  1309, -3433, -3433,  1397, -3433, -3433, -3433,
   -3433, -3433,  1970,  1769, -3433,  1789, 39766, -3433, 47748, -3433,
   -3433, -3433,  1098, -3433,  1465, -3433,  1473,  1801,  1811,  1817,
   -3433,   391,   120, 11243,  1831,  1831,  1831, 47748,  1853,  1831,
    1831, 47748, -3433,  1831, -3433,  1831,  -144, -3433, -3433, -3433,
    1938, -3433, 47748,  1729,   912,  -109, 39766,  1562, 47748, -3433,
   -3433, 11243, -3433,  1865, -3433, -3433, -3433,  -144,  2066,  1924,
     225, 47748, -3433, -3433,  -144,  1053,     3,  1539, -3433, -3433,
    1676, -3433, -3433,   161, -3433, -3433, -3433,  2679, 26244,  6015,
    1676,  1022,  -135,  1022, -3433, -3433, 47748,  -144,  1878, -3433,
   -3433,   338,   338,   338, -3433,   338, -3433,   338, -3433,  -164,
    1524, -3433, -3433,  1528, 47748,  1125,  1670,  2011,  2140, -3433,
   -3433,  1531,  1161, -3433,  1596, 36696, -3433, 47748, -3433, -3433,
   -3433, -3433,  1820, -3433, -3433, -3433,  2187, -3433, 36696, 24393,
   47748,  1686, -3433, -3433, -3433, 24393,  1582, 47748, -3433, 24393,
   24393,   213,   865,  1708, 47748, 47748,  2048, -3433,  2241, 36696,
    1764, -3433,   555,  1403,  1821,  2240, -3433,  1769, -3433, 47748,
   47748, 47748, -3433,   311, -3433, 11243, -3433, -3433, -3433, 42222,
     120,  1629,  1638,  1681, 15688, -3433,  1683,  1697,  1700, 11243,
    1733,  1736,  1756,  1761,  1779,  1787,  1799,  1802,  1808,  1808,
    1813,  1822,  1838,  1844,   856,  1857, -3433,  1862,  1867,  1881,
   -3433, -3433,  1883,  1890,  1896,  1899, -3433,  1908,  1916,  1920,
   11878,  1923,  1929, -3433, 21299,  1931,  1935,  1937,  1939,  1942,
    1944,  1948,  1951,  1953, -3433, -3433, 11243,  1813, -3433, -3433,
    1964, -3433,  1968,  1971,  1994,  2003,  2009,  2013,  2022,  2034,
    2037,  2039,  2049,  2051,  2057,  2059,  2067,  2070,  2077,  1813,
   -3433,  1047,  2082,  2090,  1082,  2097, -3433,  2105, -3433,   365,
    2118,  1808,  1813,  1813,  2123,  2137,  2139,  2142,  2146,  2170,
   15688, 15688, 15688, 11243, -3433, 47748, -3433, 47748, -3433,  1652,
    3406, -3433,  2309, 15688,   185, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433,  1616,  1719, -3433, -3433, -3433, -3433, -3433, -3433,
    2176,  1659,  2111, 47748, 47748, 47748,  1952, 47748, 47748, 39766,
     874, 47748, 36696, -3433,  1831,  1749,  3744, 29324,  3476, -3433,
     140, -3433, -3433, 47748, -3433, -3433, -3433, -3433,  2157,  1950,
    1652,  2352,   214, 24393, -3433,  1612, -3433,  -197, -3433, -3433,
    2457, -3433, -3433, 36696, 24393, -3433, -3433, -3433, 21918, -3433,
   -3433,  2703, -3433,  2127, -3433, -3433,  1719,  3697, -3433,  3546,
    2348,   865,  2242, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433,  2208,  2679, -3433, -3433,   210,  2364,  2204,
     401,   434, 34240,  1028,   454,    91, 26860, 34854,  2210, -3433,
   -3433, -3433,    65,  2693, -3433,   812,  2228,  2431,   812, 37310,
    2616,  1637, -3433,   370, -3433,  2695, -3433, -3433, -3433, -3433,
    2370,  2354, -3433, -3433,   445,  2083, -3433,  2732, -3433,    59,
   -3433,  2378,  2616,   812,  1637, -3433,  2624,  2768,   359,   974,
   -3433, -3433, -3433, -3433,  2290, -3433,  -101,  2844, -3433,  2297,
   -3433, -3433, 24393, -3433, -3433,  2157, -3433, -3433, -3433,  2323,
   -3433,  2594,  2433, -3433, -3433,    31, -3433,  2333,   -42,  2817,
   -3433,   391, 39766,  2231, 37924, -3433, -3433, -3433,  2853,  2869,
    1808,  2338, -3433, -3433, -3433,  2972, -3433, -3433,  2350,  2874,
    2874,  2874,  2982, -3433, -3433, -3433,  2362,  2607, -3433, -3433,
    2530,  2398, -3433,  1686, 24393,  2765,  2373, -3433, -3433,  2629,
   11243, -3433, -3433,  4531,   798, -3433, -3433,   882, -3433,  2961,
    2578, -3433, -3433, -3433, -3433,  2851, -3433, -3433,  2972,  2913,
    2874,  2803,  2390, -3433, -3433, -3433, -3433, -3433, -3433,  1579,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433,  1666, -3433, -3433,
   -3433, -3433, -3433,  1686, -3433, 24393, -3433, -3433, -3433,  1243,
   -3433, -3433,  1652, -3433,  2385, 24393, -3433,  2392, -3433,  2388,
   -3433, 11243, 11243,  1427,  2960,  3022,  3022,  3022,  1652,  2435,
   11243, 11243, 11243, 11243, 11243, 11243, 11243,  1510,  2406, -3433,
   -3433,   -78, -3433,  2408, 11243, 11243, -3433, 11243, 11243, 25010,
   -3433,  3517, 11243, 11243,  1436,  2915, 11243, 11243, 11243, 11243,
    3249, 11243, 11243, 25010,  3040,  2419, -3433,  2416,  1653, 11243,
   11243,  1673, 11243, 11243, 11243, 11243, 11243, -3433, -3433, 11243,
   11243, 11243, 11243, 15688, 11243, 11243, 11243, 11243, 11243, 11243,
    2426, 11243,  3022,  3022, 11243, 11243,  1748, -3433, -3433, 11243,
    2189,  2189, -3433, 11243,  8068, 11243, -3433, -3433, -3433,  2428,
   -3433, -3433, -3433, 25010,  3022,  3022, 11243, 11243, 11243,  2960,
    2960,  2960,   273,  2439,  -153, 11243, 27476,  2424, -3433, -3433,
   -3433, -3433, 11243, 11243, 11243, -3433, 15688, -3433, -3433,  1472,
   -3433, -3433, -3433, 12513, 15688, 15688,  2441, 15688, 15688, 15688,
   15688, 15688,  2807, 15688, 15688, 16323, 16958, 15688, 15688, 15688,
   15688,  1895,  2960, 39766, 15688, 11243, -3433, -3433, 47748, -3433,
   -3433, -3433,  2427, 24393,   874, -3433, -3433, -3433, -3433, -3433,
   -3433,  2442,   874, -3433,  2924, -3433, -3433,  2449, 24393, -3433,
    2446, -3433,  2811, -3433,  2815,  2816,  2822, -3433, -3433, -3433,
    3044,  2826, -3433,  2828, -3433, -3433,  2472, -3433, -3433, 17593,
   39766, -3433,  2474, -3433,  2952, -3433,  2706,  2653,  2063, -3433,
   -3433, -3433, -3433, -3433,  2740, -3433, -3433,  2575, -3433,  2749,
   -3433, -3433,   390, -3433,   179, -3433, -3433, -3433, -3433, -3433,
   -3433,  2757,  2492, -3433, -3433, -3433, 47748, -3433, 48362, -3433,
   21918,   625, -3433, -3433, -3433,  2856,   428,  2496, -3433, 24393,
   -3433,    86,    86,  2744,  1634, 39766, -3433, -3433,   153,  2500,
    2579,  2502, -3433,  2581, 24393, 24393, -3433, -3433, -3433,  2756,
   -3433,  3133,     3, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433,  2513,  2992,  2706,  2784,
   -3433,  2785, -3433, 47748, -3433,  1775, -3433, -3433, -3433,  2519,
   -3433, -3433, -3433, 47748, -3433, -3433, -3433, -3433, -3433,  3083,
   11243, -3433, 36696,   -54,   843,  1017,    65, -3433, -3433, -3433,
   -3433, -3433, 47748, 42836,  2520, -3433,  2917,   625, 11243, -3433,
    2528,  1769, 47748, 47748, 47748, 24393, 47748, 24393, -3433,   754,
     754, -3433, 35468, -3433, -3433, -3433, -3433,   812, 47748, 47748,
     812, 36696, -3433,  1637, 47748,   812, -3433,  2916,  2622, -3433,
   -3433, -3433,  2983, -3433, -3433,  2974,  2526, -3433,  2917, -3433,
   -3433,  1637, -3433, -3433, 24393, -3433, -3433,  1637, -3433,  1637,
    1637,   812,   812,  2582,  1022, -3433, -3433,  2673,  -135, -3433,
    1243,   338,  2776, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433,  1185, -3433, -3433,   311, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,    50, -3433,
   -3433, -3433,  1972,  3035, -3433, 39766,  2357,   -81,  1009,  2357,
    2120,   625,  1826, -3433,  1826, -3433, 36696,  2999,  4170,  2806,
     228, 24393, -3433,  2539, 43450, 24393, -3433, -3433, -3433,   152,
    2541,  2545,  1652,  3018,  3025,  3032,  3034,  3037,  3042,  3043,
    3047,  3048,  3049,  3050,  3053,  3054,  3055,  3058,  3060,  3073,
    3079,  3081,  3085,  3086,  3091,  3092,  3093,  2567, -3433, -3433,
   -3433, -3433, 24393, -3433, -3433, -3433, -3433,  2655, -3433, -3433,
   -3433, -3433,  1737, -3433, -3433, -3433,   148,  1955,  2637,  2663,
     119, 36696,  3059, 47748, 47748,  1769, 47748, 47748, -3433, -3433,
    -195,  2888,  2889,  2890, -3433, -3433, 47748,  2778,  2650, -3433,
    2626, -3433, -3433, 24393, -3433, -3433, 40380, -3433, 31170,  2628,
   -3433,  2756, -3433,  -231, 47748,  3072, 31784, -3433,   271,   369,
   -3433,  3022,  2631, -3433,  2632,  2635,  2636, 11243,    83,  1230,
     494,  -219,  1441,   569,   394,   308, -3433,  2639,  2643, -3433,
    2640, -3433, -3433,   405,   414,   657,   836,  2644,  2647, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,  3094,
   -3433,   456,  1495, -3433, -3433, -3433, -3433,  2649, -3433, -3433,
     852,   481,   502,   292,  2658,   522,  1545,  1553,  2657, 25010,
   47748,  3022,  2659,   937,  1086,  3022,  2660,   557,  1088,  1626,
    1644,  1667,  1120,  1137,   575,  1701,  2809,  1148,   609,   776,
    1152,   830,   900, -3433,  1224,  2665,  2670,   905,   269,  3022,
    2674,   317,  2662,  2672,  1236,  9338,  9973, 10608,   510,   950,
   -3433,  2676, -3433,  2416,  2677,  2684,   343,   226,  1240, -3433,
   11243, -3433, -3433,   946,  1234,  2730,   130,  1017, -3433,  2833,
   47748,  2334,   202, -3433, -3433, -3433, -3433, -3433, -3433,   893,
   -3433,  2686, -3433,  2688,  1494,  2691, 11243,   176,  2691,  2596,
    2171,  2171, 15688,  2714,  2848, 11878,  1187, 11878,  1187,  2691,
    2691,  2691, -3433, 15688,  2690, 15688, 15688, -3433,  2960,  1652,
    2694,  1346, 47748, -3433,  2442,   -80, -3433,    65, 36696,   150,
   24393, 39766,  2689, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433,  3388, 24393,  2777,  2779,  2787, -3433, 29940, -3433, -3433,
   -3433, -3433, 29940,   -15, -3433, -3433, -3433, -3433, -3433,  2793,
   -3433, -3433, -3433,  2700, -3433, 36696,  2700, -3433, -3433,  2700,
   -3433, -3433,  2700,    72,  3838, -3433,   353,   357,  4023,  2737,
   -3433, -3433, -3433, 24393, -3433,  3120,   -69, 24393,  2539,  2717,
   -3433, -3433, -3433, -3433, -3433,  2307,  2820, -3433,  3339, -3433,
   11243,   625, -3433, 36696, 36696, 24393, 24393,    27, -3433,  2121,
    2722, -3433, -3433, -3433, -3433, -3433,  3697, 17593,  2724, 36696,
     851, -3433, -3433, -3433, -3433, -3433,  1559, -3433, 38538, -3433,
    1652,    65,  2727,  2728, -3433, -3433,  3105,   -90, -3433,  2735,
    2736, -3433,  2716,  2731,  2733, 44064, 11243, -3433,   843, -3433,
   -3433,    65, -3433, -3433,  8703,   625,  3181, -3433,  1652,  2742,
   47748, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433,   700, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433,   812, -3433, -3433, -3433, -3433, -3433,
    2963,  2616,  2083,  3181,   812,  1637, 24393,   812,   812, -3433,
   -3433,  2615,  2791, -3433, -3433, -3433,  2904,  2750, -3433,  3197,
    3340,  2616, -3433, -3433, -3433, -3433,    65,    65,  3045, -3433,
     625,  2878,  2880,  2881,  2883,  2885,  2927, -3433, -3433,   625,
     625, -3433, -3433,    65, -3433,   990, -3433, -3433, -3433, -3433,
     625,   625,   625,   625,  2432,   625,   625,  1721, -3433, -3433,
      65,    65, -3433,  1366, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433,  1199, -3433,  3008, -3433,  2434,    65,  3328,  3016,    65,
      65,  3328,    65,  3023,  3029,    65,    65,  2859,  3286,    65,
    3170,  2882,  1330,  3174,    65,  3041, -3433,  2892,  3294,    65,
      65,    65,    65,    65,  3328,  3061,  3393,    65, -3433,    65,
    3063,  3062,   205,  3071,  3082,    65,    65,    65,    65,   145,
   47748,    65,  3095,    65, -3433, -3433,  4257, -3433, -3433, -3433,
   -3433, -3433, -3433,  1026, 22535, -3433, -3433, -3433, -3433,   890,
   -3433,  3036, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433,  2827, -3433, -3433, 11243,  2838,  2432,
     625,  2432,  2432,   625,   625,  1739,   625,  2432,  2432,   625,
     625,   625,   625,   625,   625,   625,  2432,  2432,   625,  1997,
     625,  2432,  4531, -3433, -3433, -3433, -3433,   194,    65,    65,
      65,    65, -3433,  1959, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, 39766,  3206,  2114,   -71, 39766, -3433, 47748, -3433,
    1181, 47748,  2852,   723,  2929,   901,   901, -3433, 24393, 24393,
   24393, -3433,   964,  3234,  3237, -3433,  3109,   933,  3109,   964,
     964, 11243, -3433,  1243,  2756, -3433, 44678, -3433, -3433, -3433,
   -3433,  1383, 47748,  2898, -3433, 31784, -3433, -3433,  1243, -3433,
    2855, 13148, -3433,  2858, -3433, 11243, -3433, -3433, -3433,  1692,
   11243, 11243,  3341,  1901, -3433, 39152, -3433, -3433, -3433, 11243,
   39152,  1901, 11243, -3433,  2860, -3433,  3260,  3261, -3433, -3433,
   -3433, -3433, 11243, 11243, -3433, 11243, 11243, -3433, 11243, 11243,
   11243, 11243, 11243, -3433, -3433, 15688, -3433,  2861,  2865, -3433,
   -3433, -3433,  2866, -3433, 11243, -3433, -3433, -3433, -3433, -3433,
   -3433, 11243, -3433, 11243, -3433, 11243, 11243, -3433, 11243, 11243,
   -3433, -3433, -3433, 13783, 11243, 11243,  2867, -3433, -3433, 11243,
   11243, 11243, -3433, 11243,  1573, 11243,  1849, 11243,  1888, 11243,
   -3433, 11243, -3433, -3433, -3433, -3433, 11243,  1894,  2307,  2432,
    2872, -3433,  1742, -3433, -3433,  2255, -3433,   946,  2875, -3433,
   -3433,  1775, -3433, -3433, 39766, 11243, -3433, -3433, -3433, -3433,
   -3433, -3433, 15688,   347,  2884, 15688, -3433,  2596,  3249,  3249,
    1604, 11243,   176,  2596, 11243,  2887,  2877, -3433, 11243, 47748,
   -3433, -3433, -3433, -3433, 39766, -3433, -3433, -3433, -3433,   150,
   -3433,  2446, -3433,  2539, -3433,  3346,  2879, -3433, -3433, -3433,
   -3433, -3433, -3433, 47748, -3433,  2957, -3433, -3433, -3433, 23154,
   23154, -3433, 23154, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433,  2616,  2121, -3433,  2891,
   -3433, -3433,  2629,  2981,  2906,  3258, -3433, -3433, -3433, 47748,
   15688, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
    3483,  2899,  2901,  3380,  2907,  1652, -3433,  2980, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433,   914, -3433, -3433,  2908,
    2908, 19446, -3433, -3433, -3433, 47748,  3384, -3433,  3342,  3351,
   23154, 23154, 23154,   967, -3433,    47, -3433,   160,  3309,  2616,
   -3433,  3357, -3433, -3433, -3433, -3433,   -54,  3002,  3003,   -19,
   -3433, -3433,  3305,  3134, -3433, -3433, -3433,    65,  1652, -3433,
    2520,  8703,  2921, 28092, -3433, 15688,  1862, -3433,  1652, -3433,
   -3433,  1739, -3433,    34, -3433, 35468, 35468, -3433,  3196, -3433,
   -3433, -3433, -3433,  2737,  1637, -3433, -3433,  3405, -3433,  3408,
   -3433,  2932,  3410, -3433,  3180, 25010,  2432,  3255, -3433, -3433,
   -3433, 38538, 36082, -3433, -3433, -3433, -3433,  3466, -3433,  3475,
     246, -3433, -3433,  1705,   842, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
    2120,  1705,  1705,   903, -3433,   146, -3433, -3433, -3433, -3433,
    3422, -3433, 25627,    87, -3433,   265, -3433, 25627, -3433,   152,
     152, -3433, 45292, 25627,    87,  1739,  2432, 25627,  2432, 45906,
      87,   625,   625,  2331,    65,  2432, -3433, -3433,  3343, 47748,
    3344, 25627, 25627, -3433, 39766, 47748, -3433,    65,  1263,  2432,
   46520,  1739,  1739, 25627,    87, 25010,  2245, -3433,   625,    87,
   -3433, -3433, -3433, -3433, 24393,    87,    87,  2664,  2381,  2453,
    2527, -3433, -3433, -3433,  2432, 45906, -3433, -3433,  6199, -3433,
   -3433, -3433, 18829, 47748,  1177,   949, -3433,  2954,   706,   288,
    3039,  1554,  2966,  2967, 47134,  1652,  2432, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433,   625,  2307,  1705,
    1705,  2020, -3433,  3233,  3401,    65, -3433,  2101, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433,  3064, -3433,  3586,
    3156,  2976, -3433, -3433,   236, -3433, -3433,  1013, 24393, 18212,
   -3433,  3223, -3433,  2758, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433,  -225,  1234, -3433,  2129, -3433, -3433, -3433,  3364,
     964,  3109,  3109,  3365,  3250,   889,  1652, -3433,  2265, -3433,
    2679, -3433, -3433, 32398, -3433,  2975,  1243,  2737,  1231,  2737,
    2994, -3433, 11878,  1249, -3433,  1652, 11243,  1652,  1781, -3433,
    2990,  2990,  2993, -3433,  2995,  2990,  3386,  2993,  3390,  3001,
    3004,  1251,  3005,  3006,  1616, -3433, 11243, 11243,  1288,   351,
    1290,  -118,   955,   997,   363, -3433,  1299,  2962, -3433, -3433,
    1319,  1323,  1325,  1327,   999,  1334,  1765, 11878,  1352,  1061,
     371, -3433,  1406,  1034,  1040,  1430, 11243,  1435, 11243,  1513,
   11243,  1519,  1523,  1585,  3010,  3010,   164, -3433,  3012, -3433,
   -3433, -3433,  3013, -3433, -3433,  2208,  2255, -3433, -3433,  3011,
   -3433, -3433,  3014,  1652,  3015, -3433, -3433, 11243, -3433,   185,
   -3433, -3433, 15688,   373,  3019, -3433,  1652, -3433, -3433,  3020,
    1616, -3433,   250, -3433, -3433, -3433, -3433,     9,  3802, 29940,
   -3433,  1780, -3433, 36696,  3017, -3433,  3026,  3077,  3097,  3100,
    3027, 11243, -3433, -3433,  3297, 24393, -3433,  3442, -3433, -3433,
   -3433, -3433,  3038,  3033, -3433, -3433, -3433,  2596,  3394,  3281,
   -3433, -3433,  2307, 47748, 36696, -3433,  2679, 25010, -3433,  3046,
   -3433,  3046,  1267,  3051,  1803, -3433, -3433, -3433,  3030,  2242,
    1816, -3433, 17593,  3300, 36696,  3484,  3486,  3491, -3433,  2737,
    2737,   142,  3090,  3446, -3433, -3433, -3433, -3433, -3433,  3057,
    3066,   133,  3270, -3433, -3433, -3433, -3433,  8703, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433,  2616, -3433, -3433, -3433, -3433,
   -3433,  2616, -3433,   812,   625,   625,  1873,   625,  3535,  3570,
    3068, -3433,    65, -3433, -3433, 11243, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433,  1199, -3433, -3433, -3433, -3433, -3433,
    3074,  3443,  3444,   152, -3433, 25627, -3433, -3433, 25627, 25627,
   -3433, -3433,    54, 45906, -3433, -3433, -3433, -3433, -3433, -3433,
    3070, -3433, -3433,  2307, -3433, -3433, 36082,   625, -3433, 25627,
    3070, -3433, -3433,   526, -3433,  3084,   625, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, 45906,  3080, -3433,
    1455, -3433, -3433,  2066, -3433, 45906, -3433, -3433, -3433, 45906,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433,  3075,  2618,  1677, -3433,  3067,
    3087, -3433, -3433, -3433, -3433, 47748, -3433, -3433, 24393, -3433,
   -3433, -3433,  5316, 47748,  3304, -3433, 11243, 11243,  3345, 47748,
    3349, -3433,  3633, 47748,  3698, 45906, -3433,  3089, -3433,  3096,
   -3433,  1829, -3433, -3433, -3433, -3433, -3433, -3433, -3433,  3088,
   47748,  1705,  2124, -3433, -3433,   625,  1013, -3433, -3433, -3433,
   -3433,  3353,  3358, 47748, -3433, -3433, -3433, -3433,  3232, -3433,
   24393, -3433,  3259, -3433,  3098,  1074,  4550, -3433,  3104,  3106,
    3107,  1775,  2491, -3433,  1243, -3433,   964, -3433,  3479,  3496,
     964, -3433, -3433, -3433, -3433,  2208, -3433, 31784,  2737,  3371,
   -3433, -3433,  3249, -3433,  1652, 11243,   918, -3433, -3433,   403,
    3387, -3433,  1106, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433,  3122,  3249,  3249, -3433, -3433,
   11243, -3433,  3693,  3284, 11243, 11243, -3433, 11243, -3433,   983,
    3124,  3149, -3433, -3433, -3433, -3433, 11243, -3433, -3433,  3249,
   -3433, 11243, -3433, -3433, 11243, -3433, 11243, 11243, -3433,  1603,
   -3433,  1618, -3433,  1620, -3433, -3433, -3433,  2307,  3127,  3500,
   -3433, -3433, -3433,  2307,  3311, -3433, -3433,  2307,  2432,  2519,
   -3433, -3433,  -153, 47748, -3433, -3433,  1864, -3433, -3433, 11243,
   -3433, 40380, -3433, -3433, -3433,  3493,  3757, -3433,  3352, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, 47748,  1203,  3145, 33012,
   36696, 36696, 36696, 14418,  1652,  3630, -3433, -3433, -3433,  3442,
    3518, -3433,    56, -3433, 47748,  3142,  1711, -3433,  1875, -3433,
   -3433,  3144, -3433,  2208,  3147, -3433,    65, 14418,  2908,  3259,
   -3433, -3433,  1267, 25010, 31170, -3433, -3433, 47748, -3433,  3591,
    2390, 36696, 36696, 36696,  2616,  3582,  2981,  2981, -3433, 28708,
   -3433, -3433,  3307, -3433, -3433, -3433, -3433, -3433, -3433, 28092,
   44064, -3433, -3433, -3433, -3433, -3433, -3433, -3433,   625,  3631,
    3397, 25010,  2737, 14418,  1652,  3160,  1455, -3433,   -94, 11243,
   25627, -3433, -3433, -3433,  3163, -3433, -3433,  3675,  3676, -3433,
   25627,  1737, 47748, -3433,  3083, -3433, -3433, -3433,  3262, -3433,
    5316, -3433, 25010, -3433, -3433, -3433, -3433, -3433, 47748, -3433,
   24393, -3433, 18829, -3433,  3168, -3433,  2990,  2990,  2990, -3433,
   -3433, -3433,  2993, -3433,  2995,  3411, -3433,  2995,  2995, -3433,
   -3433, -3433, -3433, -3433,   403,   424, -3433, -3433,   403, -3433,
   -3433, -3433,   208,  1223,  2995, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433,  2990,  2993,  2993, -3433, -3433,   403,  2990, -3433,
    2990,  2404, -3433,   422,   122,  2990,  2990,  2990,  3172,  3167,
   -3433,  1652,  3249,  3732, -3433, -3433,  3324,   625,  3673, -3433,
    1912, -3433,  3182, -3433, 47134, -3433,  2432,  2120, -3433, -3433,
   -3433, -3433,  3321,  1375, -3433,  3372,  3184,  3188, -3433, -3433,
     625,  3190,  3203,  4257, -3433, -3433, -3433,  3818, -3433, 47748,
   47748, 47748, -3433, -3433,  2626,  2438,  3251,   964,   964,  2652,
    3256, 11243, 11243,  3207, -3433,   815,  2519,  2855, -3433,  3580,
    1307,  1652,  3214,  3215,  3216,  3217,  3821,   216, -3433,  3822,
   39152, -3433, -3433, -3433,  3227,  1995, -3433,  3228,  3229,  1622,
   -3433,   338,  3230,  1624,  1044,  1999,  3529,  3610, -3433,  3452,
   -3433,  1639,  1310,  1674,  1707,  1717,  1723, -3433, -3433, -3433,
   -3433, -3433,  3238, -3433, -3433,   468, -3433,  3239,  1048,  1234,
   -3433, -3433,  2005, -3433, -3433, -3433,  3695,  3598, -3433,  3677,
   -3433, -3433, -3433,   603,   603,   603,  1862,  1652,  2018, -3433,
   -3433, -3433, -3433,  3638, -3433, -3433,  3246,  3339, 47748, -3433,
    3281, -3433,  2519, 25010, 14418,  3252,  3253, -3433,   -42, -3433,
   -3433,  3243, -3433, -3433, 36696,  2390,  2390,  2390, -3433,  3844,
    3684, -3433, -3433, 39766,  3263, -3433, -3433,  3564, -3433, -3433,
   -3433,   625,  3741, -3433, -3433,  3371, -3433, 11243, -3433,  2307,
    3281, -3433,  1727,  3268,  3269, 47748,  3273,  3276, -3433,  2955,
    1177, -3433, -3433, -3433, 24393,  2404,    87, -3433, -3433,  3070,
     914,  3279, -3433, 47748,  3602, -3433, -3433, -3433, -3433,  1023,
   -3433,  3282,  1023,  1023, -3433,  2364, -3433,  3313,   403, -3433,
   -3433,  3315, -3433, -3433, -3433,  1023,  3285,   403, -3433, -3433,
   -3433, -3433,  1023, -3433, 39766,  1647,   625,  2854, -3433,  3332,
   -3433,  3797,  1600,  3668, -3433,  2404, -3433,  3669,  3563, -3433,
     403, -3433, -3433,  3889, -3433,   403,  3889,  1023,  3565, -3433,
    1023, 47748, -3433, -3433, -3433, -3433, -3433, -3433, 47748, -3433,
    1002, -3433, -3433, -3433,  2042,   625, -3433, -3433, -3433,  3291,
    3292, -3433, -3433, -3433,   288, -3433, 47748,  5316, -3433, -3433,
   -3433,  3223, -3433,  1116,  2044,  1455,  3295,  2060,  2072,  -153,
   -3433,  3338, -3433, -3433, -3433,  3347,  1652,  1652, 47748, -3433,
     966,  1048, 35468, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, 39152, -3433,  3889, -3433,  3571, -3433, -3433, -3433,
   11243, -3433, -3433, -3433, 11243, -3433, -3433,  3600,  3762, -3433,
   -3433, -3433, -3433, -3433, -3433,  3301, -3433,  2432,   160,   160,
   -3433, -3433, -3433, -3433, -3433,  3567,  1256,  3325,  3325,  3325,
   -3433, 14418,  3690,  3395, -3433, -3433,  3312,  3354, -3433, -3433,
    1048, -3433, -3433, -3433, -3433,  2390, 11243, -3433,  3371,  2331,
   -3433, 28708, -3433, -3433,   625,  3580,  1455, -3433,  2085, -3433,
   47748, 47748,  2113, 47748, 47748,  2777,  2779,  2787,  1997,  1997,
   -3433, -3433, -3433, -3433, -3433, -3433,  3706, -3433, -3433,  2134,
   -3433,    64,  3579, -3433, -3433, -3433, -3433,  1023, -3433,   338,
   -3433, -3433, -3433, -3433, -3433,   338, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433,  3595,  3356, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
    3319, -3433, -3433,  3440, -3433, 53888, -3433, -3433,  1122,  3359,
   -3433, -3433, -3433, -3433,  1062, 47748, 24393,  3345,  3510, -3433,
    3083, -3433,   -42,  1074,  3259, -3433,  1105, 47748, -3433,  3603,
     227,   254, -3433, 11243,  3330, 11243,  3334,  2143, -3433, -3433,
     152,   152, -3433,   966, -3433, -3433, -3433, -3433,  3331,  3336,
    1455,  1776, -3433, -3433, -3433,  3335, -3433, -3433, -3433,  3426,
    3428, -3433, -3433,  3430, -3433, -3433,   147,  2417, -3433, -3433,
   -3433, -3433,  3402, 24393, 15688,  3449, 47748,  1206,  3226, -3433,
    1496,  1455, 11243,  2616, 36082, -3433, -3433, -3433, -3433, -3433,
   -3433,  2149,  2154,  1105,  2192,  2196, -3433, -3433, -3433,  1177,
    3360, -3433, 47748, -3433, -3433, -3433,   299, -3433, -3433,  2198,
   -3433,  2205, -3433, -3433, 11243,  3829,  3382, 47748,   137, -3433,
   55116, 55116, 47748, -3433, -3433, -3433, -3433,  5718, -3433, -3433,
     859, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433,  3959, -3433,  3350, -3433, -3433,  1122,  3361, -3433,
    1535, -3433,  2242, -3433, -3433,  5316,  3807,  1554, -3433, -3433,
   -3433, -3433, -3433,  3363,  2242,   625,    65, -3433,  1105, -3433,
   -3433, -3433,  1455,  3366,  3612, -3433,   227, -3433, -3433, -3433,
     254, -3433, -3433,  1234,  1652, 47748,  1652, 47748, -3433,  3810,
    3810, -3433, -3433, 11243, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433,   358,  3628,  2432,  2432,  2432,  2432,  2417, -3433, 25010,
    2756, -3433,  2307, -3433,  2214, -3433, -3433, -3433,  3454,    65,
    3868,  3871,    65,    65,    65,    65,  3374,  3226, -3433,  3852,
   -3433, -3433, 11243, -3433, -3433,  1652,  3605, -3433,  3937,  3585,
    1105, -3433,   227,   254, -3433,  3281, -3433,   159,   159,   403,
     338,   403,  1652, 11243, -3433, 11243,  3414, -3433, -3433,  3824,
   47748, -3433, -3433, -3433, -3433, 11243, -3433, 53888, 53888, -3433,
   -3433, -3433, -3433,  3981, -3433,  3389,   -42,  3951,  3645,  3963,
   -3433,  3437, -3433, -3433,  3633,  5316, -3433, -3433, -3433,  2432,
     250, -3433, -3433, -3433,  1210,   250, -3433,   250, -3433, -3433,
    2235,  2238,  1526, -3433, -3433,  1455, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433,  3392, -3433,    65, -3433,  3398, -3433, -3433,
   47748,  3403, -3433,   625,    65,    65,  2501,  2501,  2307, 39766,
    3497, -3433, -3433,    65,  1455,  4019, -3433,  1172,  3770, -3433,
   -3433, -3433, -3433,  2252, -3433,  4033, -3433,   141,  3682,  3683,
   -3433, -3433, -3433,  1652,  1652, -3433,   286, -3433, -3433,  3814,
    3902, 11243,  1652, 50818,  3416, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, 54502, 11243,
   -3433,   859,  3959, -3433, -3433,  3685, -3433,  3689, -3433, -3433,
   -3433,  3935, 53888, -3433,  3936, -3433,   -42, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433,  4028, -3433,  4031,  3450,  3456, -3433,
   25010, 14418,  2331, -3433,  3449, -3433,  3457, -3433, -3433,   -64,
   -3433,   625,   625, -3433, -3433, -3433, -3433, -3433,  2273, -3433,
   39766, -3433, -3433,  4054,  4056,  3954,  4060,  1172, -3433,  1265,
   -3433, -3433, -3433, -3433, -3433,  3525,  3984,  3506, 11243, 53888,
   -3433,  3966, -3433,  3896,  1652,  3839,  3481, -3433,  3480,  1652,
    4002, 55116, 55116, -3433, -3433, -3433, -3433,  3980, -3433, -3433,
   -3433, -3433, -3433, 47134, 47134, -3433, -3433, -3433, -3433, -3433,
    2275, -3433, 15053, -3433, -3433, -3433, -3433, -3433, 39766, -3433,
    3497, -3433,  3499,   338,   338,  4086,   338, -3433,  4087,  4088,
    1265, -3433,   159,   159, -3433,   293, -3433,  1652, 51432,  4093,
   47748, -3433,  3589, -3433, -3433, 11243,  4000, 40994, 52046,  3511,
   -3433, -3433, -3433,  3691, -3433,  3437,  3520,  2277,  3692, -3433,
    3457, -3433,  3516, -3433,  2596,  3226, -3433, -3433,  3813, -3433,
   -3433,   338, -3433,   338,   338, -3433, -3433, -3433, 11243, -3433,
    4030,  3624, -3433,  3545, -3433, 53888,  1652, 53888, -3433, -3433,
    3976,  3553,   926, -3433,  3550, -3433, -3433, 53888, -3433, -3433,
    3969,  3937, -3433, 15053,  3558, -3433, -3433,  3559,  3561, -3433,
   -3433, -3433,  1652,  4140, 53888, 47748, 48976,  4047, 52660,  4011,
   47748,  5316,  4012,  4013, -3433, 53888, -3433,  4155,  3770, -3433,
   -3433, -3433,  3813,  3653, -3433, 49590, -3433,  2675,  3765,  3597,
   -3433, -3433,  4085,  1081, -3433, -3433,   338,  3985, -3433, 53888,
   53888, -3433, -3433, -3433, -3433, 33626, -3433, -3433, -3433, -3433,
   -3433,   967, -3433,  3849,  3578, 50204, 53274, -3433, -3433, -3433,
   30556, -3433, -3433, -3433,  4021, -3433, 11243, -3433,    36, 20063,
    3734, 33626, -3433, -3433,  1652, -3433, -3433, -3433, -3433, 39766,
    2281, -3433, -3433, 25010, -3433, -3433, -3433, -3433, 23774,  3581,
   -3433,    65, -3433, 25010, -3433, -3433, 14418, -3433, -3433
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3433, -3433, -3433, -3433, -3433,   215, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433,  1882, -3433, -3433, -3433, -3433, -3433,
    2103, -3433,   780, -1819, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433,   781,  1703,  3566, -3433,   516,
   -3433,   197, -3433, -3433, -3433, -2958,    67,  -113, -3433, -3433,
     768,    22,  3257,  -112, -3110, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433,   527,   531, -3433, -3433,   349, -3433,
   -3433, -1049, -3433, -3433, -3433, -3433, -3433, -3433, -3433,  -283,
    -243,  1925, -3433, -3433, -3433,  4194, -3433,  3662, -3433, -1734,
    2389, -3433, -3433, -3433, -3433, -3433,  2454, -1705, -3433, -3433,
   -3433,  1418, -3433, -3433, -3433, -3433,  -483,   374, -3433,   375,
   -3433,   378, -3433,   379, -3433,   380,   381,   382,   383, -3433,
     384, -3433, -3433,  -227, -3433, -3433, -3433, -3433,   385, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433,  -127, -3433, -3433,    39,
   -3433, -3433,  -107,   395, -3433,   -66,   397, -3433,   398, -3433,
      17, -3433,    24, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433,  3267, -3433, -3433, -3433,
   -2298, -3433, -3433, -2397,  2796, -3433, -1816, -3433, -3433, -1936,
   -3433, -3433, -1807,  -625, -3433, -3433,   590,   675, -3433, -1412,
   -1920, -1906, -3433, -3433, -3433, -2006, -1995, -1422, -1393, -2258,
   -3433, -3433, -3433,   393, -3433, -3433, -2565,  2224,  2800, -3433,
   -1992, -3433, -3433,  1276, -3433, -3433,  1432,   735,  1433, -3433,
    1029,  2996, -1222, -3433, -3433, -3433, -3433, -3433, -3433,   107,
     362,    16, -3433, -3411,   741, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -2437, -3433, -3433, -3433,  -141, -3433, -3433,
     -52, -3433, -3433,   -96, -3433,   217, -2342, -3433, -3433, -3433,
   -3433,  2766, -1331, -3433,  3795, -3433,  -533,   860,  2263, -2166,
   -1415, -3433,  -855,  -848, -2510, -3433, -3433, -3433, -3378,  1237,
    1649, -3433,   970,  2262, -1919, -3433,  1728, -3433, -3433,   989,
   -3433, -2816, -3433, -3433, -3433,   951, -3433,   956, -3433, -3433,
   -3433, -1058,   916, -2532,  1283,  -675, -3433,   503, -2553, -2552,
   -3433,   727, -3433,   678, -3032, -3386, -3433,  -571, -2132, -2427,
      63, -3433, -3433,   692, -3211,  1856, -3433, -3433, -3433, -3212,
   -2047,  1564, -3433, -3433,  1147, -3433, -1641,  1146, -3433, -3433,
   -3433,  1155, -3433,   247, -3433, -3433, -3433, -3433, -2815, -3433,
   -3433, -1473, -2011, -3433, -3433,  4346,  4347, -1012, -2740, -2796,
     248,   249, -3433, -3433, -3433,  2799, -1417,   323,   314,   319,
    2220, -1198,   470, -2407, -3433,   523, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433,  2306, -1466, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -2430, -2434, -3433, -3433,  1773, -3433, -3433, -3433,
   -1921, -1441, -1437, -1896,  -497, -2186, -3375, -3433, -3433, -3433,
   -3433, -3433, -3433,  2935, -3433, -3433, -3433, -3433, -3433,  3792,
   -3433,  2942, -3433, -3433, -3433, -3433, -3433, -3433, -3433,   757,
    1973, -3433, -3433, -3433, -3433, -3433, -3433,  1039,  2841, -3433,
   -3433, -3433,     2, -3433, -3433, -3433, -3433,  2540, -3433, -3433,
   -3433, -3433,  2893, -3433, -3433, -3433, -3433, -3433, -3433,  1541,
   -3433,  2012, -3433, -1457, -3433, -3433,  1128, -3433,  -957,  1966,
    3791,  2104, -3433, -3433,  -587, -3433, -3433, -3433,  3787,  2937,
    3434, -3433, -1681, -1544, -3433,  3526,  -844, -2194,  -454,  -650,
   -1038,  1180,  -438,  3799, -3433, -1124, -1092, -3433, -3433,  -638,
   -3433, -3433, -3433,  -621, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433,  1584, -3433, -3433, -3433, -3433,
   -1199, -3433, -3433, -3433, -3433, -3433, -3433, -3433,  -727, -3433,
    2203, -3433,  -445, -3433,  3302, -3433, -3433, -3433, -2020, -1363,
    2244,  1294, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -1561, -3433, -2085, -3433, -3433, -3433, -3433, -3433,  2126,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -1411, -3433, -1828,
     350, -3433,   496, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
      71,   979,    73, -2578, -1075,  1800, -3433, -3433, -1266,  3348,
   -2320, -3433, -3433, -3433,  2106, -3433, -3433, -3433, -3433, -3433,
    1063, -2988,  2969, -3433, -3433, -3085,  -879, -2308,  -813, -3433,
   -2394,   611, -1794, -1797,  -398, -1253, -2446, -3433, -3433, -3433,
   -3433,   -53, -3433, -3433, -3433,   626,  1998, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,  -556,  -775,
   -3433, -3433,  2256,  2701, -3433,  3218, -3433, -1036,  3467, -3433,
   -3433,  3468, -3433, -3433, -3433, -3433,  3139,  3118,  2068, -3433,
   -3433, -2674, -3433, -3433,  2024, -3433,   873,  -873, -1799,  1159,
   -3433, -3433,  1162, -3235, -3433, -3433,  3477, -3433, -3433, -3433,
    1117, -3433,   162,  3853,  3482, -3433, -3433, -3433, -3433, -3433,
   -3433,  2862, -1037,  3774, -3433, -3433, -3433, -3433, -3433, -3433,
    2515, -3433, -3433, -3433, -3433, -3433, -3433,  3065,  3869,  -575,
   -1269, -3433,  -744,  3052,  2517,  -853, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433,  2671,  1091, -3433, -3433, -3433,  3131, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433,  1194,    18, -3433,   151,   -11, -3433,
      90, -3433, -3433, -3433, -3433, -3433,   -77, -3433, -3433,   -76,
   -3433,  -952, -1371,   805, -1225, -2060, -3433,  1182,  3798, -2605,
    -685, -1140, -1137, -1867,    70, -3433, -3433,  2970,  1724,   106,
    -439,  -349,    -6, -2832,  -123,  -573, -3433, -2487, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433,  2016, -3433, -3433, -3433,
    1160, -3433,  3890, -3433,  2754,  1163,  3894, -3433, -1329,  2586,
    2032,  2035, -3433, -3433,  2040, -2017, -3433, -3433,   139, -3433,
    2654, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433,  2620,  3623,  3146,
   -3433,  2678, -3433, -3433, -3433, -3433, -3433,   415, -3433,   498,
   -3433, -2519,  2934,   477, -3433,  1241,  -594,  -826, -3433, -3433,
     411, -3433, -3433,   330,  3918,  3632, -3433, -3433, -3433, -3433,
   -3433, -2818,  -845, -3433, -3432, -2629, -1682, -3433, -3433, -2164,
   -3006, -3433, -3433, -1011, -3433, -3433, -3433, -3433, -1978, -3433,
   -3433, -3433,    84,  3982,  3983, -3433, -3433,   662, -3433,   356,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433,   479,   808, -3433,
   -3433,  3846, -3433, -3433, -3433, -3433,  3847, -3433, -3433, -3433,
   -3433, -3433,  3850, -3433, -3433, -3433, -3433, -3433,  1788, -3433,
   -3433, -3433, -3433, -3433, -3433, -3433, -3433
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2622
static const yytype_int16 yytable[] =
{
     493,   622,  1029,  1037,   927,  1015,  1458,   887,   923,  1360,
    1363,   956,  1465,  1701,   537,  1577,  1702,  1347,   545,  1375,
    2174,  1917,  1587,   538,  1789,  1654,  2084,   559,   491,  1106,
    1826,  1676,  2290,   557,   571,  1562,  1563,   574,  2387,   564,
    2081,   571,   972,  1422,  1891,  1388,  2577,  2066,   589,  2643,
    1788,  2067,  1724,  1064,  2994,   987,  1978,  2947,  2842,  1732,
    1998,  3285,  1998,  2740,  3113,  2937,  1977,   664,  2742,  2873,
    1423,  2918,  2919,  2056,  2704,  2947,  2947,  1946,   792,  1618,
    1834,  2528,  2335,  1004,  1007,  1979,  2534,  1394,  3596,  1999,
     611,  1999,  1734,  1735,   543,  2529,  1738,  1739,  1740,  1741,
    3424,  1743,  1744,  1746,  1748,  1749,  1750,  1751,  1752,  1394,
     137,  2543,   614,  1470,   493,  2547,  3105,   493,   621,   627,
    1471,  2896,  2480,  2417,  1045,  2130,  2562,  2801,  2663,  2990,
    2966,  2995,  2695,  3613,  1924,  2125,  3794,  1955,  2573,  2664,
    2705,  3479,   616,  2825,  1201,   618,  1168,  1169,   500,  1159,
    1160,  1161,  1934,  2922,  2131,  3672,  1829,  2491,  2492,  1284,
    1937,  1938,  1202,  2165,  4070,  2135,   610,  1439,  2505,   556,
    1990,  1467,  3634,  3639,  2503,   563,  3640,  2524,   641,  3139,
    1424,  3145,  1840,  3146,  3200,  2428,  1766,  2652,  2889,  3808,
    2516,  2521,  2522,  2916,  3337,  3650,  3227,  2606,  3280,  2401,
    2326,  3671,  -902,  2947,  2947,  3148,  3529,  2542,  3305,  4214,
    2545,  2546,  2374,  2548,  2660,   632,  2551,  2552,  1168,  1169,
    2555,  1356, -2569,   552,  2581,  2564,  3334,  2955,  2661,  2190,
    2568,  2569,  2570,  2571,  2572,  3822,  3411,  3740,  2576,  1226,
    2578,  3598,  1168,  1169,  1203,  2277,  2587,  2588,  2589,  2590,
    4353,  1080,  2594,  1203,  2596,  3973,  3162,   549,   838, -1978,
    3083,  2006,  4313,  2951,  2952,  2349,  1435,  3641,  1008,  1467,
    1310,  3853,  1419,   633,   894,   878,  1217,  2440,  3454,  1446,
    2591,  1610,   936,  1810,  3296,  1168,  1169,  1168,  1169,  1168,
    1169,  3201, -1529,  3599,  1293,  2617,  1285,  2620,  2621, -2505,
    -568,  4035,  4525,  2631,  2632,   598,   850,  2797,  1168,  1169,
    1872,  3056,  2640,  2641,  3247,  1467,  1712,  2645,  2667,  2647,
    2648,  2649,  2650,  1150,  1168,  1169,  2960,  4128,  4035,  3792,
    2703,  1290, -2569,  1168,  1169,  1873, -2355,  2305,  1594,  1595,
    1596,  1969,   666,   553,   581,  2339,  -569,  2892,  2375,   136,
    1607,  2072,  3111,  3914,  1206,  1483,  1484,   132, -1727,  1168,
    1169,  2582,  3088,  1168,  1169,  3290, -2006,  1168,  1169,  2940,
    2195,  2145,   573,   946,  1973,  1552,  1553,  1554,  2082,  1168,
    1169,  1662,   138,   646,  1666,  1168,  1169,  1168,  1169,  1168,
    1169,  3076,  3077,   497,  2146,  1549,   498,  3129,  2901,  3131,
    1146,   667, -1727,  2083,  1617,  1685,  1686,  3112,  2175,  1690,
    1168,  1169,  3949,  2196,  1205,   851,   582,  1323,  1106,  2902,
    3929,  1168,  1169,   824,  3486,  4117,  3842,  1704,  1705,  1427,
    1168,  1169,  4319,  2893,  2909,  3846,  3487,  1399,  1493,  4319,
    2402,  1305,   920,  3486,   133,  3486,  2340,  1284,  1440,  3974,
    3488,  2961,  3057,  2903,  1807,  3487,  1991,  3487,  3865,  2254,
    4031,   894,   878,  3867,  2592,   634,  2073,   599,  3089,  3488,
    3982,  3488,  1168,  1169,   937,  2668,  2350,  4036,  1713,  1447,
     894,   878,   894,  3635,  2941,  2792,  4129,  2278,  3200,  1947,
     852,  1970,  1874,  1886,  4526,  1294,  3455,  1168,  1169,  4314,
     621,  1049,   627,  1170,  4036, -2434,  1171,   664, -2355, -2435,
    1168,  1169,  1404,  1436,  4215,  1205,  1564,  3107,  1168,  1169,
    3297,   806,  1218,  2031,  2441,   627,  1168,  1169,   839,  2969,
     823,  3338,  1474,   668,  3615,  1345,   819,  3600,  1168,  1169,
     621,  1729,   829,  1357,  1919,  2376,  3941,  1922,   947,  2561,
    3975,  1204,  1926,  1978,  1611,   842,  2447, -2143,  3333,  3344,
    1204,  3335,  3336,  1977,  1790,  1025,  1737,  4349,  1009,  3294,
    3295,  1998,   888,  1168,  1169,  1147,  2326,  1420,  1939,  1940,
     943, -1140,  1979,  1758,  1285,  1168,  1169,   550,  3016,  2527,
   -2165,  1168,  1169,  3604,  4114,  3201,  1575,  2327,   960,  1170,
    1999,  3209,  1171,  2708,  3930,  2528,  4216,  3805,  3569,   621,
   -2283,   976,  2351,  1470,  2403,  3117,  3202, -2434,  3228,  2529,
    1471, -2435,   621,   611,   493,  1168,  1169,  1601,  1602,   611,
    3898,  1002,  1789,   611,   611,  2947,  4217,  2917,  1016,   976,
    1952,  2056,  1170,   621,  1170,  1171,  1170,  1171,  1642,  1171,
    2307,  2663,   989,  1046,  1047,  1048,  3327,  1656,  1788,  1054,
    1532,  2310,  2664,  1059,  2313,  1170,  2473,  2962,  1171,  1669,
    1670,  1671,  1769,  1168,  1169,   814,  2972,  1675,  1565,  4030,
    2976,  1170,  1566,  1936,  1171,  3440,  1216,  -902, -2006,  2191,
    1170,  1470,  2933,  1171,  2992,  2993,   834,  2949,  1471,   988,
    2269,  2130,  3306,   845,  4213,   999,  3006,  2953,  1107, -1529,
    1841,  2125,  2665,  3902,  4254,  3078,  1170,  1830,   860,  1171,
    1170,  3959,  2659,  1171,  1170,  2304,   944,  1171,  2136,  2322,
    2131,  3543,  3544,  3545,   554,  2606,  1170,  2660,  1043,  1171,
    2694,  2666,  1170,  1828,  1170,  1171,  1170,  1171,  1172,  1171,
    2897,  2661,  2975,  3136,  2977,  2987, -2505,  2113,  1847,  1361,
    3452,  2988,  2583,  1366,  1371,  1428,  2293,  1170,  2996,  1165,
    1171,  1167,  3575,  3576,  3577,  3001,  1391, -1529,  1170,  2954,
    1811,  1171,  3012,  1532, -2505,  -568,  1955,  1170,  3203,  1871,
    1171,  3741,  1168,  1169,  3028,  3030,  3032,  1210,   493,  1212,
    3033,   976,   493,   621,  3642,   493,   621,  3347,  3478,   572,
    3953,  1255,  2606,  3625,  3626,  2719,  3627,  1289,  3210,  3090,
    1172,  3145,  3073,  3439,  3145,  3145,  1211,   611,  1923,  1170,
    1215,  -569,  1171,  1225,  4340,  4064,  4044,   621,   611,  1457,
    3628,  3145,   611,  2963,  1172, -1529,  1168,  1169,  1900, -2006,
    3647,  3075,  1168,  1169,  1170,  3651,  3081,  1171,  3652,  2279,
    3670,  3673,  3675,  3676,  2183,  3677,  4104,  1170,  1168,  1169,
    1171,  3648,  3649,  3118,  3119,  1170,   621,  1808,  1171, -2143,
     621,   621,  4118,  1170,   948,  3933,  1171,  1172,  1400,  1172,
    3308,  1172,  4225,   621,   628,  1170,  1429,  2200,  1171,  4374,
    3771,  1957,  2255,  1296,  2181,  1709,  1710,  4220,  3612,  4222,
    1172,  1148, -2165,  2003,  1313,  2847,  1168,  1169,  1319,  1430,
    3202,  1168,  1169,  3603,  1709,  2220,  1172,  1990,  3619,  4028,
    1170,  3476, -2283,  1171,  2228,  1172,   611,  2873,  2232,  1534,
    3458,  2201,  1170,  1307,  1050,  1171,  2684,  3462,  1170,  2258,
    2259,  1171,  3332,  1168,  1169,  1248,   621,  4162,  1466,  1026,
   -2434,  1172,  2256,  1405, -2435,  1172,  1168,  1169,  2608,  1172,
    1530,  1168,  1169,  2327,  2226,  2275,  2276,   821,  3489,  2806,
    2807,  1172,  1170,  3159,  3160,  1171,  3578,  1172,   611,  1172,
   -2434,  1172,  3806,  4152, -2435,  3166,  3167,  3489,  2436,  3489,
   -1489,  2182,  3595,  3183,  3184,  3218,  3219,  4462,  1031,  1039,
    2960,  2290,  1172,  1168,  1169,  1168,  1169,   662,  2451,  3636,
    3409,  3669,  2141,  1172, -1140,  3506,  4463,  2199, -1805,  1907,
    1170,  3466,  1172,  1171,  2528,  3470,  3482, -1489,  2206,   611,
   -2143,  4259, -1529,  1719,  2420,  3776,  4346,  2207,  2529,  1583,
    1168,  1169,  2469,  3136,  1535,  3795,  1168,  1169,  1536,  3054,
    1168,  1169,  2890,  2465,   990,  3270,  2967,  2967,  2297,  1537,
    1973,  2467,  2490, -2165,  1172,  1377,  2663,  1168,  1169,  3562,
    1757,  2472,  1978,  1107,  2475,  2476,  2401,  2664,  1876,  2213,
    4279,  1908,  1977, -2283,  1917,  1917,  3465,  1107,   648,  1172,
    3469,  1998,  1168,  1169,  1168,  1169,  3055,  3316,  2685,   117,
    2314,  1979,  1172,  2527,  2218,  1559,  1027,  2534,  1394,  4301,
    1172,   810,  3346,  4265,  2335,  1581,  2194,  1791,  1172,  3034,
    1999,  1973,  3094,  2757,  2312,  2219,  1168,  1169,  1394,  4137,
    1172,  2562,  2270,  2721, -1805,  3920,  3893,  1703,  3288,  1170,
    3907,  3908,  1171,  1168,  1169,  2222, -2621,  2066,  4132,  4133,
     621,  2067,  2660, -1805,  1168,  1169,  3125,  4111,  1168,  1169,
    2861,   136,  1790,  2677,   656,  1172,  2661,   846,  2805,  4035,
    2380,  2700,  1839,  2056,  1356,  3045,  3343,  1172,  3909,  2672,
    2234,  3951,  2701,  1172,   496,  2325,  3483,   621,  1217,  2510,
    1538,  2198,  1761,  1170,  4150,  2923,  1171,   611,  2241,  1170,
    2673,  1531,  1171,  1991,  2329,  1362,  4157,  1882,  1973,   501,
    1010,   119,   611,  1990,  3482,  1170,  -473,  1172,  1171,  2130,
    1217,  2157,  2345,  2810,  2811,  2665,  1551,  1973,  2425,  2125,
    1168,  1169,  2245,  1107,   621,  2659,  1168,  1169,  3181,  2193,
    3095,  2298,  1168,  1169,  3122,  2421,  1168,  1169,  2131,  1217,
    1877,   520,  1470,  2511,  2666,  1168,  1169,  1168,  1169,  1471,
    2397,  2398,  1909,  1170,  1702,  1172,  1171,  3484,  1170,   649,
    1815,  1171,  1818,  1763,   611,  4259,  2419,  1883,  2857,  2208,
    2804,  2512,  3696,   611,  3572,  1539,  3454,  1011,  4138,   621,
    2814,  3697,   812,  4219,  1168,  1169,  1168,  1169,   611,   611,
    1170,  4547,  1392,  1171,  4210,  1168,  1169,  1044,  3929,   539,
    1018,  4303,  3273,  1170,  1185,  3507,  1171,  2402,  1170,   822,
     843,  1171,  4304,  2466,   847,  1168,  1169,  1861,  3915,  1168,
    1169,  1168,  1169,  1168,  1169,  2932,  1217,  1867,  1702,  1492,
    1168,  1169,  1959,  3128,  2609,  4036,   621,  3046,  3744,  2513,
    1319,   548,   637,  2686,   920,  1217,  1887,   888,  1168,  1169,
    1170,  3895,  1170,  1171,  3048,  1171,   493,   493,   493,   611,
     493,   611,  3722,  3723,  3483,  1319,  1918,  2702,  4015,  3259,
    1990,  2351,  1920,   493,  1172,   621,   920,  1822,   493,  1558,
    3520,  2531,  1086, -1489,  1901,  1902,  1903,  1170,  1905,  2246,
    1171,  2424,  2038,  1170,  3527,  2286,  1171,  1170,   611,  1378,
    1171,  1921,  1168,  1169,  4169,   920,  1925,  1973,   257,  4482,
     259,  1532,  3096,  1564,  1170,  3010,    44,  1171,  1702,  1590,
    2514,  3698,  3124,  2997,  1218,  4087,  1168,  1169,  1172,  1392,
     561,  1168,  1169,   931,  1172,  1904,  2299,  1906,  4175,  1170,
    2041,  1170,  1171,  2248,  1171,  3495,  4088,  4139,  2209,   621,
    1172,  3877,  2300,  2606,   650,  3353,  1218,  4170,  3123,  4171,
     621,   965,  1214,  1897,  2217,   611,  3485,  1087,  2077,   611,
    2967,  1884,  1431,  1170,  1935,  2606,  1171,  4204, -2569,  4391,
    4391,  2403,  3930,  4015,  4015,  1218,  1357,  3339,  3833,  1991,
    1170,  2302,   920,  1171,  3455,  1532,  2558,  2998,  1172,  1188,
   -1805,  1170,  1590,  1172,  1171,  1170,   611,  4107,  1171,  1168,
    1169,   920,   932,  2249,   584,  1168,  1169,  3097,  2253,  1168,
    1169,  3351,  2527,  1643,  4305,   621,  1644,   493,   493,  3357,
    2143,   493,  4033,  3359,  3910,  1172,  2082,  4416,  4417,  1950,
    2152,  2074,  3523,  1591,  2561,  2079,  3525,   611,  1172,  2230,
    2169,  1432,  2171,  1172,  2907,  2139,  2140,  2287,  1059,   567,
    2180,  2083,  3354,  2271,   583,  2407,  4147,  1989,  3164,  1168,
    1169,  3877,  1218,  1138,  1973,  1565,  4148,  1170,    56,  3432,
    1171,  1168,  1169,  1170,  3834,  3696,  1171,  3931, -2569,  1170,
    3916,  1218,  1171,  1170,  3697,  1172,  1171,  1172,  2999,  1168,
    1169,  2812,  1170,  2504,  1170,  1171,  3866,  1171,  1142,  3868,
    3165,  1185,  3176,  3878,  1168,  1169,  1168,  1169,  1168,  1169,
    1168,  1169,  3073,  2164,  3835,  4106,  1606,  1725,  2330,  2515,
    4015,  4015,  1172,  1107,  2227,  1168,  1169,  1789,  1172,  2598,
    2665,  1170,  1172,  1170,  1171,  1590,  1171,  3186,  1168,  1169,
    2659,  2145,  1170,  3187,  3485,  1171,  1991,  3754,  1139,  1172,
     590,  3130,  2168,  1788,  2809,  1590,   825,  3060,  3217,  2666,
    1168,  1169,  1170,  3182,  2146,  1171,  1170,  3917,  1170,  1171,
    1170,  1171,  3061,  1171,  1172,   966,  1172,  1170,  1168,  1169,
    1171,  -473,  1564,  1143,  2296,   601,  2559,  4306,  2231,   602,
    2235,  3858,  1217,  1168,  1169,  1170,   591,  3276,  1171,  4274,
    1702,   967,  2560,  1168,  1169,  3859,  2407,   586,  1172,  1168,
    1169,  1185,  1555,  1168,  1169,  2435,  4015,  3894,  2531,  2425,
    2947,  2947,  2239,  4017,  3698,  1172,  2320,  2744,  3966,  3967,
    1590,  4015,   621,  2776,   611,   621,  1172,  3932,  3849,  2240,
    1172,  2751,  1556,   826,  4275,  4015,   611,  4368,  3221,  1170,
    2244,  1255,  1171,  3933,  2247,  3535,  1255,  1862,  3534,  1661,
    4361,  3850,  1168,  1169,  1534,  2426, -1833,  1168,  1169,   621,
     592,  2847,  3807,  1170,  2766,  4149,  1171,  1026,  1170,  1665,
    4369,  1171,  3539,  1197,  1198,  1199,  1200,   611,  3265,  3643,
   -1727,   611,  3644,  2381,  1013,  1014,  1188,  1395,  3851,  1555,
    1726,  3968,  4015,   604,  1064,   612,  1551,   621,   621,   611,
     611,  1837,  1172,   827,  4015,  4015,  3463,  2290,  1172,  4351,
    1990,  1107,  4355,   621,  1172,   615,  2250,  2624,  1172,  1557,
    2409,  2410,   621,  2558, -1727,  1168,  1169,  1172,  2262,  1172,
    2720,  3934,  2281,  2820,  1565,   617,  1396,  1300,  1566,   888,
    1301,  3133,   887,  3152,  1689,  1838,  1170,  2382,   920,  1171,
     629,  4015,  1170,  2372,  2464,  1171,  1170,  1296,  3279,  1171,
    4276,  4015, -1833,  2082,  1168,  1169,  1172,   497,  1172,  1535,
     498,  1863,   990,  1536,   630,  1313,  2400,  1172,  3556,  3860,
    3158,  2625,  3161,   257,  1537,   259,  1753,  2784,  2083,   117,
     611,  3168,  2221,  1950,  2730,  2221,  1188,  1172,  4015,  3734,
    4015,  1172,  3760,  1172,   119,  1172,  1170,  2396,   637,  1171,
    4015,  3172,  1172,  2785,   638,  3173,   562,  3174,  1170,  3175,
    2731,  1171,  3557,  4442,  1027,   568,  3177,  4015,  1218,  4015,
    1172,  4015,   568,  3925,  1190,  1191,  1170,  2318,  4015,  1171,
   -1805,  1891,  2986,  2942,  3180,  2319,  1645,   641,  4015,  1646,
     643,  1170,   645,  1170,  1171,  1170,  1171,  1170,  1171,  2523,
    1171,  2460,  4015,  4015, -2621,   657,  2474,  -207,  2732,  2653,
    1118,  2733,  1170,  2669,  2318,  1171,   509,  2626,  4015,  4015,
    2734,   118,  2713,  4015,  1172,  1170,  1302,   659,  1171,  2118,
     894,   878,  1137,  2118,  1347,  1727,  3311,   660,  3185,  2778,
    1956,   119,  3312,   661,  2593,  1151,  1152,  1170,  1172,   593,
    1171,  1728,   802,  1172,  1973,  1538,   807,  3480,  2607,  3323,
    1013,  1014,  3188,  2914,  2943,  1170,  2494,  3190,  1171,   817,
    3313,   594,  1361,  2197,  1205,  2501,  2502,  1361,  2780,  2560,
    1170,  3497,  3498,  1171,  1190,  1191,  2506,  2507,  2508,  2509,
    1170,  2517,  2518,  1171,  2118,  1406,  1170,   820,  2627,  1171,
    1170,   831,  1394,  1171,  3512,   595,  4100,  4101,  1394, -1805,
   -1833,   120,   835, -1805,   837,   696,  1193,  1194,  1195,  1196,
    1197,  1198,  1199,  1200,  1407,  1990,   621,  2214,  1205,  4102,
     621,  1172,  2670,   855,  1754,   493,  1991,  1172,  1990, -1833,
     121,  1172,   611,   611,   611,  3192,  1702,  2974,  1990,  1170,
    1539,  3194,  1171,   857,  1170,  3195,   958,  1171,  1755,   847,
    2712,  1509,  1510,  2675,   596,   959,  2715,   962,  2314,  2718,
     823,  2802,  1408,  3004,  3005,  2118,  1409,  2223,  1205,   701,
     969,  2932,  1217,  1973,  1702,  2224,  1659,  1973,  2118,   621,
     978,  1172,   122,   979,   621,   990,  2619,  1790,  2118,  2619,
    2619,  2824,  2619,  1172,  1024,  2619,  2619,  2619,  2619,  2619,
    2619,  2619,  3010,  1000,  2619,  1702,  2619,  3196,  2689,  2690,
    2691,  1172,  1170,  1980,  2153,  1171,  1193,  1194,  1195,  1196,
    1197,  1198,  1199,  1200,  1019,  3517,  1172,  4159,  1172,  4268,
    1172,  2726,  1172,   980,  4270,  2735,  4271,  1020,  1973,  1205,
    3518,   117,  3519, -1833,  3749, -1805,  3753,  1172,  2236,  1205,
    1061,  1170,  3717,  3718,  1171,   948, -1834,   863, -1805,  1062,
    1172,  3759,  2711,  2944,  2655,   713,  2237,  1205,  1209,  4178,
    4179,  4180,  4181,  2346,  1284,  4188,  2347,  2655,   621,  2348,
    4193,  3272,  1172,  4196,  4197,  4198,  4199,  2655,  1208,  2238,
    1205, -1833,  1525,  1526,  1623,  2119,  3761,  2628,  1185,  2119,
    1172,  1217,  1063,  2821,  1065,  1217,  3629,  1213,   621,  3632,
    3633,  1756,   123,  3606,  3607,  1172,  1410,   981,  1066,  1973,
    3135,  1067,  1981,  2242,  1205,  1172,  3645,  2830,  1230,  3762,
    1184,  1172,  1973,  2836,  2836,  1172,  2836,  3682,   920,  3763,
    1168,  1169,  1973,  2519,  2520,  3764,   729,    14,  2154,  3809,
   -1529,  1917,  3216,  2510,  1070,  4267,  3011,  1071,  2435,  1361,
    2119,  2290, -1834,  2855,  2794,  1205,  1217,  2155,  2120,   121,
     952,   953,  2120,   954,  3821,   955,  2736,  1072,  2156,   894,
     878,   864,  1073,   124,  1172,  4291,  4292,  3178,  1205,  1172,
    1292,  4295,  1411,  3564,  4300,  2878,  1627,  3812,  4065,  2881,
    1074,  1991,  3245,  3246,  2836,  2836,  2836, -1529,  1075,  2835,
    2835,  1285,  2835,  3276,  1991,  2381,  1702,  2511,  1218,  3653,
    1076,  1960,  3821,  1077,  1991,  3282,  3283,  4059,  4060,  1078,
    3130,  2824,  1291,  2120,  1081,  1961,  1185,   888,  3286,  3287,
   -1529,  2119, -1529,  1083,  2737,  2512,   125,  1217, -1006,  1918,
    1918,  3435,  3436,    26,  2119,  1412,   865,  1172, -1529,  1084,
    1217,  2157,  3654, -1529,  2119,  1085,  3655,   920,  3656,  1703,
    1217,   920,  2738,  4047,  4051,   621,   621, -1529,  1088,  2382,
    2835,  2835,  2835,  1089, -1529,  -654,  3531,  1205,  1090,  2510,
    1982, -1529,  3027,  1188,   126,  2531,  1172,  3559,  3560,  1983,
    1284,  1628,  1091, -1529,  1092,  1631,  1984,  2383,  2532,  4186,
    1797,  1093,  1632,  2513, -1529,  3657,  2607,  1094,  2121, -1529,
    1095,  2607,  2121,  2153,  1381,  2959,  2971,  2607, -1529,  1096,
     982,  2607,   920,  2982,  3687,  3688,  2973,  1097,  1186,  3751,
    2510,  1098,  2983,  2982,  1101,  2607,  2607,  1218,   621,  2982,
    1102,  1218,  1108,  2511,  3003,   758,  1109,  2607,  1110,  1703,
    1111,  2510,  1187,  1112,  3029,  1113,  3007,  1413,   611,  1114,
   -1834,  3015,  1115,  2158,  1116,  2384, -1529,  3018,  3019,  2982,
    2407,  2512,  2651,  2121,  1382,  1119,  2607,  3044,  2408,  1120,
    1633,  1798,  1121,   983,  2514,   984,  1799, -1529,  3070, -1834,
    1962,  1985,  3961,  3962,  2511,  3964,  3965,  1414,  4072,  2381,
    -654,   524,  1218,   920,  1383,  1122,   504,  3737,  3746,  4047,
   -1529,  3755,  1205,  4051,  1123,  2511,   920,  3772,  1205, -1529,
    1124,  1188,  2512, -1529,  1125,  2510,   920,  1285,  3031,  1800,
    3780,  3781,  2159,  1126,  3017,  -827,  1635,  2984,  2985,  2513,
    2082,  1013,  1014,  2512,  1801,  1127,  2385,  2154,  1128, -1529,
    1129,    38,   611,  2607,  3881,  2520,  3896,  3897, -1529,  -654,
    1130,   525,  1131,  2382,  3014,  2083,  2155,  1963,  1132,  2531,
    1133,   863,  3900,  3897, -1529,  4047,  4051,  2156,  1134, -1529,
      44,  1135,  2532,  1218,  3901,  3897,  1986,  2821,  1136,  2511,
    2513,   526,  1964,  1140,  2409,  2410,  1218,  3960,  3560, -1529,
   -1529,  1141,  3505, -1834,  4073,  4074,  1218, -1529,  1144,  4075,
    4076,  2513,  1308,  1185,  3082,  1189,  1145,  2512,   887, -1529,
    2514,  3020, -1529,  3021,   527,  3963,  3897,  2153,  3099,  1149,
   -1529,  1320,  2411,  3074,  1153, -1529,  1013,  1014,   866,   867,
    1322,   869,  3658,   871, -1529,  3115,  3971,  3972,  1154,  3659,
    1155, -1834,  1965,  1156,  3532,  4058,  3287,  1157,   872,  2942,
    2157,  4109,  3897,  2009,  2010,  3022,  4110,  3897, -1529,  1190,
    1191,  2514,   528,  1636,  3703,  1195,  1196,  1197,  1198,  1199,
    1200,  1158,  1192,  3720,  -654,  2513,  3660,  1207,  3023,  1638,
     504,  1342,  2514,  2515,    53,   864,  -792,  -792,  2012,  1345,
    2533,  4490,  4491,  1255,  4112,  3897,  -792,   621,  4113,  3897,
    4119,  4120,  2015, -1529,  1348,  1384,  -654,  4121,  4120,   611,
    2016,  1352, -1529,  1353,  2082,  3024,  4189,  4190,  2838,  1372,
    2839,  1185,  2857, -1529, -1529,  1376, -1529,  2855,   621,  1380,
    2943,  1703,    56,  1361,  2018, -1529,  1966,  4272,  3287,  2083,
    4273,  3287, -1529,  2153, -1529,  2386,  1107,  3661,   621,  1467,
    1392,  2154,  1401,  2019,  4311,  3560,  2514,  3980,  1402,   675,
     865,  1403,  2158,  3980,  1418, -1529,  1421, -1529, -1529,  1425,
    2155, -1529, -1529,  1509,  1510,  4359,  4360,  4399,  4400,  4439,
    3434,  2156,  2024,  4537,  4538,  3258,  3742,   -65,  2885,  2886,
    2887,  1426,   529,  1434,  3926,  3927,  3662,  1437,  1188,   507,
    1438,  1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,  4185,
    1692,  1693,  1702,  4293,  4294, -1529,  1185,  3581,  3582,  2515,
    3778,  3779,  3939,  3940,  2009,  2010,  1441,  3840,  3841,  2607,
    1442,  2159,  2607,  2607,  3815,  1449,  1444,  2982, -1529,  1454,
    3844,  1385,   696,   503,  1467,  1473,  1475,  3847,  1477,  1481,
     621,  1480,  3663,  2607,  2028,  1185,  1485,  -792,  -792,  2012,
     675,  2029,  1386,   530,  2157,  1486,  1487,  -792,  1490,  1491,
    2515,  2982,  3869,  2015,  1494,  3871,  1495,  2154,  2030,  2982,
    1544,  2016,  -654,  2982, -1529,  1496,  1543,  3724,  1545,  1548,
    -654,  2515,  1550,  1551,  1578,  1584,  2155,  1586,  1203,   700,
    3314,  3315,  1387,  3317,  1590,  2018,   701,  2156,  1609,  3363,
    1612,  1597,   611,  4187,  1525,  1526,  1188,  3419,  2243,  1658,
    1467,  1648,  1659,   493,  2019,  1660,   531,  3429,  1683,  2982,
    1700,   532,   504,  1720,   706,  3815,  1762,  2032, -1529,  2944,
    1742,  1711,  1736,   696,  3438,  1765,  1190,  1191,  1767,   533,
   -1529,  3425,  1768,  2024,  1771,  2033,  1774,  3449,  3025,  4248,
    1775,  1776,  1778,  3345,   611,  2515,  -858,  1777, -1529,  1185,
   -1529,  1779,  3349,  1780,   534,  1781,  2158,  1792,  1793,  1794,
    1796,  1802,  1804,   507,  1805,  2477,  2478,  2479,  3364,   535,
    2157,  3477,  1813, -1529, -1529,  1814,  1824, -1529, -1529,  1827,
     700,  1835,   713,  1843,  3944,  1845,  1844,   701,  1846,  2037,
    4185,  1188,  1850,  1702,   505,  1853,  1856,  2039,  1857,  1859,
    1860,  1868,  1865,  1892,  1899,  2028,  1895,  1928,  1927,  1932,
    1929,  1930,  2029,  1944,  1941,   706,  1948,  1958,  4221,  2004,
    3451,  2069,  1532,  2086,  2088,  2159,  3586,  1347,  2087,  2030,
    1188,  2089,   866,   867,   868,   869,   870,   871,  2090,  1347,
    2091,  3441,  2678,  2092,  1190,  1191,  -654,   724,  2093,  2094,
    2112,  3169,   872,  2095,  2096,  2097,  2098,  3530,   727,  2099,
    2100,  2101,   728,   729,  2102,  2169,  2103,  2045,  1193,  1194,
    1195,  1196,  1197,  1198,  1199,  1200,   804,   805,  3954,  2104,
     808,   809,  2158,   713,   811,  2105,   813,  2106,  2032,  2114,
    2830,  2107,  2108,  1289,   621,   621,   621,  2109,  2110,  2111,
    2132,  2133,  2138,  2148,  2149,  2150,  2033,  2161,  2855,  2163,
    4404,  2172,  2178,  2184,  2186,  1168,  1169,  2187,  2188,  2204,
    4378,  2203,  2205,  2046,  2047,  2048,  2210,  2878,  3571,  2211,
    2049,  3573,  2215,  2221,  2212,   621,   621,   621,  2225,  1190,
    1191,  2229,  2233,   621,  1188,  2260,  2050,  2251,   724,  2051,
    4089,  2159,  2252,   888,   888,  2261,  2257,  2291,  2272,  2273,
    2037,  2295,  4281,   728,   729,  1703,  2274, -1233,  2039,  2301,
    1200,  2311,  2331,  1086,  2607,  1138, -1355,  2168,  1190,  1191,
    2342,  2343,  4090,  1142,  2607,  2053,  2982,  1194,  1195,  1196,
    1197,  1198,  1199,  1200,  2365,   506,  1703,  2373,  2379,  2390,
    2393,  4404,  2982,  2415,   611,  2444,  2607,  2418,  2437,  2438,
    1619,  1620,  1621,  1622,  1623,   507,  2439,  1361,  2442,  2443,
    2445,  2461,  2446,  4099,  2463,  2468,  4456,  2482,  4458,  4532,
   -1805,  2485,  1702,  2486,  2487,  2493,  2489,  2495,  2045,  2496,
    2497,  3106,  2498,  4541,  2499,  2500,  1702,  2530,  4532,  2531,
     750,  1702,  2544,  4541,  3816,  4475,  1702,  3817,   508,  2549,
    -574,  4409,  4410,   509,  4412,  2550,  2553,   756,  2554,  2556,
    2557,  1232,   758,  2563,  3590,   759,  2567,  2565,  3070,  4144,
    2566,  1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,  2575,
    4505,  4506,  1190,  1191,  2046,  2047,  2048,  2574,   510,  2579,
    2580,  2049,  4091,  3716,  3716,  3716,   511,  2585,  2614,  4449,
    3800,  4450,  4451,  1624,  1625,  1626,  1627,  2050,  2586,  2616,
    2051,  2610,  1195,  1196,  1197,  1198,  1199,  1200,  3818,  3819,
    2654,  2595,  2696,  2676,   621,  2697,  2698,  2716,  1256,  1257,
    2724,  2729,  2745,   800,  2720,  2746,  2747,  2758,  2759,  2771,
    2319,   750,  2828,  4263,  2793,  3816,  2053,  2800,  3817,  4548,
    2818,  1960,  2829,  4261,  2833,  1229,  2808,  1233,   756,  2817,
    2850,   800,  4099,   758,  2845,  1961,   759,  2848,  2851,  2858,
    2859,  2435,  1830,  3684,  4502,  4092,  2862,  2864,  2863,  2868,
    2882,  2884,  1234,  2883,  4517,  2426,  1235,  2425,  2899,  2900,
    1876,  1877,  3788,  4093,  2910,  2920,  3708,  1703,  1338,  1257,
    2679,  2924,  1175,  1176,  2925,  2926,  2927,  4258,   621,  2928,
    1258,  1628,  2938,  1629,  1630,  1631,  4094,   621,  2934,  3818,
    3819,  2939,  1632,  1236,  1193,  1194,  1195,  1196,  1197,  1198,
    1199,  1200,  2956,  3053,  2989,  2991,  3059,  3063,  3065,  3716,
    1177,  1237,  1259,  3079,  3080,  3085,  3086,  3087,   611,  2038,
    3084,  1178,  3116,  3120,  3127,  3121,  1260,  3830,  3825,  1361,
    2179,  3136,  1170,  3147,  3140,  1171,  3142,  3149,  1619,  1620,
    1621,  1622,  1623,  3150,  3250,   800,  3151,  3153,  3154,  1261,
    1258,  3197,  1262,  3211,   800,  3207,  3208,  3215,   621,   800,
    1179,  3220,  3223,  3213,  3251,  1263,  3248,  3252,  3253,  1300,
    1633,  1180,  3255,  1238,  3260,  3249,  3264,  3267,  4544,  3284,
    3263,  3289,  1259,  3301,  3291,  3872,  3292,  1264,  3586,  3278,
     800,  3293,  3876,  3281,  3823,  3302,  1260,  3307,  1181,  3303,
    1962,  3318,  3319,  3348,  3330,  3331,   800,  3803,  3304,  3361,
    3449,  3321,  1265,  3342,  3420,  3329,  3360,  3427,  1266,  1261,
    3423,  3954,  1262,  3352,  3426,  1634,  1635,  3431,  3444,  3437,
    3362,  3433,  2881,  3445,  3450,  1263,  1918,  3467,  2407,  3434,
    3453,  1624,  1625,  1626,  1627,  3459,   621,  3460,  3461,  3500,
     800,   800,   800,   800,  3468,  1950,  3494,  1264,   920,  1267,
    4326,  1324,  1182,   800,  3496,  3501,  3508,  4261,  3509,  3521,
    1325,  2278,  3852,  3202,  4095,  4326,  2031,  1963,  2006,  3537,
    1326,  3541,  1265,  3550,  3555,  3552,  3561,  1232,  1266,  4336,
    3563,  3574,  1327,  1328,  1329,  3579,  3587,  3591,  3592,  1013,
    1014,  1239,  1964,  3597,  3605,   621,  3608,  3609,  1330,  3623,
    1240,  3882,  3614,  3678,  3716,  3716,  3681,  3716,  3716,  3630,
    2608,  3683,  3685,  3695,  3691,  1241,  3705,  2622,  2623,  1267,
    2630,  3706,  3709,  2633,  2634,  2635,  2636,  2637,  2638,  2639,
    4099,  1361,  2642,  1242,  2644,  3710,  3704,  3712,  3728,  1628,
   -1441,  1629,  1630,  1631,  3732, -1446,  3735,  3736,  3737,  3738,
    1632,  1257,  1965,  1636,  3739,  3743,  3230,  4514,  3756,  3745,
    3747,  3748,  3752,  3757,  3758,  3231,  3773,  1172,  1637,  1638,
    3766,  3774,  3767,  1233,  3783,  3232,  1243,  3784,  3775,  4025,
     611,  1268,  2713,  4514,  3793,  1269,  3781,  3233,  3234,  3235,
    3796,  3716,  3797,  3802,  4546,  4326,  3801,  3804,  1234,  3810,
    3811,  1270,  1235,  3236,  3813,  4434,  1244,  3814,  3831,  1271,
    3957,  3828,  3669,  3839,  3843,  3856,  3845,  1272,  3857,  3861,
    3863,  3864,  3672,  3883,  3870,  3884,  3899,  3904,  1633,  3922,
    3918,  3923,  1258,  3924,  3937,  3943,  3906,   611,  3928,  1236,
    4086,  3942,  3970,  3946,  3976,  1273,  1966,  3947,   621,   727,
    3983,  1268,  3746,  3984,  4466,  1339,  4026,  1237,  1274,  1275,
    4029,  4055,  4043,  4062,  1259,  4057,  4116,  4066,  4020,  4063,
     800,  1270,  4067,  4326,  4068,  4326,  4069,  4082,  1260,  1271,
    4123,  4127,  4485,  1634,  1635,  4079,  4134,  1272,  -347,  4141,
    4143,  4115,  4326,  4146,  4153,  4156,  4164,  4172,  4163,  4177,
    4194,  1261,  4192,  4195,  1262,  4200,  4203,  4207,  1276,  4205,
    3048,  -365,  4255,  4080,  4228,  1273,  4256,  1263,  1331,  1238,
    4225,  4253,  4326,  4326,  4257,  4280,  4297,  4522,  1274,  1275,
    4283,   800,   800,  4302,  4286,  1332,  4309,  1277,  4312,  1264,
     800,   800,   800,   800,   800,   800,   800,  4315,  4316,  2881,
    4322,  2881,  4323,  4327,   800,   800,  4333,   800,   800,  1278,
    4334,  1279,   800,   800,  1265,  4335,   800,   800,   800,   800,
    1266,   800,   800,  1703,  4341,  4338,  4296,  4342,  1276,   800,
     800,  4343,   800,   800,   800,   800,   800,  4344,  4349,   800,
     800,   800,   800,   800,   800,   800,   800,   800,   800,   800,
    4363,   800,  4364,  4365,   800,   800,  4366,  1277,  4372,   800,
    4373,  1267,  4374,   800,   800,   800,  4379,  4381,  4384,  4383,
   -2337,  1636,  4387,  3237,  4229,  4393,   800,   800,   800,  1278,
    4408,  1279,  4411,  4413,  4414,   800,  1637,  1638,  4425,  4427,
    3238,  4158,   800,   800,   800,  4422,   800,  1239,  4435,  4443,
    4440,  4436,  4438,   800,   800,   800,  1240,   800,   800,   800,
     800,   800,  1333,   800,   800,   800,   800,   800,   800,   800,
     800,  1241,  4446,  4454,   800,   800,  2005,  2824,  4455,  2354,
    4453,  2006,  4459,  2007,  4086,  2008,  4460,  4464,  4467,  1242,
    4470,  4471,  4474,   621,  4472,  2009,  2010,  4478,  4480,  4483,
    4484,  4486,  4489,  2355,  4493,  4494,  4496,  4503,  4518,  4519,
    4523,  4533,  4136,  2826,  4543,  2646,  3693,  2356,  3694,  1036,
    3887,  4264,  1334,  2950,  4154,  4394,  2011,  4395,  2357,  3885,
    2012,  2013,  1243,  4024,  1479,  4406,  2014,  3889,  4535,  1335,
    4498,   580,   930,  1268,  2015,  2416,  2338,  3244,  4419,  3995,
    3996,  3239,  2016,  3998,  3999,  4001,  4002,  4003,  4004,  4005,
    4006,  2017,  1244,  1270,  4507,  4320,  4392,  3240,  4420,  4332,
    4009,  1271,  4010,  4011,  1703,  4331,  2018,  2358,  2359,  1272,
    2002,   497,  2009,  2010,   498,  1547,  4032,  2599,  2054,  3356,
    3266,  1467,  3786,  3554,   621,  2019,  3271,  4285,  1833,  4290,
    4348,  3789,  4469,  2020,  2021,  2360,  4081,  1273,  4407,  4445,
    2022,   658,  2117,  3711,  4202,  -792,  -792,  2012,  2023,  2597,
    1274,  1275,  -932,  3442,  2024,  -792,  2604,  3241,  3104,  3610,
     800,  2015,  3622,  3050,  3679,  2025,  3637,  3070,  3070,  2016,
    3978,  3638,  3824,  3862,  3242,  4347,  3848,  2936,   800,  3199,
     830,  3524,   621,  3526,  3522,  2026,  4209,   518,   519,  2147,
    4211,  4161,  4212,  2018,  4168,  4166,  2688,  4042,  3981,  2601,
    1276,  3038,  2361,  1945,  4424,   941,  1943,  3827,  1467,  2865,
    3611,  4432,  2019,  2115,  2846,  2399,  3257,  3551,  2078,  2888,
     957,  2799,   961,  1954,  2027,  1456,  2028,  4356,  4357,  1277,
    1351,  3533,  3222,  2029,  2743,  1657,  4536,  2707,  3464,  4061,
    4174,  2024,  2798,  3692,  4396,  3617,  3958,  4397,  2815,  4488,
    2030,  1278,  1951,  1279,  2362,  1608,  2895,  3956,  2714,  1821,
    1459,  1460,  1764,  1848,  2871,  2844,  3791,  3567,  3594,  3566,
    1461,   945,  4345,  2031,  1060,  1462,  2177,  2470,   926,  4476,
    2471,  3621,  2332,  1855,  4481,  1911,  3553,  4487,  4367,  4468,
    4415,  4542,  3855,  1053,  1052,  3570,  2908,  4545,   890,  3588,
    1933,  2294,   891,  3589,  2449,  2906,  2898,  2905,  1068,  2032,
    2422,  2378,  1341,  2028,  1858,  2137,  4176,  3538,  4182,  4515,
    2029,   861,  2353,  1344,   652,   653,  4145,  2033,  3880,  1040,
    1041,  2034,     0,  1042,     0,     0,     0,  2030,     0,  1100,
       0,     0,     0,  1703,     0,  4515,     0,     0,     0,     0,
       0,     0,     0,   621,     0,  1117,     0,  1703,     0,     0,
       0,     0,  1703,     0,     0,     0,     0,  1703,     0,  2035,
       0,     0,     0,     0,  2036,     0,     0,     0,     0,     0,
       0,  2037,     0,     0,     0,     0,  2038,     0,     0,  2039,
       0,     0,     0,     0,     0,     0,  2032,   800,     0,     0,
       0,     0,  1162,     0,     0,  2009,  2010,     0,     0,     0,
       0,     0,     0,     0,  2033,     0,     0,     0,     0,     0,
    2040,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2041,  2042,  2043,  2044,     0,     0,
    2012,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2015,     0,     0,     0,     0,  2045,
       0,     0,  2016,     0,     0,     0,     0,     0,  2037,     0,
       0,     0,     0,     0,     0,     0,  2039,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2018,     0,     0,     0,
       0,     0,     0,     0,     0,   800,   800,   800,     0,     0,
       0,  1467,     0,     0,     0,  2019,     0,     0,     0,     0,
     800,     0,     0,     0,     0,  2046,  2047,  2048,     0,     0,
       0,     0,  2049,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2024,     0,   800,     0,  2050,     0,
       0,  2051,   800,     0,     0,   800,  2045,   800,     0,     0,
       0,     0,     0,   800,     0,   800,   800,     0,     0,     0,
       0,     0,     0,     0,  2052,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2053,     0,     0,
       0,     0,     0,     0,  1503,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2046,  2047,  2048,     0,  2028,     0,     0,  2049,
       0,     0,     0,  2029,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2050,     0,     0,  2051,  1502,
    2030,     0,     0,     0,     0,     0,     0,  -932,     0,     0,
     800,     0,     0,     0,  1504,  1505,  1506,  1507,  1508,  1509,
    1510,  1511,  1512,  1513,     0,  1514,  1515,  1516,  1517,  1518,
    1519,  1520,  1521,  1522,  2053,  1523,  1524,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   800,     0,     0,  2032,
    1588,  1589,     0,     0,   800,     0,     0,     0,     0,  1599,
    1600,     0,     0,  1603,  1604,  1605,     0,  2033,     0,     0,
       0,     0,     0,  1613,  1614,     0,  1615,  1616,     0,     0,
       0,  1641,     0,     0,     0,  1650,  1651,  1652,  1653,     0,
    1655,     0,     0,     0,     0,     0,     0,     0,  1663,  1664,
       0,  1667,  1668,     0,     0,     0,     0,     0,  1672,  1673,
    1674,     0,     0,  1677,  1678,  1679,  1680,  1681,  1682,     0,
    1684,  2037,     0,  1687,  1688,     0,     0,     0,  1691,  2039,
       0,     0,  1694,  1698,  1699,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1706,  1707,  1708,     0,     0,
    1525,  1526,     0,     0,  1716,     0,     0,     0,     0,     0,
       0,  1721,  1722,  1723,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     3,
       0,     0,     0,     4,  1759,     0,     0,     0,     0,  2045,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     0,     0,     0,     0,     7,     0,     0,     0,     8,
       9,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   800,     0,     0,
       0,     0,     0,    11,     0,  2046,  2047,  2048,     0,     0,
       0,     0,  2049,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,    13,     0,  2050,     0,
       0,  2051,     0,     0,     0,    14,    15,    16,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,     0,     0,     0,     0,     0,  2053,     0,     0,
       0,   800,     0,     0,     0,    20,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   800,     0,    21,     0,   800,     0,     0,     0,  1870,
     800,   800,     0,     0,     0,     0,     0,     0,    22,   800,
      23,     0,   800,     0,     0,    24,     0,  1898,    25,     0,
       0,     0,   800,   800,     0,   800,   800,     0,   800,   800,
     800,   800,   800,     0,     0,   800,     0,     0,     0,     0,
       0,    26,     0,    27,   800,     0,     0,     0,     0,     0,
       0,   800,     0,   800,     0,   800,   800,     0,   800,   800,
       0,    28,     0,   800,   800,   800,     0,     0,     0,   800,
     800,   800,     0,   800,     0,   800,     0,   800,    29,   800,
       0,   800,    30,     0,     0,     0,   800,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   800,     0,     0,     0,     0,
       0,     0,   800,     0,     0,   800,     0,     0,     0,     0,
       0,   800,     0,     0,   800,     0,     0,     0,   800,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3365,  3366,
     800,     0,     0,     0,  3367,    32,  3368,     0,  3369,  3370,
       0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
       0,     0,     0,     0,     0,  3371,     0,     0,     0,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2189,     0,     0,     0,
       0,    35,     0,     0,    36,     0,    37,     0,     0,    38,
       0,     0,    39,    40,     0,     0,     0,     0,     0,     0,
       0,   800,    41,  3372,    42,   800,  3373,     0,     0,     0,
       0,     0,    43,     0,     0,  3374,     0,     0,    44,     0,
       0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
       0,    46,     0,    47,  3375,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3376,     0,  2948,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    48,     0,     0,     0,     0,     0,     0,
      49,  2948,  2948,     0,  2264,  2266,  2268,  3377,     0,  3378,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3379,  3380,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    50,     0,  2303,     0,     0,     0,     0,
       0,     0,     0,     0,  2308,    51,  2309,     0,     0,    52,
       0,     0,    53,  3381,     0,     0,     0,    54,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3382,     0,    55,     0,     0,     0,     0,
       0,     0,  3383,  3384,     0,  3385,     0,     0,     0,     0,
      56,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2948,
    2948,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3386,  3387,  3388,     0,     0,     0,     0,     0,  2395,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3389,  3390,  3391,     0,     0,     0,     0,  3392,     0,     0,
    3393,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3394,  3395,     0,
       0,     0,     0,     0,     0,  2448,     0,     0,     0,     0,
       0,     0,   800,  2458,     0,     0,   800,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3396,  3397,     0,     0,     0,     0,   800,   800,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     0,     2,     0,  3398,     0,   800,     0,     0,
       0,     0,     0,     0,     0,     0,   800,     0,   800,     0,
     800,     0,     4,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     5,     6,     0,     0,
       0,     0,     0,     0,     7,     0,     0,   800,     8,     9,
       0,     0,   800,     0,     0,     0,     0,     0,     0,  3399,
       0,     0,     0,  3400,    10,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3401,     0,     0,     0,     0,
       0,   800,    11,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    12,    13,     0,     0,     0,     0,
       0,     0,     0,     0,    14,    15,    16,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    17,    18,     0,
       0,     0,     0,  3402,     0,     0,  3403,     0,     0,  3404,
    3405,  3406,  3407,     0,     0,     0,     0,   800,     0,     0,
       0,     0,     0,     0,    20,     0,  2615,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    21,     0,     0,   800,     0,     0,     0,     0,
       0,  3408,  3409,     0,     0,     0,     0,    22,     0,    23,
       0,     0,     0,     0,    24,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,  3410,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,     0,    27,     0,     0,     0,     0,     0,     0,     0,
    2706,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2723,     0,     0,     0,  2725,     0,     0,    29,     0,  2727,
    2728,    30,     0,     0,     0,     0,     0,     0,  2741,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2748,  2749,     0,  2750,     0,     0,  2752,  2753,  2754,
    2755,  2756,     0,     0,     0,     0,   800,   800,     0,     0,
       0,     0,     0,  2760,     0,     0,     0,     0,     0,     0,
    2761,     0,  2762,     0,  2763,  2764,     0,  2765,   838,   893,
       0,  2948,  2768,  2769,  2770,     0,     0,     0,  2772,  2773,
    2774,     0,  2775,     0,  2777,     0,  2779,     0,  2781,     0,
    2782,     0,     0,   894,   878,  2783,     0,     0,     0,     0,
       0,     0,     0,     0,   895,     0,     0,    31,     0,     0,
       0,     0,     0,     0,  2803,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,   800,     0,   896,     0,   897,
    2813,     0,     0,  2816,     0,     0,     0,    33,     0,   898,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
     800,     0,     0,     0,   800,   800,     0,   800,     0,     0,
       0,     0,     0,     0,     0,     0,   800,     0,     0,     0,
      35,   800,     0,    36,   800,    37,   800,   800,    38,     0,
       0,    39,    40,     0,     0,     0,     0,     0, -1805,   899,
       0,    41,     0,    42,   900,     0,     0,   901,     0,     0,
       0,    43,     0,     0,     0,     0,     0,    44,     0,   800,
       0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
      46,     0,    47,     0,     0,  3036,   902,     0,   903,     0,
    2006,     0,  2007,     0,     0,   904,     0,   905,     0,     0,
       0,     0,     0,   800,  2009,  2010,     0,     0,     0,     0,
       0,     0,    48,     0,     0,     0,     0,     0,     0,    49,
     906,   907,     0,     0,     0,     0,     0,   800,     0,     0,
    2458,     0,     0,     0,     0,  2011,     0,     0,     0,  2012,
       0,     0,     0,     0,   908,     0,     0,     0,     0,     0,
       0,     0,     0,  2015,     0,     0,     0,     0,     0,     0,
       0,  2016,    50,     0,     0,   909,     0,     0,     0,     0,
    2017,     0,     0,   800,    51,     0,     0,     0,    52,   800,
       0,    53,     0,     0,     0,  2018,    54,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   910,     0,
    1467,     0,     0,     0,  2019,     0,     0,     0,     0,     0,
       0,     0,  2020,     0,    55,     0,     0,     0,     0,  3037,
       0,     0,     0,     0,     0,     0,     0,  2023,     0,    56,
       0,     0,     0,  2024,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   911,  2026,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   912,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   913,   914,
       0,     0,   915,   916,     0,  2028,     0,     0,     0,     0,
       0,     0,  2029,     0,     0,     0,     0,     0,     0,     0,
       0,   800,   800,   917,     0,     0,     0,     0,     0,  2030,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2031,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   918,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   919,     0,     0,     0,     0,     0,  2032,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3132,     0,     0,     0,  3134,  2033,     0,     0,     0,
    2034,     0,     0, -2374,   800,     0,     0,   920,     0,     0,
       0,     0,     0,     0,     0,  3156,  3157,     0,     0,     0,
       0,     0,     0,     0,     0,   921,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3179,   800,     0,     0,
       0,     0,     0,  2036,     0,  3189,     0,  3191,     0,  3193,
    2037,     0,     0,     0,     0,     0,     0,     0,  2039,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2374,     0,     0,     0,     0,     0,   922,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2042,     0,     0,     0,     0,     0,
    3254,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2045,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2458,     0,     0,     0,
       0,     0,     0,     0,  2046,  2047,  2048,     0,     0,     0,
     800,  2049,     0,     0,   800,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3324,     0,     0,  2050,     0,     0,
    2051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   800,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   800,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2053,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4013,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3421,  3422,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   800,     0,   800,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   800,     0,     0,     0,     0,     0,
       0,     0,   800,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3481,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   800,     0,     0,     0,     0,  3499,
    4013,  4013,     0,  3503,  3504,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3511,     0,     0,     0,     0,
    3513,     0,     0,  3514,     0,  3515,  3516,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   800,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3547,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   800,     0,     0,     0,  3547,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   800,     0,   800,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   800,     0,  4013,  4013,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3547,     0,     0,     0,     0,     0,  3602,     0,
       0,     0,     0,     0,  4269,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   800,     0,  4013,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4013,   800,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   800,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3726,  3727,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   800,  4013,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4013,  4013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   800,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4013,     0,
       0,     0,     0,     0,     0,   800,     0,     0,  4013,     0,
       0,     0,     0,  3547,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   800,     0,
       0,     0,     0,     0,     0,  4013,  3324,  4013,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4013,     0,     0,
       0,     0,     0,   800,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4013,     0,  4013,     0,  4013,     0,
       0,     0,     0,     0,     0,  4013,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4013,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4013,
    4013,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4013,  4013,     0,     0,     0,
    4013,     0,     0,     0,     0,     0,   800,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   800,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3324,
       0,     0,     0,  3921,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3547,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3324,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4054,     0,  4056,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4105,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3324,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4223,     0,  4224,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4232,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   139,     0,   671,   141,   142,   143,   144,
    3547,     0,   145,     0,     0,     0,   146,     0,     0,   672,
       0,   148,   149,   150,   151,   673,   153,     0,   154,     0,
       0,   674,   155,   675,   676,   677,   156,   678,     0,   157,
     158,   159,  1695,   160,     0,   161,   162,  4377,     0,   163,
     679,   680,   164,   165,     0,   166,   681,   682,   168,     0,
     169,   170,   171,   172,   683,   174,     0,   684,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   685,   192,     0,   686,
     687,   193,     0,     0,   194,   688,   195,   689,     0,   196,
     690,   691,     0,   197,   198,   199,   692,   693,   694,     0,
       0,     0,     0,   695,  4426,   202,   696,     0,     0,   697,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,  4452,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   698,     0,   230,   231,   232,
     233,   234,   699,   700,   235,   236,     0,   237,   238,   239,
     701,     0,   240,     0,     0,     0,   702,   242,     0,   243,
       0,   244,     0,   245,   703,   247,   704,     0,   249,     0,
     250,     0,   705,     0,   251,   252,     0,   253,   706,     0,
     254,   255,     0,     0,     0,   707,   257,   258,   259,   708,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     709,   264,   265,   710,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  4524,     0,     0,   271,     0,
       0,   272,   273,     0,  1696,   274,     0,   711,   275,   276,
       0,     0,     0,     0,     0,   712,   278,     0,   279,     0,
     280,     0,   281,   282,     0,  3547,   713,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   714,   304,   305,   306,   307,   715,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     716,   315,     0,     0,   717,   317,   718,   318,     0,   319,
     719,   720,   721,   722,   723,   324,   325,   326,   327,   328,
       0,   724,   329,   330,     0,     0,   331,   332,   333,   334,
     725,   726,   727,   335,   336,     0,   728,   729,   337,     0,
     338,   339,   730,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   732,   353,   354,
     355,   356,   733,   734,   359,   735,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   736,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   737,   738,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     739,     0,   740,   396,   397,   398,   399,   400,   741,   742,
     403,   404,   405,   406,     0,   743,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   744,   745,   437,
     438,     0,   439,   440,   746,   442,   443,   444,   747,   748,
     445,   446,   447,   448,   749,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   750,   455,   456,     0,   751,   752,
     753,   754,     0,     0,     0,     0,  1697,   461,   462,     0,
     755,   756,   757,   464,   465,   466,   758,   467,   468,   759,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   760,   477,     0,     0,   761,   762,
     763,   764,   478,     0,     0,   479,   765,     0,   766,   480,
     481,   482,   767,   768,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   769,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     671,   141,   142,   143,   144,  2454,     0,   145,     0,     0,
       0,   146,     0,     0,   672,     0,   148,   149,   150,   151,
     673,   153,     0,   154,     0,     0,  2455,   155,   675,   676,
     677,   156,   678,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,   679,   680,   164,   165,     0,
     166,   681,   682,   168,     0,   169,   170,   171,   172,   683,
     174,     0,   684,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   685,   192,     0,   686,   687,   193,     0,     0,   194,
     688,   195,   689,     0,   196,   690,   691,     0,   197,   198,
     199,   692,   693,   694,     0,     0,     0,     0,   695,     0,
     202,   696,     0,     0,  2456,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     698,     0,   230,   231,   232,   233,   234,   699,   700,   235,
     236,     0,   237,   238,   239,   701,     0,   240,     0,     0,
       0,   702,   242,     0,   243,     0,   244,     0,   245,   703,
     247,   704,     0,   249,     0,   250,     0,   705,     0,   251,
     252,     0,   253,   706,     0,   254,   255,     0,     0,     0,
     707,   257,   258,   259,   708,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,   709,   264,   265,   710,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,   711,   275,   276,     0,     0,     0,     0,     0,
     712,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,   713,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,   714,
     304,   305,   306,   307,   715,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   716,   315,     0,     0,   717,
     317,   718,   318,     0,   319,   719,   720,   721,   722,   723,
     324,   325,   326,   327,   328,     0,   724,   329,   330,     0,
       0,   331,   332,   333,   334,   725,   726,   727,   335,   336,
       0,   728,   729,   337,     0,   338,   339,   730,  2457,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,   731,   348,   349,     0,
     350,   351,   732,   353,   354,   355,   356,   733,   734,   359,
     735,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   736,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,   737,   738,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   739,     0,   740,   396,   397,
     398,   399,   400,   741,   742,   403,   404,   405,   406,     0,
     743,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,   744,   745,   437,   438,     0,   439,   440,   746,
     442,   443,   444,   747,   748,   445,   446,   447,   448,   749,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   750,
     455,   456,     0,   751,   752,   753,   754,     0,     0,     0,
       0,     0,   461,   462,     0,   755,   756,   757,   464,   465,
     466,   758,   467,   468,   759,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   760,
     477,     0,     0,   761,   762,   763,   764,   478,     0,     0,
     479,   765,     0,   766,   480,   481,   482,   767,   768,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   769,     0,     0,     0,   770,   771,     0,
       0,     0,     0,   772,   773,     0,     0,   774,   775,     0,
       0,   776,   777,   139,     0,   671,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   672,
       0,   148,   149,   150,   151,   673,   153,     0,   154,     0,
       0,   674,   155,   675,   676,   677,   156,   678,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     679,   680,   164,   165,     0,   166,   681,   682,   168,     0,
     169,   170,   171,   172,   683,   174,     0,   684,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   685,   192,     0,   686,
     687,   193,     0,     0,   194,   688,   195,   689,     0,   196,
     690,   691,     0,   197,   198,   199,   692,   693,   694,     0,
       0,     0,     0,   695,     0,   202,   696,     0,     0,   697,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   698,     0,   230,   231,   232,
     233,   234,   699,   700,   235,   236,     0,   237,   238,   239,
     701,     0,   240,     0,     0,     0,   702,   242,  2263,   243,
       0,   244,     0,   245,   703,   247,   704,     0,   249,     0,
     250,     0,   705,     0,   251,   252,     0,   253,   706,     0,
     254,   255,     0,     0,     0,   707,   257,   258,   259,   708,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     709,   264,   265,   710,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   711,   275,   276,
       0,     0,     0,     0,     0,   712,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   713,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   714,   304,   305,   306,   307,   715,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     716,   315,     0,     0,   717,   317,   718,   318,     0,   319,
     719,   720,   721,   722,   723,   324,   325,   326,   327,   328,
       0,   724,   329,   330,     0,     0,   331,   332,   333,   334,
     725,   726,   727,   335,   336,     0,   728,   729,   337,     0,
     338,   339,   730,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   732,   353,   354,
     355,   356,   733,   734,   359,   735,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   736,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   737,   738,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     739,     0,   740,   396,   397,   398,   399,   400,   741,   742,
     403,   404,   405,   406,     0,   743,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   744,   745,   437,
     438,     0,   439,   440,   746,   442,   443,   444,   747,   748,
     445,   446,   447,   448,   749,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   750,   455,   456,     0,   751,   752,
     753,   754,     0,     0,     0,     0,     0,   461,   462,     0,
     755,   756,   757,   464,   465,   466,   758,   467,   468,   759,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   760,   477,     0,     0,   761,   762,
     763,   764,   478,     0,     0,   479,   765,     0,   766,   480,
     481,   482,   767,   768,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   769,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     671,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   672,     0,   148,   149,   150,   151,
     673,   153,     0,   154,     0,     0,   674,   155,   675,   676,
     677,   156,   678,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,   679,   680,   164,   165,     0,
     166,   681,   682,   168,     0,   169,   170,   171,   172,   683,
     174,     0,   684,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   685,   192,     0,   686,   687,   193,     0,     0,   194,
     688,   195,   689,     0,   196,   690,   691,     0,   197,   198,
     199,   692,   693,   694,     0,     0,     0,     0,   695,     0,
     202,   696,     0,     0,   697,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     698,     0,   230,   231,   232,   233,   234,   699,   700,   235,
     236,     0,   237,   238,   239,   701,     0,   240,     0,     0,
       0,   702,   242,  2265,   243,     0,   244,     0,   245,   703,
     247,   704,     0,   249,     0,   250,     0,   705,     0,   251,
     252,     0,   253,   706,     0,   254,   255,     0,     0,     0,
     707,   257,   258,   259,   708,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,   709,   264,   265,   710,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,   711,   275,   276,     0,     0,     0,     0,     0,
     712,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,   713,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,   714,
     304,   305,   306,   307,   715,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   716,   315,     0,     0,   717,
     317,   718,   318,     0,   319,   719,   720,   721,   722,   723,
     324,   325,   326,   327,   328,     0,   724,   329,   330,     0,
       0,   331,   332,   333,   334,   725,   726,   727,   335,   336,
       0,   728,   729,   337,     0,   338,   339,   730,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,   731,   348,   349,     0,
     350,   351,   732,   353,   354,   355,   356,   733,   734,   359,
     735,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   736,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,   737,   738,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   739,     0,   740,   396,   397,
     398,   399,   400,   741,   742,   403,   404,   405,   406,     0,
     743,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,   744,   745,   437,   438,     0,   439,   440,   746,
     442,   443,   444,   747,   748,   445,   446,   447,   448,   749,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   750,
     455,   456,     0,   751,   752,   753,   754,     0,     0,     0,
       0,     0,   461,   462,     0,   755,   756,   757,   464,   465,
     466,   758,   467,   468,   759,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   760,
     477,     0,     0,   761,   762,   763,   764,   478,     0,     0,
     479,   765,     0,   766,   480,   481,   482,   767,   768,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   769,     0,     0,     0,   770,   771,     0,
       0,     0,     0,   772,   773,     0,     0,   774,   775,     0,
       0,   776,   777,   139,     0,   671,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   672,
       0,   148,   149,   150,   151,   673,   153,     0,   154,     0,
       0,   674,   155,   675,   676,   677,   156,   678,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     679,   680,   164,   165,     0,   166,   681,   682,   168,     0,
     169,   170,   171,   172,   683,   174,     0,   684,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   685,   192,     0,   686,
     687,   193,     0,     0,   194,   688,   195,   689,     0,   196,
     690,   691,     0,   197,   198,   199,   692,   693,   694,     0,
       0,     0,     0,   695,     0,   202,   696,     0,     0,   697,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   698,     0,   230,   231,   232,
     233,   234,   699,   700,   235,   236,     0,   237,   238,   239,
     701,     0,   240,     0,     0,     0,   702,   242,  2267,   243,
       0,   244,     0,   245,   703,   247,   704,     0,   249,     0,
     250,     0,   705,     0,   251,   252,     0,   253,   706,     0,
     254,   255,     0,     0,     0,   707,   257,   258,   259,   708,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     709,   264,   265,   710,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   711,   275,   276,
       0,     0,     0,     0,     0,   712,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   713,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   714,   304,   305,   306,   307,   715,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     716,   315,     0,     0,   717,   317,   718,   318,     0,   319,
     719,   720,   721,   722,   723,   324,   325,   326,   327,   328,
       0,   724,   329,   330,     0,     0,   331,   332,   333,   334,
     725,   726,   727,   335,   336,     0,   728,   729,   337,     0,
     338,   339,   730,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   732,   353,   354,
     355,   356,   733,   734,   359,   735,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   736,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   737,   738,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     739,     0,   740,   396,   397,   398,   399,   400,   741,   742,
     403,   404,   405,   406,     0,   743,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   744,   745,   437,
     438,     0,   439,   440,   746,   442,   443,   444,   747,   748,
     445,   446,   447,   448,   749,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   750,   455,   456,     0,   751,   752,
     753,   754,     0,     0,     0,     0,     0,   461,   462,     0,
     755,   756,   757,   464,   465,   466,   758,   467,   468,   759,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   760,   477,     0,     0,   761,   762,
     763,   764,   478,     0,     0,   479,   765,     0,   766,   480,
     481,   482,   767,   768,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   769,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     671,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   672,     0,   148,   149,   150,   151,
     673,   153,     0,   154,     0,     0,   674,   155,   675,   676,
     677,   156,   678,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,   679,   680,   164,   165,     0,
     166,   681,   682,   168,     0,   169,   170,   171,   172,   683,
     174,     0,   684,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   685,   192,     0,   686,   687,   193,     0,     0,   194,
     688,   195,   689,     0,   196,   690,   691,     0,   197,   198,
     199,   692,   693,   694,     0,     0,     0,     0,   695,     0,
     202,   696,     0,     0,   697,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     698,     0,   230,   231,   232,   233,   234,   699,   700,   235,
     236,     0,   237,   238,   239,   701,     0,   240,     0,     0,
       0,   702,   242,     0,   243,     0,   244,     0,   245,   703,
     247,   704,     0,   249,     0,   250,     0,   705,     0,   251,
     252,     0,   253,   706,     0,   254,   255,     0,     0,     0,
     707,   257,   258,   259,   708,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,   709,   264,   265,   710,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,   711,   275,   276,     0,     0,     0,     0,     0,
     712,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,   713,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,   714,
     304,   305,   306,   307,   715,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   716,   315,     0,     0,   717,
     317,   718,   318,     0,   319,   719,   720,   721,   722,   723,
     324,   325,   326,   327,   328,     0,   724,   329,   330,     0,
       0,   331,   332,   333,   334,   725,   726,   727,   335,   336,
       0,   728,   729,   337,     0,   338,   339,   730,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,   731,   348,   349,     0,
     350,   351,   732,   353,   354,   355,   356,   733,   734,   359,
     735,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   736,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,   737,   738,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   739,     0,   740,   396,   397,
     398,   399,   400,   741,   742,   403,   404,   405,   406,     0,
     743,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,   744,   745,   437,   438,     0,   439,   440,   746,
     442,   443,   444,   747,   748,   445,   446,   447,   448,   749,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   750,
     455,   456,     0,   751,   752,   753,   754,     0,     0,     0,
       0,     0,   461,   462,     0,   755,   756,   757,   464,   465,
     466,   758,   467,   468,   759,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   760,
     477,     0,     0,   761,   762,   763,   764,   478,     0,     0,
     479,   765,     0,   766,   480,   481,   482,   767,   768,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   769,     0,     0,     0,   770,   771,     0,
       0,     0,     0,   772,   773,     0,     0,   774,   775,     0,
       0,   776,   777,   139,     0,   671,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   672,
       0,   148,   149,   150,   151,   673,   153,     0,   154,     0,
       0,   674,   155,   675,   676,   677,   156,   678,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     679,   680,   164,   165,     0,   166,   681,   682,   168,     0,
     169,   170,   171,   172,   683,   174,     0,   684,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   685,   192,     0,   686,
     687,   193,     0,     0,   194,   688,   195,   689,     0,   196,
     690,   691,     0,   197,   198,   199,   692,   693,   694,     0,
       0,     0,     0,   695,     0,   202,   696,     0,     0,   697,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   698,     0,   230,   231,   232,
     233,   234,   699,   700,   235,   236,     0,   237,   238,   239,
     701,     0,   240,     0,     0,     0,   702,   242,     0,   243,
       0,   244,     0,   245,   703,   247,   704,     0,   249,     0,
     250,     0,   705,     0,   251,   252,     0,   253,   706,     0,
     254,   255,     0,     0,     0,   707,   257,   258,   259,   708,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     709,   264,   265,   710,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   711,   275,   276,
       0,     0,     0,     0,     0,   712,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   713,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   714,   304,   305,   306,   307,   715,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     716,   315,     0,     0,   717,   317,   718,   318,     0,   319,
     719,   720,   721,   722,   723,   324,   325,   326,   327,   328,
       0,   724,   329,   330,     0,     0,   331,   332,   333,   334,
     725,   726,   727,   335,   336,     0,   728,   729,   337,     0,
     338,   339,   730,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   732,   353,   354,
     355,   356,   733,   734,   359,   735,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   736,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   737,   738,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     739,     0,   740,   396,   397,   398,   399,   400,   741,   742,
     403,   404,   405,   406,     0,   743,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   744,   745,   437,
     438,     0,   439,   440,   746,   442,   443,   444,   747,   748,
     445,   446,   447,   448,   749,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   750,   455,   456,     0,   751,   752,
     753,   754,     0,     0,     0,     0,     0,   461,   462,     0,
     755,   756,   757,   464,   465,   466,   758,   467,   468,   759,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   760,   477,     0,     0,   761,   762,
     763,   764,   478,     0,     0,   479,   765,     0,   766,   480,
     481,   482,   767,   768,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   769,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,  1099,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     671,   141,   142,   143,   144,  1730,     0,   145,     0,     0,
       0,  1731,     0,     0,   672,     0,   148,   149,   150,   151,
     673,   153,     0,   154,     0,     0,   674,   155,   675,   676,
     677,   156,   678,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,   679,   680,   164,   165,     0,
     166,   681,   682,   168,     0,   169,   170,   171,   172,   683,
     174,     0,   684,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   685,   192,     0,   686,   687,   193,     0,     0,   194,
     688,   195,   689,     0,   196,   690,   691,     0,   197,   198,
     199,   692,   693,   694,     0,     0,     0,     0,   695,     0,
     202,   696,     0,     0,   697,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     698,     0,   230,   231,   232,   233,   234,   699,   700,   235,
     236,     0,   237,   238,   239,   701,     0,   240,     0,     0,
       0,   702,   242,     0,   243,     0,   244,     0,   245,   703,
     247,   704,     0,   249,     0,   250,     0,   705,     0,   251,
     252,     0,   253,   706,     0,   254,   255,     0,     0,     0,
     707,   257,   258,   259,   708,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,   709,   264,   265,   710,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,   711,   275,   276,     0,     0,     0,     0,     0,
     712,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,   713,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,   714,
     304,   305,   306,   307,   715,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   716,   315,     0,     0,   717,
     317,   718,   318,     0,   319,   719,   720,   721,   722,   723,
     324,   325,   326,   327,   328,     0,   724,   329,   330,     0,
       0,   331,   332,   333,   334,   725,     0,   727,   335,   336,
       0,   728,   729,   337,     0,   338,   339,   730,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,   731,   348,   349,     0,
     350,   351,   732,   353,   354,   355,   356,   733,   734,   359,
     735,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   736,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,   737,   738,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   739,     0,   740,   396,   397,
     398,   399,   400,   741,   742,   403,   404,   405,   406,     0,
     743,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,   744,   745,   437,   438,     0,   439,   440,   746,
     442,   443,   444,   747,   748,   445,   446,   447,   448,   749,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   750,
     455,   456,     0,   751,   752,   753,   754,     0,     0,     0,
       0,     0,   461,   462,     0,   755,   756,   757,   464,   465,
     466,   758,   467,   468,   759,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   760,
     477,     0,     0,   761,   762,   763,   764,   478,     0,     0,
     479,   765,     0,   766,   480,   481,   482,   767,   768,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   769,     0,     0,     0,   770,   771,     0,
       0,     0,     0,   772,   773,     0,     0,   774,   775,     0,
       0,   776,   777,   139,     0,   671,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   672,
       0,   148,   149,   150,   151,   673,   153,     0,   154,     0,
       0,   674,   155,   675,   676,   677,   156,   678,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     679,   680,   164,   165,     0,   166,   681,   682,   168,     0,
     169,   170,   171,   172,   683,   174,     0,   684,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   685,   192,     0,   686,
     687,   193,     0,     0,   194,   688,   195,   689,     0,   196,
     690,   691,     0,   197,   198,   199,   692,   693,   694,     0,
       0,     0,     0,   695,     0,   202,   696,     0,     0,   697,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   698,     0,   230,   231,   232,
     233,   234,   699,   700,   235,   236,     0,   237,   238,   239,
     701,     0,   240,     0,     0,     0,   702,   242,     0,   243,
       0,   244,     0,   245,   703,   247,   704,     0,   249,     0,
     250,     0,   705,     0,   251,   252,     0,   253,   706,     0,
     254,   255,     0,     0,     0,   707,   257,   258,   259,   708,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     709,   264,   265,  2722,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   711,   275,   276,
       0,     0,     0,     0,     0,   712,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   713,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   714,   304,   305,   306,   307,   715,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     716,   315,     0,     0,   717,   317,   718,   318,     0,   319,
     719,   720,   721,   722,   723,   324,   325,   326,   327,   328,
       0,   724,   329,   330,     0,     0,   331,   332,   333,   334,
     725,   726,   727,   335,   336,     0,   728,   729,   337,     0,
     338,   339,   730,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   732,   353,   354,
     355,   356,   733,   734,   359,   735,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   736,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   737,   738,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     739,     0,   740,   396,   397,   398,   399,   400,   741,   742,
     403,   404,   405,   406,     0,   743,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   744,   745,   437,
     438,     0,   439,   440,   746,   442,   443,   444,   747,   748,
     445,   446,   447,   448,   749,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   750,   455,   456,     0,   751,   752,
     753,   754,     0,     0,     0,     0,     0,   461,   462,     0,
     755,   756,   757,   464,   465,   466,   758,   467,   468,   759,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   760,   477,     0,     0,   761,   762,
     763,   764,   478,     0,     0,   479,   765,     0,   766,   480,
     481,   482,   767,   768,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   769,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     671,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   672,     0,   148,   149,   150,   151,
     673,   153,     0,   154,     0,     0,   674,   155,   675,   676,
     677,   156,   678,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,   679,   680,   164,   165,     0,
     166,   681,   682,   168,     0,   169,   170,   171,   172,   683,
     174,     0,   684,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   685,   192,     0,   686,   687,   193,     0,     0,   194,
     688,   195,   689,     0,   196,   690,   691,     0,   197,   198,
     199,   692,   693,   694,     0,     0,     0,     0,   695,     0,
     202,   696,     0,     0,   697,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     698,     0,   230,   231,   232,   233,   234,   699,   700,   235,
     236,     0,   237,   238,   239,   701,     0,   240,     0,     0,
       0,   702,   242,     0,   243,     0,   244,     0,   245,   703,
     247,   704,     0,   249,     0,   250,     0,   705,     0,   251,
     252,     0,   253,   706,     0,   254,   255,     0,     0,     0,
     707,   257,   258,   259,   708,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,   709,   264,   265,  2767,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,   711,   275,   276,     0,     0,     0,     0,     0,
     712,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,   713,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,   714,
     304,   305,   306,   307,   715,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   716,   315,     0,     0,   717,
     317,   718,   318,     0,   319,   719,   720,   721,   722,   723,
     324,   325,   326,   327,   328,     0,   724,   329,   330,     0,
       0,   331,   332,   333,   334,   725,   726,   727,   335,   336,
       0,   728,   729,   337,     0,   338,   339,   730,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,   731,   348,   349,     0,
     350,   351,   732,   353,   354,   355,   356,   733,   734,   359,
     735,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   736,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,   737,   738,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   739,     0,   740,   396,   397,
     398,   399,   400,   741,   742,   403,   404,   405,   406,     0,
     743,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,   744,   745,   437,   438,     0,   439,   440,   746,
     442,   443,   444,   747,   748,   445,   446,   447,   448,   749,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   750,
     455,   456,     0,   751,   752,   753,   754,     0,     0,     0,
       0,     0,   461,   462,     0,   755,   756,   757,   464,   465,
     466,   758,   467,   468,   759,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   760,
     477,     0,     0,   761,   762,   763,   764,   478,     0,     0,
     479,   765,     0,   766,   480,   481,   482,   767,   768,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   769,     0,     0,     0,   770,   771,     0,
       0,     0,     0,   772,   773,     0,     0,   774,   775,     0,
       0,   776,   777,   139,     0,   671,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   672,
       0,   148,   149,   150,   151,   673,   153,     0,   154,     0,
       0,   674,   155,   675,   676,   677,   156,   678,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     679,   680,   164,   165,     0,   166,   681,   682,   168,     0,
     169,   170,   171,   172,   683,   174,     0,   684,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   685,   192,     0,   686,
     687,   193,     0,     0,   194,   688,   195,   689,     0,   196,
     690,   691,     0,   197,   198,   199,   692,   693,   694,     0,
       0,     0,     0,   695,     0,   202,   696,     0,     0,  3546,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   698,     0,   230,   231,   232,
     233,   234,   699,   700,   235,   236,     0,   237,   238,   239,
     701,     0,   240,     0,     0,     0,   702,   242,     0,   243,
       0,   244,     0,   245,   703,   247,   704,     0,   249,     0,
     250,     0,   705,     0,   251,   252,     0,   253,   706,     0,
     254,   255,     0,     0,     0,   707,   257,   258,   259,   708,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     709,   264,   265,   710,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   711,   275,   276,
       0,     0,     0,     0,     0,   712,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   713,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   714,   304,   305,   306,   307,   715,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     716,   315,     0,     0,   717,   317,   718,   318,     0,   319,
     719,   720,   721,   722,   723,   324,   325,   326,   327,   328,
       0,   724,   329,   330,     0,     0,   331,   332,   333,   334,
     725,   726,   727,   335,   336,     0,   728,   729,   337,     0,
     338,   339,   730,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   732,   353,   354,
     355,   356,   733,   734,   359,   735,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   736,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   737,   738,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     739,     0,   740,   396,   397,   398,   399,   400,   741,   742,
     403,   404,   405,   406,     0,   743,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   744,   745,   437,
     438,     0,   439,   440,   746,   442,   443,   444,   747,   748,
     445,   446,   447,   448,   749,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   750,   455,   456,     0,   751,   752,
     753,   754,     0,     0,     0,     0,     0,   461,   462,     0,
     755,   756,   757,   464,   465,   466,   758,   467,   468,   759,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   760,   477,     0,     0,   761,   762,
     763,   764,   478,     0,     0,   479,   765,     0,   766,   480,
     481,   482,   767,   768,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   769,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     671,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   672,     0,   148,   149,   150,   151,
     673,   153,     0,   154,     0,     0,   674,   155,   675,   676,
     677,   156,   678,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,   679,   680,   164,   165,     0,
     166,   681,   682,   168,     0,   169,   170,   171,   172,   683,
     174,     0,   684,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   685,   192,     0,   686,   687,   193,     0,     0,   194,
     688,   195,   689,     0,   196,   690,   691,     0,   197,   198,
     199,   692,   693,   694,     0,     0,     0,     0,   695,     0,
     202,   696,     0,     0,   697,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     698,     0,   230,   231,   232,   233,   234,   699,   700,   235,
     236,     0,   237,   238,   239,   701,     0,   240,     0,     0,
       0,   702,   242,     0,   243,     0,   244,     0,   245,   703,
     247,   704,     0,   249,     0,   250,     0,   705,     0,   251,
     252,     0,   253,   706,     0,   254,   255,     0,     0,     0,
     707,   257,   258,   259,   708,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,   709,   264,   265,   710,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,   711,   275,   276,     0,     0,     0,     0,     0,
     712,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,   713,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,   714,
     304,   305,   306,   307,   715,   308,   309,  4401,     0,     0,
       0,   310,   311,   312,   313,   716,   315,     0,     0,   717,
     317,   718,   318,     0,   319,   719,   720,   721,   722,   723,
     324,   325,   326,   327,   328,     0,   724,   329,   330,     0,
       0,   331,   332,   333,   334,   725,     0,   727,   335,   336,
       0,   728,   729,   337,     0,   338,   339,   730,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,   731,   348,   349,     0,
     350,   351,   732,   353,   354,   355,   356,   733,   734,   359,
     735,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   736,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,   737,   738,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   739,     0,   740,   396,   397,
     398,   399,   400,   741,   742,   403,   404,   405,   406,     0,
     743,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,   744,   745,   437,   438,     0,   439,   440,   746,
     442,   443,   444,   747,   748,   445,   446,   447,   448,   749,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   750,
     455,   456,     0,   751,   752,   753,   754,     0,     0,     0,
       0,     0,   461,   462,     0,   755,   756,   757,   464,   465,
     466,   758,   467,   468,   759,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   760,
     477,     0,     0,   761,   762,   763,   764,   478,     0,     0,
     479,   765,     0,   766,   480,   481,   482,   767,   768,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   769,     0,     0,     0,   770,   771,     0,
       0,     0,     0,   772,   773,     0,     0,   774,   775,     0,
       0,   776,   777,   139,     0,   671,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   672,
       0,   148,   149,   150,   151,   673,   153,     0,   154,     0,
       0,   674,   155,   675,   676,   677,   156,   678,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     679,   680,   164,   165,     0,   166,   681,   682,   168,     0,
     169,   170,   171,   172,   683,   174,     0,   684,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   685,   192,     0,   686,
     687,   193,     0,     0,   194,   688,   195,   689,     0,   196,
     690,   691,     0,   197,   198,   199,   692,   693,   694,     0,
       0,     0,     0,   695,     0,   202,   696,     0,     0,   697,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   698,     0,   230,   231,   232,
     233,   234,   699,   700,   235,   236,     0,   237,   238,   239,
     701,     0,   240,     0,     0,     0,   702,   242,     0,   243,
       0,   244,     0,   245,   703,   247,   704,     0,   249,     0,
     250,     0,   705,     0,   251,   252,     0,   253,   706,     0,
     254,   255,     0,     0,     0,   707,   257,   258,   259,   708,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     709,   264,   265,   710,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   711,   275,   276,
       0,     0,     0,     0,     0,   712,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   713,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   714,   304,   305,   306,   307,   715,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     716,   315,     0,     0,   717,   317,   718,   318,     0,   319,
     719,   720,   721,   722,   723,   324,   325,   326,   327,   328,
       0,   724,   329,   330,     0,     0,   331,   332,   333,   334,
     725,     0,   727,   335,   336,     0,   728,   729,   337,     0,
     338,   339,   730,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   732,   353,   354,
     355,   356,   733,   734,   359,   735,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   736,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   737,   738,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     739,     0,   740,   396,   397,   398,   399,   400,   741,   742,
     403,   404,   405,   406,     0,   743,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   744,   745,   437,
     438,     0,   439,   440,   746,   442,   443,   444,   747,   748,
     445,   446,   447,   448,   749,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   750,   455,   456,     0,   751,   752,
     753,   754,     0,     0,     0,     0,     0,   461,   462,     0,
     755,   756,   757,   464,   465,   466,   758,   467,   468,   759,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   760,   477,     0,     0,   761,   762,
     763,   764,   478,     0,     0,   479,   765,     0,   766,   480,
     481,   482,   767,   768,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   769,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     671,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   672,     0,   148,   149,   150,   151,
     673,   153,     0,   154,     0,     0,   674,   155,   675,   676,
     677,   156,   678,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,   679,   680,   164,   165,     0,
     166,   681,   682,   168,     0,   169,   170,   171,   172,   683,
     174,     0,   684,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   685,   192,     0,   686,   687,   193,     0,     0,   194,
     688,   195,   689,     0,   196,   690,   691,     0,   197,   198,
     199,   692,   693,   694,     0,     0,     0,     0,   695,     0,
     202,   696,     0,     0,   697,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
     698,     0,   230,   231,   232,   233,   234,   699,   700,   235,
     236,     0,   237,   238,   239,   701,     0,   240,     0,     0,
       0,   702,   242,     0,   243,     0,   244,     0,   245,   703,
     247,   704,     0,   249,     0,   250,     0,   705,     0,   251,
     252,     0,   253,   706,     0,   254,   255,     0,     0,     0,
     707,   257,   258,   259,   708,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,   709,   264,   265,  1745,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,   711,   275,   276,     0,     0,     0,     0,     0,
     712,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,   713,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,   714,
     304,   305,   306,   307,   715,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   716,   315,     0,     0,   717,
     317,   718,   318,     0,   319,   719,   720,   721,   722,   723,
     324,   325,   326,   327,   328,     0,   724,   329,   330,     0,
       0,   331,   332,   333,   334,   725,     0,   727,   335,   336,
       0,   728,   729,   337,     0,   338,   339,   730,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,   731,   348,   349,     0,
     350,   351,   732,   353,   354,   355,   356,   733,   734,   359,
     735,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   736,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,   737,   738,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   739,     0,   740,   396,   397,
     398,   399,   400,   741,   742,   403,   404,   405,   406,     0,
     743,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,   744,   745,   437,   438,     0,   439,   440,   746,
     442,   443,   444,   747,   748,   445,   446,   447,   448,   749,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   750,
     455,   456,     0,   751,   752,   753,   754,     0,     0,     0,
       0,     0,   461,   462,     0,   755,   756,   757,   464,   465,
     466,   758,   467,   468,   759,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   760,
     477,     0,     0,   761,   762,   763,   764,   478,     0,     0,
     479,   765,     0,   766,   480,   481,   482,   767,   768,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   769,     0,     0,     0,   770,   771,     0,
       0,     0,     0,   772,   773,     0,     0,   774,   775,     0,
       0,   776,   777,   139,     0,   671,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   672,
       0,   148,   149,   150,   151,   673,   153,     0,   154,     0,
       0,   674,   155,   675,   676,   677,   156,   678,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     679,   680,   164,   165,     0,   166,   681,   682,   168,     0,
     169,   170,   171,   172,   683,   174,     0,   684,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   685,   192,     0,   686,
     687,   193,     0,     0,   194,   688,   195,   689,     0,   196,
     690,   691,     0,   197,   198,   199,   692,   693,   694,     0,
       0,     0,     0,   695,     0,   202,   696,     0,     0,   697,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,   698,     0,   230,   231,   232,
     233,   234,   699,   700,   235,   236,     0,   237,   238,   239,
     701,     0,   240,     0,     0,     0,   702,   242,     0,   243,
       0,   244,     0,   245,   703,   247,   704,     0,   249,     0,
     250,     0,   705,     0,   251,   252,     0,   253,   706,     0,
     254,   255,     0,     0,     0,   707,   257,   258,   259,   708,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
     709,   264,   265,  1747,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,   711,   275,   276,
       0,     0,     0,     0,     0,   712,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,   713,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   714,   304,   305,   306,   307,   715,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     716,   315,     0,     0,   717,   317,   718,   318,     0,   319,
     719,   720,   721,   722,   723,   324,   325,   326,   327,   328,
       0,   724,   329,   330,     0,     0,   331,   332,   333,   334,
     725,     0,   727,   335,   336,     0,   728,   729,   337,     0,
     338,   339,   730,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   732,   353,   354,
     355,   356,   733,   734,   359,   735,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   736,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,   737,   738,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     739,     0,   740,   396,   397,   398,   399,   400,   741,   742,
     403,   404,   405,   406,     0,   743,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,   744,   745,   437,
     438,     0,   439,   440,   746,   442,   443,   444,   747,   748,
     445,   446,   447,   448,   749,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   750,   455,   456,     0,   751,   752,
     753,   754,     0,     0,     0,     0,     0,   461,   462,     0,
     755,   756,   757,   464,   465,   466,   758,   467,   468,   759,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   760,   477,     0,     0,   761,   762,
     763,   764,   478,     0,     0,   479,   765,     0,   766,   480,
     481,   482,   767,   768,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   769,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,     0,   154,     0,     0,     0,   155,   675,     0,
       0,   156,     0,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,     0,     0,   164,   165,     0,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,     0,   193,     0,     0,   194,
       0,   195,     0,     0,   196,     0,     0,     0,   197,   198,
     199,     0,     0,  1783,     0,     0,     0,     0,   201,     0,
     202,   696,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,   700,   235,
     236,     0,   237,   238,   239,   701,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,   706,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,   713,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,   724,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,   728,   729,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,   750,
     455,   456,     0,  1784,   458,   459,  1785,     0,     0,     0,
       0,     0,   461,   462,     0,     0,   756,   463,   464,   465,
     466,   758,   467,   468,   759,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   490,     0,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,   776,   777,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,  2532,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,   202,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     241,   242,     0,   243,   504,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,  2082,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,  2083,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,     0,  3100,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,  2038,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,  -479,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   507,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,     0,   490,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,  2603,   148,   149,   150,   151,   152,   153,     0,   154,
       0,     0,     0,   155,     0,     0,     0,   156,     0,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,     0,     0,   164,   165,     0,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
       0,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,  2532,   188,   189,   190,   191,   192,     0,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,   202,     0,     0,     0,
       0,   203,   204,     0,   205,     0,     0,     0,   206,     0,
     207,   208,   209,   210,   211,     0,     0,     0,   212,     0,
       0,   213,   214,   215,     0,     0,     0,   216,     0,   217,
     218,     0,   219,   220,   221,     0,     0,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,     0,   230,   231,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,     0,     0,   240,     0,     0,     0,   241,   242,     0,
     243,   504,   244,     0,   245,   246,   247,   248,     0,   249,
       0,   250,     0,     0,     0,   251,   252,     0,   253,     0,
       0,   254,   255,     0,     0,     0,   256,   257,   258,   259,
       0,     0,   260,   261,   262,  2082,     0,   263,     0,     0,
       0,     0,   264,   265,     0,     0,     0,   266,     0,     0,
       0,   267,   268,     0,   269,   270,     0,     0,     0,   271,
    2083,     0,   272,   273,     0,     0,   274,     0,     0,   275,
     276,     0,     0,     0,     0,     0,   277,   278,     0,   279,
       0,   280,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,     0,   304,   305,   306,   307,
       0,   308,   309,     0,     0,     0,     0,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,   318,     0,
     319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,     0,     0,   329,   330,     0,     0,   331,   332,   333,
     334,     0,     0,     0,   335,   336,     0,     0,     0,   337,
       0,   338,   339,   340,     0,   341,   342,   343,     0,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   345,
     346,   347,     0,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,   360,   361,
     362,     0,   363,     0,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,     0,   372,     0,     0,     0,   373,
     374,   375,   376,   377,     0,     0,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,   389,     0,   390,   391,     0,   392,   393,   394,
       0,   395,     0,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,     0,
       0,   409,   410,   411,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   507,     0,     0,     0,     0,   424,
     425,   426,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,     0,
     451,   452,   453,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,     0,     0,     0,     0,     0,   461,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,   486,     0,   487,   488,   489,     0,     0,   490,
       0,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,  2603,   148,
     149,   150,   151,   152,   153,     0,   154,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,   165,     0,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,   202,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,     0,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,   335,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,  2407,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,     0,   490,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,  2872,     0,
       0,   146,     0,     0,   147,   777,   148,   149,   150,   151,
     152,   153,     0,   154,     0,     0,     0,   155,     0,     0,
       0,   156,     0,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,     0,     0,   164,   165,     0,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,     0,   193,     0,     0,   194,
       0,   195,     0,     0,   196,     0,     0,     0,   197,   198,
     199,     0,     0,   200,     0,     0,     0,     0,   201,     0,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   490,     0,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,  4528,   145,     0,     0,     0,
     146,  4529,   777,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,   605,   202,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   606,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     607,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   608,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,     0,   490,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,   542,   148,   149,   150,   151,   152,   153,     0,   154,
       0,     0,     0,   155,     0,     0,     0,   156,     0,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,     0,     0,   164,   165,     0,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
       0,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,     0,   193,     0,     0,   194,     0,   195,     0,     0,
     196,     0,     0,     0,   197,   198,   199,     0,     0,   200,
       0,     0,     0,     0,   201,     0,   202,     0,     0,     0,
       0,   203,   204,     0,   205,     0,     0,     0,   206,     0,
     207,   208,   209,   210,   211,     0,     0,     0,   212,     0,
       0,   213,   214,   215,     0,     0,     0,   216,     0,   217,
     218,     0,   219,   220,   221,     0,     0,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,     0,   230,   231,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,     0,     0,   240,     0,     0,     0,   241,   242,     0,
     243,     0,   244,     0,   245,   246,   247,   248,     0,   249,
       0,   250,     0,     0,     0,   251,   252,     0,   253,     0,
       0,   254,   255,     0,     0,     0,   256,   257,   258,   259,
       0,     0,   260,   261,   262,     0,     0,   263,     0,     0,
       0,     0,   264,   265,     0,     0,     0,   266,     0,     0,
       0,   267,   268,     0,   269,   270,     0,     0,     0,   271,
       0,     0,   272,   273,     0,     0,   274,     0,     0,   275,
     276,     0,     0,     0,     0,     0,   277,   278,     0,   279,
       0,   280,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,     0,   304,   305,   306,   307,
       0,   308,   309,     0,     0,     0,     0,   310,   311,   312,
     313,   314,   315,     0,     0,   316,   317,     0,   318,     0,
     319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,     0,     0,   329,   330,     0,     0,   331,   332,   333,
     334,     0,     0,     0,   335,   336,     0,     0,     0,   337,
       0,   338,   339,   340,     0,   341,   342,   343,     0,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   345,
     346,   347,     0,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,   360,   361,
     362,     0,   363,     0,   364,   365,   366,   367,   368,     0,
     369,   370,   371,     0,     0,   372,     0,     0,     0,   373,
     374,   375,   376,   377,     0,     0,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,   389,     0,   390,   391,     0,   392,   393,   394,
       0,   395,     0,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,     0,
       0,   409,   410,   411,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,     0,     0,     0,     0,     0,   424,
     425,   426,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,     0,
     451,   452,   453,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,     0,     0,     0,     0,     0,   461,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,   486,     0,   487,   488,   489,     0,     0,   490,
       0,     0,     0,   139,     0,   140,   141,   142,   143,   144,
    1103,     0,   145,     0,     0,     0,   146,     0,   777,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,   165,     0,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,  1315,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   490,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,   542,   148,   149,
     150,   151,   152,   153,     0,   154,     0,     0,     0,   155,
       0,     0,     0,   156,     0,     0,   157,   158,   159,     0,
     160,     0,   161,   162,     0,     0,   163,     0,     0,   164,
     165,     0,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,     0,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,     0,   193,     0,
       0,   194,     0,   195,     0,     0,   196,     0,     0,     0,
     197,   198,   199,     0,     0,   200,     0,     0,     0,     0,
     201,     0,   202,     0,     0,     0,     0,   203,   204,     0,
     205,     0,     0,     0,   206,     0,   207,   208,   209,   210,
     211,     0,     0,     0,   212,     0,     0,   213,   214,   215,
       0,     0,     0,   216,     0,   217,   218,     0,   219,   220,
     221,     0,     0,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,     0,   230,   231,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,     0,     0,   240,
       0,     0,     0,   241,   242,     0,   243,     0,   244,     0,
     245,   246,   247,   248,     0,   249,     0,   250,     0,     0,
       0,   251,   252,     0,   253,     0,     0,   254,   255,     0,
       0,     0,   256,   257,   258,   259,     0,     0,   260,   261,
     262,     0,     0,   263,     0,     0,     0,     0,   264,   265,
       0,     0,     0,   266,     0,     0,     0,   267,   268,     0,
     269,   270,     0,     0,     0,   271,     0,     0,   272,   273,
       0,     0,   274,     0,     0,   275,   276,     0,     0,     0,
       0,     0,   277,   278,     0,   279,     0,   280,     0,   281,
     282,     0,     0,     0,     0,     0,     0,     0,   283,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,     0,   301,   302,
     303,     0,   304,   305,   306,   307,     0,   308,   309,     0,
       0,     0,     0,   310,   311,   312,   313,   314,   315,     0,
       0,   316,   317,     0,   318,     0,   319,     0,   320,   321,
     322,   323,   324,   325,   326,   327,   328,     0,     0,   329,
     330,     0,     0,   331,   332,   333,   334,     0,     0,     0,
     335,   336,     0,     0,     0,   337,     0,   338,   339,   340,
       0,   341,   342,   343,     0,   344,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   345,   346,   347,     0,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,   360,   361,   362,     0,   363,     0,
     364,   365,   366,   367,   368,     0,   369,   370,   371,     0,
       0,   372,     0,     0,     0,   373,   374,   375,   376,   377,
       0,     0,   378,   379,   380,   381,   382,     0,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,   389,     0,
     390,   391,     0,   392,   393,   394,     0,   395,     0,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,     0,     0,   409,   410,   411,
     412,     0,     0,     0,   413,     0,     0,     0,   414,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
       0,     0,     0,     0,     0,   424,   425,   426,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,     0,   451,   452,   453,   454,
       0,     0,   455,   456,     0,   457,   458,   459,   460,     0,
       0,     0,     0,     0,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,     0,     0,     0,     0,     0,     0,   485,   486,     0,
     487,   488,   489,     0,     0,   490,     0,     0,     0,   139,
       0,   140,   141,   142,   143,   144,  2602,     0,   145,     0,
       0,     0,   146,     0,  2603,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   490,     0,     0,     0,     0,   139,
    2834,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,   542,     0,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   490,     0,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,  4529,   777,   147,     0,   148,   149,   150,   151,
     152,   153,     0,   154,     0,     0,     0,   155,     0,     0,
       0,   156,     0,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,     0,     0,   164,   165,     0,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,     0,   193,     0,     0,   194,
       0,   195,     0,     0,   196,     0,     0,     0,   197,   198,
     199,     0,     0,   200,     0,     0,     0,     0,   201,     0,
     202,     0,     0,     0,     0,   203,   204,     0,   205,     0,
       0,     0,   206,     0,   207,   208,   209,   210,   211,     0,
       0,     0,   212,     0,     0,   213,   214,   215,     0,     0,
       0,   216,     0,   217,   218,     0,   219,   220,   221,     0,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   230,   231,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,     0,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,   244,     0,   245,   246,
     247,   248,     0,   249,     0,   250,     0,     0,     0,   251,
     252,     0,   253,     0,     0,   254,   255,     0,     0,     0,
     256,   257,   258,   259,     0,     0,   260,   261,   262,     0,
       0,   263,     0,     0,     0,     0,   264,   265,     0,     0,
       0,   266,     0,     0,     0,   267,   268,     0,   269,   270,
       0,     0,     0,   271,     0,     0,   272,   273,     0,     0,
     274,     0,     0,   275,   276,     0,     0,     0,     0,     0,
     277,   278,     0,   279,     0,   280,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,     0,
     304,   305,   306,   307,     0,   308,   309,     0,     0,     0,
       0,   310,   311,   312,   313,   314,   315,     0,     0,   316,
     317,     0,   318,     0,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,     0,   329,   330,     0,
       0,   331,   332,   333,   334,     0,     0,     0,   335,   336,
       0,     0,     0,   337,     0,   338,   339,   340,     0,   341,
     342,   343,     0,   344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,   347,     0,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,     0,   364,   365,
     366,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,     0,     0,   373,   374,   375,   376,   377,     0,     0,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,   389,     0,   390,   391,
       0,   392,   393,   394,     0,   395,     0,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,     0,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,     0,   451,   452,   453,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,     0,     0,     0,
       0,     0,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,   486,     0,   487,   488,
     489,     0,     0,   490,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,   542,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,     0,
     490,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,   777,
     148,   149,   150,   151,   152,   153,     0,   154,     0,     0,
       0,   155,     0,     0,     0,   156,     0,     0,   157,   158,
     159,     0,   160,     0,   161,   162,     0,     0,   163,     0,
       0,   164,   165,     0,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,     0,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,     0,
     193,     0,     0,   194,     0,   195,     0,     0,   196,     0,
       0,     0,   197,   198,   199,     0,     0,   200,     0,     0,
       0,     0,   201,     0,   202,     0,     0,     0,     0,   203,
     204,     0,   205,     0,     0,     0,   206,     0,   207,   208,
     209,   210,   211,     0,     0,     0,   212,     0,     0,   213,
     214,   215,     0,     0,     0,   216,     0,   217,   218,     0,
     219,   220,   221,     0,     0,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,     0,   230,   231,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,     0,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
     244,     0,   245,   246,   247,   248,     0,   249,     0,   250,
       0,     0,     0,   251,   252,     0,   253,     0,     0,   254,
     255,     0,     0,     0,   256,   257,   258,   259,     0,     0,
     260,   261,   262,     0,     0,   263,     0,     0,     0,     0,
     264,   265,     0,     0,     0,   266,     0,     0,     0,   267,
     268,     0,   269,   270,     0,     0,     0,   271,     0,     0,
     272,   273,     0,     0,   274,     0,     0,   275,   276,     0,
       0,     0,     0,     0,   277,   278,     0,   279,     0,   280,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,     0,   304,   305,   306,   307,     0,   308,
     309,     0,     0,     0,     0,   310,   311,   312,   313,   314,
     315,     0,     0,   316,   317,     0,   318,     0,   319,     0,
     320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
       0,   329,   330,     0,     0,   331,   332,   333,   334,     0,
       0,     0,   335,   336,     0,     0,     0,   337,     0,   338,
     339,   340,     0,   341,   342,   343,     0,   344,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   345,   346,   347,
       0,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,     0,   364,   365,   366,   367,   368,     0,   369,   370,
     371,     0,     0,   372,     0,     0,     0,   373,   374,   375,
     376,   377,     0,     0,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
     389,     0,   390,   391,     0,   392,   393,   394,     0,   395,
       0,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,     0,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,     0,   451,   452,
     453,   454,     0,     0,   455,   456,     0,   457,   458,   459,
     460,     0,     0,     0,     0,     0,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
     486,     0,   487,   488,   489,     0,     0,   490,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,  2603,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   877,   878,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,   879,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   880,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   881,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   882,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   883,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   884,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   885,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   490,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,   886,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,   619,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,   136,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,     0,
     490,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,  1365,   148,
     149,   150,   151,   152,   153,     0,   154,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,   165,     0,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,   202,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,     0,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,   619,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,   335,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,   136,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,     0,   490,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  1717,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     877,   878,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,   202,
       0,     0,     0,   879,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   880,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   881,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   882,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   350,
     351,   883,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   884,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,     0,   490,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     886,   148,   149,   150,   151,   152,   153,     0,   154,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,   165,     0,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
     619,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   136,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,     0,   490,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,  3583,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,  1249,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,     0,   490,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,  1250,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,     0,
     490,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,  1250,   148,
     149,   150,   151,   152,     0,     0,  -367,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,     0,     0,     0,     0,   163,  3986,     0,
     164,   165,     0,   166,     0,     0,     0,     0,   169,   170,
     171,  3987,   173,   174,     0,   175,   176,     0,   177,   178,
       0,   180,     0,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,     0,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,     0,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,     0,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,     0,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,     0,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,  3988,   237,   238,   239,     0,     0,
       0,     0,     0,     0,     0,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,   255,
       0,     0,     0,   256,   257,   258,   259,  3989,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
       0,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,  3990,     0,     0,   271,     0,     0,     0,
     273,     0,     0,   274,  3991,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,  -322,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,     0,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,  3992,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   346,   347,     0,
       0,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
       0,     0,   385,     0,   387,  -322,     0,   388,     0,     0,
       0,   390,     0,     0,   392,   393,   394,  3993,   395,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,     0,
     405,   406,     0,   407,     0,     0,     0,     0,   409,   410,
     411,     0,     0,     0,     0,   413,     0,     0,     0,   414,
       0,     0,   416,     0,   418,     0,   419,     0,     0,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,   434,   435,   436,     0,     0,     0,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
       0,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,     0,     0,     0,   473,     0,     0,   474,     0,
       0,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,  -322,     0,     0,     0,   485,     0,
       0,   487,     0,   489,     0,   139,   490,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,  4521,
       0,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,   139,
     490,   140,   141,   142,   143,   144,  2170,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,   139,   490,   140,   141,   142,   143,   144,
    2179,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,   165,     0,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   139,   490,   140,
     141,   142,   143,   144,  3126,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,   202,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,   139,   490,   140,   141,   142,   143,   144,  3542,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   154,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,   165,     0,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,   202,  2510,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,  2511,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,  2512,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,  2513,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,  1013,  1014,
       0,   335,   336,     0,     0,  2514,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,  4508,   567,  4509,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
     463,   464,   465,   466,  2515,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,   139,   490,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,  1354,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,  1355,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,  1356,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,   619,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,  1357,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,   136,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,   139,
     490,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,  1367,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,  1368,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,   619,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
     136,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,   139,   490,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,   165,     0,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,  1912,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,  1913,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,   731,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,  1914,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   139,   490,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,  1354,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,   202,
       0,     0,     0,  1355,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,   619,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,   136,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,   139,   490,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   154,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,   165,     0,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,   970,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,   202,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,     0,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,   619,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,   335,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,   136,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,   139,   490,   140,   141,   142,
     143,   144,  1389,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,   619,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,   136,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,   139,
     490,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,   946,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,   947,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
     948,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,   139,   490,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,   165,     0,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,   202,     0,     0,     0,  2432,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
     619,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   136,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   139,   490,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,  1354,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,   202,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,   619,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,   136,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,   139,   490,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   154,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,   165,     0,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,   202,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,     0,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,   619,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,   335,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,   136,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,   139,   490,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,  2166,
       0,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,   136,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,   139,
     490,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,  4428,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,  4429,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,   139,   490,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,   165,     0,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,   567,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   139,   490,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,   202,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     241,   242,  1055,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,   139,   490,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   154,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,   165,     0,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,   202,     0,     0,     0,   879,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,     0,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,   335,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,  1888,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,   139,   490,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,  2075,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,   139,
     490,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,   879,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,   139,   490,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,   165,     0,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,   136,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   139,   490,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,   202,
       0,     0,     0,  2970,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,     0,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,   139,   490,   140,   141,   142,   143,   144,  2978,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   154,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,   165,     0,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,     0,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,   202,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,   212,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,   217,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,   251,   252,     0,   253,     0,     0,   254,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
     265,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,   272,
     273,     0,     0,   274,     0,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,   335,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,   343,     0,   344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,   347,     0,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,   389,
       0,   390,   391,     0,   392,   393,   394,     0,   395,     0,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,   486,
       0,   487,   488,   489,     0,   139,   490,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     154,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,   165,     0,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,     0,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,   202,     0,     0,
       0,  3002,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,   212,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
     217,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,     0,     0,   240,     0,     0,     0,   241,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,   251,   252,     0,   253,
       0,     0,   254,   255,     0,     0,     0,   256,   257,   258,
     259,     0,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,   265,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,     0,     0,     0,
     271,     0,     0,   272,   273,     0,     0,   274,     0,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,   335,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,   343,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,   347,     0,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,   389,     0,   390,   391,     0,   392,   393,
     394,     0,   395,     0,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,   486,     0,   487,   488,   489,     0,   139,
     490,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,   165,
       0,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,   202,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,   212,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,   217,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,     0,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
     251,   252,     0,   253,     0,     0,   254,   255,     0,     0,
       0,   256,   257,   258,   259,     0,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,   265,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,     0,     0,     0,   271,     0,     0,   272,   273,     0,
       0,   274,     0,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,   335,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,   343,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,   347,     0,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,  3066,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,   389,     0,   390,
     391,     0,   392,   393,   394,     0,   395,     0,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,   486,     0,   487,
     488,   489,     0,   139,   490,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,   165,     0,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,     0,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,   202,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,   212,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,   217,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
       0,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,   251,   252,     0,   253,     0,     0,
     254,   255,     0,     0,     0,   256,   257,   258,   259,     0,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,   265,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,     0,     0,     0,   271,     0,
       0,   272,   273,     0,     0,   274,     0,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,   335,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,   343,     0,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
     347,     0,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,   389,     0,   390,   391,     0,   392,   393,   394,     0,
     395,     0,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,   486,     0,   487,   488,   489,     0,   139,   490,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,   165,     0,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,   202,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,   212,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,   217,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
       0,   237,  1816,   239,     0,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,   251,   252,
       0,   253,     0,     0,   254,   255,     0,     0,     0,   256,
     257,   258,   259,     0,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,   265,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,     0,
       0,     0,   271,     0,     0,   272,   273,     0,     0,   274,
       0,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,  1817,   333,   334,     0,     0,     0,   335,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
     343,     0,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,   347,     0,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,   389,     0,   390,   391,     0,
     392,   393,   394,     0,   395,     0,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,   486,     0,   487,   488,   489,
       0,   139,   490,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,     0,     0,  -367,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,     0,     0,     0,     0,   163,  3986,     0,
     164,   165,     0,   166,     0,     0,     0,     0,   169,   170,
     171,  3987,   173,   174,     0,   175,   176,     0,   177,   178,
       0,   180,     0,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,     0,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,     0,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,     0,     0,     0,   213,   214,
     215,     0,  -337,  -337,   216,     0,  -337,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,     0,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,  3988,   237,   238,   239,     0,     0,
       0,     0,     0,     0,     0,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,   255,
       0,     0,     0,   256,   257,   258,   259,  3989,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
       0,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,  3990,     0,     0,   271,     0,     0,     0,
     273,     0,     0,   274,  3991,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,  -322,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,     0,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,  3992,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   346,   347,     0,
       0,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
       0,     0,   385,     0,   387,  -322,     0,   388,     0,     0,
       0,   390,     0,     0,   392,   393,   394,  3993,   395,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,     0,
     405,   406,     0,   407,     0,     0,     0,     0,   409,   410,
     411,     0,     0,     0,     0,   413,     0,     0,     0,   414,
       0,     0,   416,     0,   418,     0,   419,     0,     0,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,   434,   435,   436,     0,     0,     0,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
       0,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,     0,     0,     0,   473,     0,     0,   474,     0,
       0,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,  -322,     0,     0,     0,   485,     0,
       0,   487,     0,   489,     0,   139,   490,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,     0,     0,
    -367,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,     0,     0,     0,
       0,   163,  3986,     0,   164,   165,     0,   166,     0,     0,
       0,     0,   169,   170,   171,  3987,   173,   174,     0,   175,
     176,     0,   177,   178,     0,   180,     0,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,     0,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,     0,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,     0,
       0,     0,   213,   214,   215,     0,  -358,     0,   216,     0,
    -358,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,     0,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,  3988,   237,
     238,   239,     0,     0,     0,     0,     0,     0,     0,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,     0,   252,     0,     0,
       0,     0,     0,   255,     0,     0,     0,   256,   257,   258,
     259,  3989,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,     0,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,  3990,     0,     0,
     271,     0,     0,     0,   273,     0,     0,   274,  3991,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
    -322,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,     0,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,  3992,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   346,   347,     0,     0,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,     0,     0,   385,     0,   387,  -322,
       0,   388,     0,     0,     0,   390,     0,     0,   392,   393,
     394,  3993,   395,     0,     0,     0,   397,   398,   399,   400,
     401,   402,   403,     0,   405,   406,     0,   407,     0,     0,
       0,     0,   409,   410,   411,     0,     0,     0,     0,   413,
       0,     0,     0,   414,     0,     0,   416,     0,   418,     0,
     419,     0,     0,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,     0,   433,   434,   435,   436,     0,
       0,     0,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,     0,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,     0,     0,     0,   473,
       0,     0,   474,     0,     0,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,  -358,     0,  -322,     0,
       0,     0,   485,     0,     0,   487,     0,   489,     0,   139,
     490,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,     0,     0,  -367,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,     0,     0,     0,     0,   163,  3986,     0,   164,   165,
       0,   166,     0,     0,     0,     0,   169,   170,   171,  3987,
     173,   174,     0,   175,   176,     0,   177,   178,     0,   180,
       0,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,     0,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,     0,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,     0,     0,     0,   213,   214,   215,     0,
    -355,     0,   216,     0,  -355,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
       0,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,  3988,   237,   238,   239,     0,     0,     0,     0,
       0,     0,     0,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
       0,   252,     0,     0,     0,     0,     0,   255,     0,     0,
       0,   256,   257,   258,   259,  3989,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,     0,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,  3990,     0,     0,   271,     0,     0,     0,   273,     0,
       0,   274,  3991,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,  -322,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,     0,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,  3992,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   346,   347,     0,     0,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,     0,     0,
     385,     0,   387,  -322,     0,   388,     0,     0,     0,   390,
       0,     0,   392,   393,   394,  3993,   395,     0,     0,     0,
     397,   398,   399,   400,   401,   402,   403,     0,   405,   406,
       0,   407,     0,     0,     0,     0,   409,   410,   411,     0,
       0,     0,     0,   413,     0,     0,     0,   414,     0,     0,
     416,     0,   418,     0,   419,     0,     0,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,     0,   433,
     434,   435,   436,     0,     0,     0,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,     0,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
       0,     0,     0,   473,     0,     0,   474,     0,     0,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
    -355,     0,  -322,     0,     0,     0,   485,     0,     0,   487,
       0,   489,     0,   139,   490,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,     0,     0,  -367,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,     0,     0,     0,     0,   163,
    3986,     0,   164,   165,     0,   166,     0,     0,     0,     0,
     169,   170,   171,  3987,   173,   174,     0,   175,   176,     0,
     177,   178,     0,   180,     0,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,     0,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,  4325,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,  3988,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,  3989,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  3990,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,  3991,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,  -322,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,  3992,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,  -322,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,  3993,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,  -322,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,   139,   490,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
       0,     0,  -367,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,     0,
       0,     0,     0,   163,  3986,     0,   164,   165,     0,   166,
       0,     0,     0,     0,   169,   170,   171,  3987,   173,   174,
       0,   175,   176,     0,   177,   178,     0,   180,     0,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
       0,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,     0,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,     0,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,  -360,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,     0,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
    3988,   237,   238,   239,     0,     0,     0,     0,     0,     0,
       0,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,     0,   252,
       0,     0,     0,     0,     0,   255,     0,     0,     0,   256,
     257,   258,   259,  3989,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,     0,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,  3990,
       0,     0,   271,     0,     0,     0,   273,     0,     0,   274,
    3991,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,  -322,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,     0,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
    3992,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   346,   347,     0,     0,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,     0,     0,   385,     0,
     387,  -322,     0,   388,     0,     0,     0,   390,     0,     0,
     392,   393,   394,  3993,   395,     0,     0,     0,   397,   398,
     399,   400,   401,   402,   403,     0,   405,   406,     0,   407,
       0,     0,     0,     0,   409,   410,   411,     0,     0,     0,
       0,   413,     0,     0,     0,   414,     0,     0,   416,     0,
     418,     0,   419,     0,     0,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,     0,   433,   434,   435,
     436,     0,     0,     0,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,     0,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,     0,     0,
       0,   473,     0,     0,   474,     0,     0,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
    -322,     0,     0,     0,   485,     0,     0,   487,     0,   489,
       0,   139,   490,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,     0,     0,  -367,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,     0,     0,     0,     0,   163,  3986,     0,
     164,   165,     0,   166,     0,     0,     0,     0,   169,   170,
     171,  3987,   173,   174,     0,   175,   176,     0,   177,   178,
       0,   180,     0,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,     0,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,     0,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,     0,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,  4433,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,     0,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,  3988,   237,   238,   239,     0,     0,
       0,     0,     0,     0,     0,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,   255,
       0,     0,     0,   256,   257,   258,   259,  3989,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
       0,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,  3990,     0,     0,   271,     0,     0,     0,
     273,     0,     0,   274,  3991,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,  -322,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,     0,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,  3992,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   346,   347,     0,
       0,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
       0,     0,   385,     0,   387,  -322,     0,   388,     0,     0,
       0,   390,     0,     0,   392,   393,   394,  3993,   395,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,     0,
     405,   406,     0,   407,     0,     0,     0,     0,   409,   410,
     411,     0,     0,     0,     0,   413,     0,     0,     0,   414,
       0,     0,   416,     0,   418,     0,   419,     0,     0,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,   434,   435,   436,     0,     0,     0,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
       0,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,     0,     0,     0,   473,     0,     0,   474,     0,
       0,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,  -322,     0,     0,     0,   485,     0,
       0,   487,     0,   489,     0,   139,   490,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,     0,     0,
    -367,     0,     0,     0,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,     0,     0,     0,
       0,   163,  3986,     0,   164,   165,     0,   166,     0,     0,
       0,     0,   169,   170,   171,  3987,   173,   174,     0,   175,
     176,     0,   177,   178,     0,   180,     0,   182,   183,   184,
     185,     0,   186,   187,     0,   188,   189,   190,     0,   192,
       0,     0,     0,   193,     0,     0,   194,     0,   195,     0,
       0,   196,     0,     0,     0,   197,   198,   199,     0,     0,
     200,     0,     0,     0,     0,   201,     0,     0,     0,     0,
       0,     0,   203,   204,     0,   205,     0,     0,     0,   206,
       0,   207,   208,   209,   210,   211,     0,     0,     0,     0,
       0,     0,   213,   214,   215,     0,     0,     0,   216,     0,
    4479,   218,     0,   219,   220,   221,     0,     0,   222,   223,
       0,   224,   225,   226,   227,   228,     0,     0,     0,   230,
     231,   232,   233,   234,     0,     0,   235,   236,  3988,   237,
     238,   239,     0,     0,     0,     0,     0,     0,     0,   242,
       0,   243,     0,   244,     0,   245,   246,   247,   248,     0,
     249,     0,   250,     0,     0,     0,     0,   252,     0,     0,
       0,     0,     0,   255,     0,     0,     0,   256,   257,   258,
     259,  3989,     0,   260,   261,   262,     0,     0,   263,     0,
       0,     0,     0,   264,     0,     0,     0,     0,   266,     0,
       0,     0,   267,   268,     0,   269,   270,  3990,     0,     0,
     271,     0,     0,     0,   273,     0,     0,   274,  3991,     0,
     275,   276,     0,     0,     0,     0,     0,   277,   278,     0,
     279,     0,   280,     0,   281,   282,     0,     0,     0,     0,
    -322,     0,     0,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,     0,   304,   305,   306,
     307,     0,   308,   309,     0,     0,     0,     0,   310,   311,
     312,   313,   314,   315,     0,     0,   316,   317,     0,   318,
       0,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,     0,   329,   330,     0,     0,   331,   332,
     333,   334,     0,     0,     0,     0,   336,     0,     0,     0,
     337,     0,   338,   339,   340,     0,   341,   342,  3992,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   346,   347,     0,     0,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,     0,     0,     0,     0,
     361,   362,     0,   363,     0,   364,   365,   366,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,     0,     0,
     373,   374,   375,   376,   377,     0,     0,   378,   379,   380,
     381,   382,     0,   383,     0,     0,   385,     0,   387,  -322,
       0,   388,     0,     0,     0,   390,     0,     0,   392,   393,
     394,  3993,   395,     0,     0,     0,   397,   398,   399,   400,
     401,   402,   403,     0,   405,   406,     0,   407,     0,     0,
       0,     0,   409,   410,   411,     0,     0,     0,     0,   413,
       0,     0,     0,   414,     0,     0,   416,     0,   418,     0,
     419,     0,     0,   422,   423,     0,     0,     0,     0,     0,
     424,   425,   426,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,     0,   433,   434,   435,   436,     0,
       0,     0,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
       0,   451,   452,   453,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,     0,     0,     0,     0,     0,   461,
     462,     0,     0,     0,     0,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,     0,     0,     0,   473,
       0,     0,   474,     0,     0,     0,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,     0,     0,  -322,     0,
       0,     0,   485,     0,     0,   487,     0,   489,     0,   139,
     490,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,     0,     0,  -367,     0,     0,     0,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,     0,     0,     0,     0,   163,  3986,     0,   164,   165,
       0,   166,     0,     0,     0,     0,   169,   170,   171,  3987,
     173,   174,     0,   175,   176,     0,   177,   178,     0,   180,
       0,   182,   183,   184,   185,     0,   186,   187,     0,   188,
     189,   190,     0,   192,     0,     0,     0,   193,     0,     0,
     194,     0,   195,     0,     0,   196,     0,     0,     0,   197,
     198,   199,     0,     0,   200,     0,     0,     0,     0,   201,
       0,     0,     0,     0,     0,     0,   203,   204,     0,   205,
       0,     0,     0,   206,     0,   207,   208,   209,   210,   211,
       0,     0,     0,     0,     0,     0,   213,   214,   215,     0,
       0,     0,   216,     0,  -341,   218,     0,   219,   220,   221,
       0,     0,   222,   223,     0,   224,   225,   226,   227,   228,
       0,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     235,   236,  3988,   237,   238,   239,     0,     0,     0,     0,
       0,     0,     0,   242,     0,   243,     0,   244,     0,   245,
     246,   247,   248,     0,   249,     0,   250,     0,     0,     0,
       0,   252,     0,     0,     0,     0,     0,   255,     0,     0,
       0,   256,   257,   258,   259,  3989,     0,   260,   261,   262,
       0,     0,   263,     0,     0,     0,     0,   264,     0,     0,
       0,     0,   266,     0,     0,     0,   267,   268,     0,   269,
     270,  3990,     0,     0,   271,     0,     0,     0,   273,     0,
       0,   274,  3991,     0,   275,   276,     0,     0,     0,     0,
       0,   277,   278,     0,   279,     0,   280,     0,   281,   282,
       0,     0,     0,     0,  -322,     0,     0,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
       0,   304,   305,   306,   307,     0,   308,   309,     0,     0,
       0,     0,   310,   311,   312,   313,   314,   315,     0,     0,
     316,   317,     0,   318,     0,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,     0,   329,   330,
       0,     0,   331,   332,   333,   334,     0,     0,     0,     0,
     336,     0,     0,     0,   337,     0,   338,   339,   340,     0,
     341,   342,  3992,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   346,   347,     0,     0,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
       0,     0,     0,     0,   361,   362,     0,   363,     0,   364,
     365,   366,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,     0,     0,   373,   374,   375,   376,   377,     0,
       0,   378,   379,   380,   381,   382,     0,   383,     0,     0,
     385,     0,   387,  -322,     0,   388,     0,     0,     0,   390,
       0,     0,   392,   393,   394,  3993,   395,     0,     0,     0,
     397,   398,   399,   400,   401,   402,   403,     0,   405,   406,
       0,   407,     0,     0,     0,     0,   409,   410,   411,     0,
       0,     0,     0,   413,     0,     0,     0,   414,     0,     0,
     416,     0,   418,     0,   419,     0,     0,   422,   423,     0,
       0,     0,     0,     0,   424,   425,   426,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,     0,   433,
     434,   435,   436,     0,     0,     0,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,     0,   451,   452,   453,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,     0,     0,
       0,     0,     0,   461,   462,     0,     0,     0,     0,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
       0,     0,     0,   473,     0,     0,   474,     0,     0,     0,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
       0,     0,  -322,     0,     0,     0,   485,     0,     0,   487,
       0,   489,     0,   139,   490,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,     0,     0,  -367,     0,
       0,     0,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,     0,     0,     0,     0,   163,
    3986,     0,   164,   165,     0,   166,     0,     0,     0,     0,
     169,   170,   171,  3987,   173,   174,     0,   175,   176,     0,
     177,   178,     0,   180,     0,   182,   183,   184,   185,     0,
     186,   187,     0,   188,   189,   190,     0,   192,     0,     0,
       0,   193,     0,     0,   194,     0,   195,     0,     0,   196,
       0,     0,     0,   197,   198,   199,     0,     0,   200,     0,
       0,     0,     0,   201,     0,     0,     0,     0,     0,     0,
     203,   204,     0,   205,     0,     0,     0,   206,     0,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     213,   214,   215,     0,     0,     0,   216,     0,     0,   218,
       0,   219,   220,   221,     0,     0,   222,   223,     0,   224,
     225,   226,   227,   228,     0,     0,     0,   230,   231,   232,
     233,   234,     0,     0,   235,   236,  3988,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,   242,     0,   243,
       0,   244,     0,   245,   246,   247,   248,     0,   249,     0,
     250,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   255,     0,     0,     0,   256,   257,   258,   259,  3989,
       0,   260,   261,   262,     0,     0,   263,     0,     0,     0,
       0,   264,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,     0,   269,   270,  3990,     0,     0,   271,     0,
       0,     0,   273,     0,     0,   274,  3991,     0,   275,   276,
       0,     0,     0,     0,     0,   277,   278,     0,   279,     0,
     280,     0,   281,   282,     0,     0,     0,     0,  -322,     0,
       0,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,     0,   304,   305,   306,   307,     0,
     308,   309,     0,     0,     0,     0,   310,   311,   312,   313,
     314,   315,     0,     0,   316,   317,     0,   318,     0,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,     0,   329,   330,     0,     0,   331,   332,   333,   334,
       0,     0,     0,     0,   336,     0,     0,     0,   337,     0,
     338,   339,   340,     0,   341,   342,  3992,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     347,     0,     0,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,     0,     0,     0,     0,   361,   362,
       0,   363,     0,   364,   365,   366,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,     0,     0,   373,   374,
     375,   376,   377,     0,     0,   378,   379,   380,   381,   382,
       0,   383,     0,     0,   385,     0,   387,  -322,     0,   388,
       0,     0,     0,   390,     0,     0,   392,   393,   394,  3993,
     395,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
       0,   422,   423,     0,     0,     0,     0,     0,   424,   425,
     426,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,   434,   435,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,     0,   451,
     452,   453,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,     0,     0,     0,     0,     0,   461,   462,     0,
       0,     0,     0,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,     0,     0,     0,   473,     0,     0,
     474,     0,     0,     0,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,     0,     0,  -322,     0,     0,     0,
     485,     0,     0,   487,     0,   489,     0,   139,   490,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
       0,     0,  -367,     0,     0,     0,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,     0,
       0,     0,     0,   163,  3986,     0,   164,   165,     0,   166,
       0,     0,     0,     0,   169,   170,   171,  3987,   173,   174,
       0,   175,   176,     0,   177,   178,     0,   180,     0,   182,
     183,   184,   185,     0,   186,   187,     0,   188,   189,   190,
       0,   192,     0,     0,     0,   193,     0,     0,   194,     0,
     195,     0,     0,   196,     0,     0,     0,   197,   198,   199,
       0,     0,   200,     0,     0,     0,     0,   201,     0,     0,
       0,     0,     0,     0,   203,   204,     0,   205,     0,     0,
       0,   206,     0,   207,   208,   209,   210,   211,     0,     0,
       0,     0,     0,     0,   213,   214,   215,     0,     0,     0,
     216,     0,     0,   218,     0,   219,   220,   221,     0,     0,
     222,   223,     0,   224,   225,   226,   227,   228,     0,     0,
       0,   230,   231,   232,   233,   234,     0,     0,   235,   236,
    3988,   237,   238,   239,     0,     0,     0,     0,     0,     0,
       0,   242,     0,   243,     0,   244,     0,   245,   246,   247,
     248,     0,   249,     0,   250,     0,     0,     0,     0,   252,
       0,     0,     0,     0,     0,   255,     0,     0,     0,   256,
     257,   258,   259,  3989,     0,   260,   261,   262,     0,     0,
     263,     0,     0,     0,     0,   264,     0,     0,     0,     0,
     266,     0,     0,     0,   267,   268,     0,   269,   270,  3990,
       0,     0,   271,     0,     0,     0,   273,     0,     0,   274,
    3991,     0,   275,   276,     0,     0,     0,     0,     0,   277,
     278,     0,   279,     0,   280,     0,   281,   282,     0,     0,
       0,     0,  -322,     0,     0,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,     0,   304,
     305,   306,   307,     0,   308,   309,     0,     0,     0,     0,
     310,   311,   312,   313,   314,   315,     0,     0,   316,   317,
       0,   318,     0,   319,     0,   320,   321,   322,   323,   324,
     325,   326,   327,   328,     0,     0,   329,   330,     0,     0,
     331,   332,   333,   334,     0,     0,     0,     0,   336,     0,
       0,     0,   337,     0,   338,   339,   340,     0,   341,   342,
    3992,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   346,   347,     0,     0,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,     0,     0,
       0,     0,   361,   362,     0,   363,     0,   364,   365,   366,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
       0,     0,   373,   374,   375,   376,   377,     0,     0,   378,
     379,   380,   381,   382,     0,   383,     0,     0,   385,     0,
     387,  -322,     0,   388,     0,     0,     0,   390,     0,     0,
     392,   393,   394,  3993,   395,     0,     0,     0,   397,   398,
     399,   400,   401,   402,   403,     0,   405,   406,     0,   407,
       0,     0,     0,     0,   409,   410,   411,     0,     0,     0,
       0,   413,     0,     0,     0,   414,     0,     0,   416,     0,
     418,     0,   419,     0,     0,   422,   423,     0,     0,     0,
       0,     0,   424,   425,   426,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,     0,   433,   434,   435,
     436,     0,     0,     0,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,     0,   451,   452,   453,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,     0,     0,     0,     0,
       0,   461,   462,     0,     0,     0,     0,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,     0,     0,
       0,   473,     0,     0,  4328,     0,     0,     0,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,     0,     0,
    -322,     0,     0,     0,   485,     0,     0,   487,     0,   489,
       0,   139,   490,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,     0,     0,     0,     0,     0,     0,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,     0,     0,     0,     0,   163,     0,     0,
     164,   165,     0,   166,     0,     0,     0,     0,   169,   170,
     171,     0,   173,   174,     0,   175,   176,     0,   177,   178,
       0,   180,     0,   182,   183,   184,   185,     0,   186,   187,
       0,   188,   189,   190,     0,   192,     0,     0,     0,   193,
       0,     0,   194,     0,   195,     0,     0,   196,     0,     0,
       0,   197,   198,   199,     0,     0,   200,     0,     0,     0,
       0,   201,     0,     0,     0,     0,     0,     0,   203,   204,
       0,   205,     0,     0,     0,   206,     0,   207,   208,   209,
     210,   211,     0,     0,     0,     0,     0,     0,   213,   214,
     215,     0,     0,     0,   216,     0,     0,   218,     0,   219,
     220,   221,     0,     0,   222,   223,     0,   224,   225,   226,
     227,   228,     0,     0,     0,   230,   231,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,     0,     0,
       0,     0,     0,     0,     0,   242,     0,   243,     0,   244,
       0,   245,   246,   247,   248,     0,   249,     0,   250,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,   255,
       0,     0,     0,   256,   257,   258,   259,     0,     0,   260,
     261,   262,     0,     0,   263,     0,     0,     0,     0,   264,
       0,     0,     0,     0,   266,     0,     0,     0,   267,   268,
       0,   269,   270,     0,     0,     0,   271,     0,     0,     0,
     273,     0,     0,   274,     0,     0,   275,   276,     0,     0,
       0,     0,     0,   277,   278,     0,   279,     0,   280,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,     0,   304,   305,   306,   307,     0,   308,   309,
       0,     0,     0,     0,   310,   311,   312,   313,   314,   315,
       0,     0,   316,   317,     0,   318,     0,   319,     0,   320,
     321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     329,   330,     0,     0,   331,   332,   333,   334,     0,     0,
       0,     0,   336,     0,     0,     0,   337,     0,   338,   339,
     340,     0,   341,   342,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   346,   347,     0,
       0,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,     0,     0,     0,     0,   361,   362,     0,   363,
       0,   364,   365,   366,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,     0,     0,   373,   374,   375,   376,
     377,     0,     0,   378,   379,   380,   381,   382,     0,   383,
       0,     0,   385,     0,   387,     0,     0,   388,     0,     0,
       0,   390,     0,     0,   392,   393,   394,     0,   395,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,     0,
     405,   406,     0,   407,     0,     0,     0,     0,   409,   410,
     411,     0,     0,     0,     0,   413,     0,     0,     0,   414,
       0,     0,   416,     0,   418,     0,   419,     0,     0,   422,
     423,     0,     0,     0,     0,     0,   424,   425,   426,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,   434,   435,   436,     0,     0,     0,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,     0,   451,   452,   453,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
       0,     0,     0,     0,     0,   461,   462,     0,     0,     0,
       0,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,     0,     0,     0,   473,     0,     0,   474,     0,
       0,     0,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   487,     0,   489,     0,     0,   490
};

static const yytype_int16 yycheck[] =
{
       6,   124,   652,   653,   579,   643,   963,   578,   579,   882,
     883,   598,   964,  1153,    20,  1053,  1153,   862,    24,   892,
    1581,  1392,  1059,    21,  1249,  1100,  1499,    33,     6,   714,
    1296,  1123,  1714,    31,    40,  1047,  1048,    43,  1835,    37,
    1497,    47,   615,   922,  1373,   898,  2038,  1488,    54,  2109,
    1249,  1488,  1176,   674,  2564,   628,  1478,  2503,  2366,  1183,
    1482,  2879,  1484,  2195,  2693,  2492,  1478,   521,  2200,  2411,
     923,  2465,  2466,  1488,  2159,  2521,  2522,  1440,   523,  1090,
    1302,  2001,  1787,   639,   640,  1478,  2005,   900,  3323,  1482,
      96,  1484,  1184,  1185,    24,  2001,  1188,  1189,  1190,  1191,
    3058,  1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,   922,
       4,  2007,   118,   968,   120,  2011,  2681,   123,   124,   125,
     968,  2429,  1941,  1857,   657,  1547,  2022,  2291,  2134,  2559,
    2537,  2565,  2152,  3344,  1403,  1547,  3568,  1468,  2034,  2134,
    2160,  3129,   120,  2329,   782,   123,    16,    17,     9,   770,
     771,   772,  1421,  2473,  1547,    33,    70,  1956,  1957,    19,
    1429,  1430,   783,  1574,    17,    46,    96,   942,  1975,    30,
      24,   121,  3384,  3385,  1973,    36,  3388,  1993,    17,  2731,
     924,  2734,    29,  2735,    20,  1866,  1222,  2123,   141,  3600,
    1984,  1990,  1991,   159,   140,  3407,   187,  2064,  2872,   172,
      50,  3413,   152,  2649,  2650,  2737,  3212,  2006,    75,    50,
    2009,  2010,   281,  2012,  2134,   131,  2015,  2016,    16,    17,
    2019,   156,   264,   106,    19,  2024,  2966,  2525,  2134,   146,
    2029,  2030,  2031,  2032,  2033,  3610,  3052,    21,  2037,   812,
    2039,  3326,    16,    17,    68,    19,  2045,  2046,  2047,  2048,
     314,   689,  2051,    68,  2053,   191,   374,    82,    33,   368,
    2657,    11,   121,  2521,  2522,   193,   367,    59,    55,   121,
     843,  3657,   213,   134,    58,    59,   356,   367,   222,   248,
     135,   359,   417,   104,   142,    16,    17,    16,    17,    16,
      17,   127,   152,   387,    80,  2089,   156,  2091,  2092,   152,
     152,    74,   266,  2097,  2098,   469,   303,  2285,    16,    17,
     364,    23,  2106,  2107,  2833,   121,   469,  2111,   389,  2118,
    2119,  2120,  2121,   761,    16,    17,    61,   190,    74,  3564,
    2158,   828,   374,    16,    17,   389,   245,   161,  1065,  1066,
    1067,   422,   222,   226,   487,   360,   152,   187,   417,   546,
    1077,   123,   577,  3731,   793,   980,   981,   270,   589,    16,
      17,   156,   126,    16,    17,  2884,   156,    16,    17,   123,
     589,   566,    42,    35,   228,  1025,  1026,  1027,   226,    16,
      17,  1108,   226,   506,  1111,    16,    17,    16,    17,    16,
      17,  2649,  2650,   537,   589,  1020,   540,  2717,   417,  2719,
      35,   281,   633,   251,  1089,  1132,  1133,   632,   639,  1136,
      16,    17,  3790,   632,   633,   412,   559,   856,  1103,   438,
      62,    16,    17,   546,    21,   126,  3638,  1154,  1155,    70,
      16,    17,   146,   273,  2451,  3647,    33,    67,   994,   146,
     413,   638,   522,    21,   357,    21,   461,    19,   945,   385,
      47,   186,   164,   472,    64,    33,   310,    33,  3670,   190,
    3892,    58,    59,  3675,   319,   135,   238,   631,   232,    47,
    3856,    47,    16,    17,   609,   546,   404,   250,   631,   448,
      58,    59,    58,    59,   238,  2279,   349,   261,    20,  1441,
     487,   572,   546,  1366,   458,   281,   440,    16,    17,   358,
     506,   190,   508,   373,   250,   152,   376,   961,   417,   152,
      16,    17,    67,   614,   355,   633,   469,  2683,    16,    17,
     378,   527,   602,   273,   614,   531,    16,    17,   303,  2540,
     639,   477,   970,   413,  3350,   577,   542,   631,    16,    17,
     546,  1179,   548,   478,  1397,   614,  3781,  1400,   210,  2022,
     486,   375,  1405,  1975,   632,   561,  1885,   156,  2965,  2986,
     375,  2968,  2969,  1975,  1249,    10,  1187,   631,   355,  2889,
    2890,  1993,   578,    16,    17,   210,    50,   518,  1431,  1432,
     586,   190,  1975,  1204,   156,    16,    17,   412,  2580,  2001,
     156,    16,    17,  3333,  3969,   127,  1050,   447,   604,   373,
    1993,  2795,   376,  2164,   246,  2525,   447,  3595,  3282,   615,
     156,   617,   540,  1468,   587,  2700,   452,   264,   609,  2525,
    1468,   264,   628,   629,   630,    16,    17,  1072,  1073,   635,
    3715,   637,  1857,   639,   640,  3081,   477,   603,   644,   645,
    1453,  2056,   373,   649,   373,   376,   373,   376,  1093,   376,
    1742,  2657,   630,   659,   660,   661,  2954,  1102,  1857,   665,
     633,  1753,  2657,   669,  1756,   373,  1935,   402,   376,  1114,
    1115,  1116,  1228,    16,    17,   536,  2543,  1122,   631,  3890,
    2547,   373,   635,  1427,   376,  3082,   809,   637,   478,   606,
     373,  1546,  2486,   376,  2561,  2562,   557,  2504,  1546,   629,
     190,  2123,   569,   564,  4115,   635,  2573,  2523,   714,   281,
     557,  2123,  2134,  3719,  4146,  2651,   373,   631,   557,   376,
     373,  3806,  2134,   376,   373,  1736,   587,   376,   609,  1765,
    2123,  3250,  3251,  3252,   617,  2602,   373,  2657,   654,   376,
    2151,  2134,   373,  1299,   373,   376,   373,   376,   618,   376,
    2431,  2657,  2546,   631,  2548,  2554,   609,  1532,  1314,   882,
    3102,  2555,   557,   886,   887,   406,   636,   373,  2567,   775,
     376,   777,  3291,  3292,  3293,  2569,   899,   637,   373,   633,
     601,   376,  2576,   633,   637,   637,  2117,   373,   624,  1362,
     376,   575,    16,    17,  2588,  2589,  2590,   803,   804,   805,
    2594,   807,   808,   809,   596,   811,   812,  2993,  3128,    41,
    3798,   817,  2679,  3366,  3367,  2178,  3368,   823,  2796,   583,
     618,  3374,  2616,  3081,  3377,  3378,   804,   833,  1401,   373,
     808,   637,   376,   811,  4266,  3920,   609,   843,   844,   962,
    3372,  3394,   848,   578,   618,   417,    16,    17,  1381,   639,
    3402,  2648,    16,    17,   373,  3408,  2655,   376,  3410,   633,
    3413,  3414,  3415,  3416,  1591,  3417,  3951,   373,    16,    17,
     376,  3403,  3404,  2701,  2702,   373,   882,   487,   376,   478,
     886,   887,   583,   373,   546,   527,   376,   618,   518,   618,
    2907,   618,   606,   899,   126,   373,   537,   589,   376,   606,
    3529,  1472,   633,   833,   633,   632,   633,  4119,  3342,  4121,
     618,   546,   478,  1486,   844,  2372,    16,    17,   848,   560,
     452,    16,    17,  3330,   632,   633,   618,    24,  3358,  3887,
     373,  3125,   478,   376,  1661,   618,   942,  3279,  1665,    57,
    3106,   633,   373,   837,   633,   376,    45,  3111,   373,   632,
     633,   376,  2963,    16,    17,   816,   962,  4042,   964,   404,
     607,   618,  1689,   518,   607,   618,    16,    17,    78,   618,
     172,    16,    17,   447,  1659,   632,   633,    65,   575,   632,
     633,   618,   373,   632,   633,   376,  3294,   618,   994,   618,
     637,   618,  3597,  4025,   637,   632,   633,   575,  1871,   575,
     185,   632,  3322,   632,   633,   632,   633,    81,   652,   653,
      61,  2693,   618,    16,    17,    16,    17,   626,  1891,   595,
     596,   599,  1555,   618,   633,    42,   100,   633,   154,   275,
     373,  3116,   618,   376,  2954,  3120,   118,   222,   633,  1045,
     639,  4151,   614,  1166,   193,   442,  4281,   633,  2954,  1055,
      16,    17,  1931,   631,   172,  3574,    16,    17,   176,   353,
      16,    17,  2425,   363,   509,  2862,  2539,  2540,   175,   187,
     228,  1924,  1951,   639,   618,   263,  3082,    16,    17,  3273,
    1203,  1934,  2504,  1089,  1937,  1938,   172,  3082,   245,   633,
    4175,   337,  2504,   639,  2465,  2466,  3116,  1103,   508,   618,
    3120,  2523,    16,    17,    16,    17,   400,  2926,   207,    11,
    1760,  2504,   618,  2525,   633,  1045,   561,  3036,  1931,  4204,
     618,   531,  2989,  4155,  2829,  1055,   632,  1250,   618,  2595,
    2523,   228,   119,  2225,  1755,   633,    16,    17,  1951,   280,
     618,  3037,   632,  2180,   154,  3750,  3711,  1153,  2882,   373,
    3728,   185,   376,    16,    17,   633,   601,  2598,  3990,  3991,
    1166,  2598,  3082,   154,    16,    17,  2710,  3963,    16,    17,
    2392,   546,  1857,   450,   512,   618,  3082,   124,  2302,    74,
    1830,   248,  1305,  2598,   156,     8,  2983,   618,   222,     8,
     633,  3796,   259,   618,   303,  1768,   278,  1203,   356,   118,
     318,   632,  1208,   373,  4022,  2474,   376,  1213,   633,   373,
      29,   413,   376,   310,  1770,   187,  4034,   200,   228,   612,
     355,   123,  1228,    24,   118,   373,   152,   618,   376,  2651,
     356,   342,  1805,  2308,  2309,  2657,   633,   228,   190,  2651,
      16,    17,   633,  1249,  1250,  2657,    16,    17,   187,    19,
     237,   358,    16,    17,   365,   404,    16,    17,  2651,   356,
     417,   136,  2117,   182,  2657,    16,    17,    16,    17,  2117,
    1843,  1844,   518,   373,  2411,   618,   376,   359,   373,   511,
    1286,   376,  1288,  1213,  1290,  4395,  1859,   270,  2380,   632,
    2301,   210,   230,  1299,  3286,   413,   222,   432,   439,  1305,
    2311,   239,   534,  4118,    16,    17,    16,    17,  1314,  1315,
     373,  4546,   264,   376,  4110,    16,    17,   655,    62,    98,
     645,   149,  2866,   373,   137,   342,   376,   413,   373,   417,
     562,   376,   160,   633,   281,    16,    17,  1343,  3732,    16,
      17,    16,    17,    16,    17,  2485,   356,  1353,  2485,   993,
      16,    17,  1475,  2716,   464,   250,  1362,   180,  3490,   278,
    1290,   392,   639,   462,   522,   356,  1372,  1373,    16,    17,
     373,  3713,   373,   376,   425,   376,  1382,  1383,  1384,  1385,
    1386,  1387,  3467,  3468,   278,  1315,  1392,   454,  3875,  2846,
      24,   540,  1398,  1399,   618,  1401,   522,  1291,  1404,  1043,
    3197,    71,   546,   588,  1382,  1383,  1384,   373,  1386,   633,
     376,  1865,   386,   373,  3208,   469,   376,   373,  1424,   607,
     376,  1399,    16,    17,  4053,   522,  1404,   228,   218,  4461,
     220,   633,   419,   469,   373,  2575,   469,   376,  2575,    12,
     359,   379,  2708,   180,   602,   239,    16,    17,   618,   264,
     463,    16,    17,   431,   618,  1385,   563,  1387,  4063,   373,
     434,   373,   376,   633,   376,   359,   260,   608,   632,  1475,
     618,   469,   579,  3340,   376,    20,   602,  4055,   589,  4057,
    1486,   320,   807,  1377,   632,  1491,   568,   631,  1494,  1495,
    2963,   474,   518,   373,  1424,  3362,   376,  4102,   264,  4331,
    4332,   587,   246,  3990,  3991,   602,   478,  2973,   485,   310,
     373,    17,   522,   376,   440,   633,   186,   254,   618,   332,
     154,   373,    12,   618,   376,   373,  1532,  3954,   376,    16,
      17,   522,   510,   633,   540,    16,    17,   524,   633,    16,
      17,  3007,  2954,   107,   372,  1551,   110,  1553,  1554,  3015,
    1556,  1557,  3894,  3019,   588,   618,   226,  4372,  4373,   374,
    1566,  1491,  3203,   136,  3037,  1495,  3207,  1573,   618,   632,
    1576,   597,  1578,   618,  2447,  1553,  1554,   631,  1584,   498,
    1586,   251,   127,   633,   487,   469,    51,  1481,   633,    16,
      17,   469,   602,   546,   228,   631,    61,   373,   631,  3065,
     376,    16,    17,   373,   581,   230,   376,   351,   374,   373,
    3742,   602,   376,   373,   239,   618,   376,   618,   355,    16,
      17,    17,   373,   633,   373,   376,  3673,   376,   546,  3676,
     633,   137,   633,   631,    16,    17,    16,    17,    16,    17,
      16,    17,  3436,  1573,   621,  3953,   136,   175,  1771,   568,
    4137,  4138,   618,  1659,  1660,    16,    17,  2882,   618,   633,
    3082,   373,   618,   373,   376,    12,   376,   633,    16,    17,
    3082,   566,   373,   633,   568,   376,   310,   633,   631,   618,
      30,  2718,  1576,  2882,  2305,    12,   124,   133,  2812,  3082,
      16,    17,   373,   632,   589,   376,   373,  3744,   373,   376,
     373,   376,   148,   376,   618,   544,   618,   373,    16,    17,
     376,   637,   469,   631,  1720,     0,   386,   545,   632,   152,
     632,   121,   356,    16,    17,   373,    76,  2867,   376,   203,
    2867,   570,   402,    16,    17,   135,   469,   392,   618,    16,
      17,   137,   163,    16,    17,  1868,  4233,   631,    71,   190,
    4196,  4197,   632,   631,   379,   618,  1762,  2202,  3818,  3819,
      12,  4248,  1768,   190,  1770,  1771,   618,   511,   121,   632,
     618,  2216,   193,   211,   248,  4262,  1782,   512,  2816,   373,
     632,  1787,   376,   527,   632,  3226,  1792,    12,  3225,   136,
    4300,   144,    16,    17,    57,   236,   126,    16,    17,  1805,
     150,  3258,  3599,   373,  2249,   270,   376,   404,   373,   136,
     545,   376,   609,   626,   627,   628,   629,  1823,  2856,   596,
     589,  1827,   599,   118,   352,   353,   332,   190,   181,   163,
     358,  3823,  4319,   399,  2455,   156,   633,  1843,  1844,  1845,
    1846,   207,   618,   281,  4331,  4332,  3112,  3529,   618,  4286,
      24,  1857,  4289,  1859,   618,   156,   632,   118,   618,   193,
     593,   594,  1868,   186,   633,    16,    17,   618,   632,   618,
     639,   615,   632,  2318,   631,   203,   239,   265,   635,  1885,
     268,   632,  2453,   632,   136,   251,   373,   182,   522,   376,
     540,  4378,   373,  1823,  1900,   376,   373,  1827,   631,   376,
     374,  4388,   232,   226,    16,    17,   618,   537,   618,   172,
     540,   136,   509,   176,   163,  1845,  1846,   618,   207,   319,
     632,   182,   632,   218,   187,   220,    31,    33,   251,    11,
    1936,   632,   625,   374,    33,   625,   332,   618,  4425,   632,
    4427,   618,   632,   618,   123,   618,   373,  1841,   639,   376,
    4437,   632,   618,    59,   557,   632,   586,   632,   373,   632,
      59,   376,   251,  4400,   561,    40,   632,  4454,   602,  4456,
     618,  4458,    47,  3767,   480,   481,   373,   631,  4465,   376,
     154,  3310,  2553,   278,   632,   639,   550,    17,  4475,   553,
     221,   373,   203,   373,   376,   373,   376,   373,   376,   633,
     376,  1895,  4489,  4490,   601,   540,  1936,   632,   107,  2132,
     727,   110,   373,  2136,   631,   376,   543,   278,  4505,  4506,
     119,   103,   639,  4510,   618,   373,   414,   226,   376,    74,
      58,    59,   749,    74,  2879,   563,  2915,   226,   632,   190,
      68,   123,  2921,   226,  2050,   762,   763,   373,   618,   399,
     376,   579,   221,   618,   228,   318,   203,  3132,  2064,  2932,
     352,   353,   632,  2461,   359,   373,  1960,   632,   376,   131,
    2923,   421,  2195,   632,   633,  1969,  1970,  2200,   190,   402,
     373,  3156,  3157,   376,   480,   481,  1980,  1981,  1982,  1983,
     373,  1985,  1986,   376,    74,    12,   373,   368,   359,   376,
     373,   236,  2915,   376,  3179,   455,   610,   611,  2921,   154,
     440,   193,    46,   154,   190,   118,   622,   623,   624,   625,
     626,   627,   628,   629,    41,    24,  2132,   632,   633,   633,
    2136,   618,  2138,   594,   239,  2141,   310,   618,    24,   469,
     222,   618,  2148,  2149,  2150,   632,  3283,  2545,    24,   373,
     413,   632,   376,   477,   373,   632,   632,   376,   263,   281,
    2166,   288,   289,  2141,   514,   637,  2172,   156,  2818,  2175,
     639,  2294,    89,  2571,  2572,    74,    93,   632,   633,   182,
     584,  3321,   356,   228,  3321,   632,   633,   228,    74,  2195,
     370,   618,   274,     6,  2200,   509,  2090,  2882,    74,  2093,
    2094,  2324,  2096,   618,   440,  2099,  2100,  2101,  2102,  2103,
    2104,  2105,  3352,   631,  2108,  3352,  2110,   632,  2148,  2149,
    2150,   618,   373,   103,    95,   376,   622,   623,   624,   625,
     626,   627,   628,   629,   186,   632,   618,  4036,   618,  4160,
     618,   549,   618,    56,  4165,   344,  4167,     6,   228,   633,
     632,    11,   632,   583,   632,   154,   632,   618,   632,   633,
     631,   373,  3460,  3461,   376,   546,   126,    12,   154,   631,
     618,   632,  2166,   568,   173,   278,   632,   633,   167,  4073,
    4074,  4075,  4076,  1806,    19,  4082,  1809,   173,  2294,  1812,
    4089,  2864,   618,  4092,  4093,  4094,  4095,   173,   639,   632,
     633,   631,   429,   430,   115,   350,   632,   568,   137,   350,
     618,   356,   631,  2319,   631,   356,  3374,   365,  2324,  3377,
    3378,   426,   404,  3335,  3336,   618,   243,   140,   631,   228,
     549,   631,   212,   632,   633,   618,  3394,  2343,   589,   632,
      31,   618,   228,  2349,  2350,   618,  2352,  3422,   522,   632,
      16,    17,   228,   632,   633,   632,   359,   126,   229,   632,
      95,  3732,  2807,   118,   631,  4159,   121,   631,  2491,  2492,
     350,  4053,   232,  2379,   632,   633,   356,   248,   423,   222,
     592,   593,   423,   595,  3609,   597,   485,   631,   259,    58,
      59,   136,   631,   475,   618,  4194,  4195,   632,   633,   618,
      48,  4198,   319,  3276,  4203,  2411,   217,  3605,   632,  2415,
     631,   310,   632,   633,  2420,  2421,  2422,   152,   631,  2349,
    2350,   156,  2352,  3563,   310,   118,  3563,   182,   602,    25,
     631,    74,  3657,   631,   310,   632,   633,  3910,  3911,   631,
    3477,  2564,   492,   423,   631,    88,   137,  2453,   632,   633,
     185,   350,   187,   631,   553,   210,   538,   356,   540,  2465,
    2466,   632,   633,   232,   350,   382,   211,   618,   203,   631,
     356,   342,    68,   208,   350,   631,    72,   522,    74,  2485,
     356,   522,   581,  3900,  3901,  2491,  2492,   222,   631,   182,
    2420,  2421,  2422,   631,   229,    61,   632,   633,   631,   118,
     380,   236,   121,   332,   586,    71,   618,   632,   633,   389,
      19,   322,   631,   248,   631,   326,   396,   210,    84,  4080,
     457,   631,   333,   278,   259,   121,  2532,   631,   573,   264,
     631,  2537,   573,    95,   103,  2533,  2542,  2543,   273,   631,
     353,  2547,   522,  2549,   632,   633,  2544,   631,   239,  3501,
     118,   631,  2550,  2559,   631,  2561,  2562,   602,  2564,  2565,
     631,   602,   631,   182,  2570,   568,   631,  2573,   631,  2575,
     631,   118,   263,   631,   121,   631,  2574,   494,  2584,   631,
     440,  2579,   631,   454,   631,   278,    95,  2585,  2586,  2595,
     469,   210,   633,   573,   163,   631,  2602,  2603,   477,   631,
     411,   538,   631,   416,   359,   418,   543,   342,  2614,   469,
     253,   491,  3810,  3811,   182,  3813,  3814,   534,   201,   118,
     186,   103,   602,   522,   193,   631,   192,   632,   633,  4046,
     365,   632,   633,  4050,   631,   182,   522,   632,   633,   374,
     631,   332,   210,   152,   631,   118,   522,   156,   121,   586,
     632,   633,   523,   631,  2584,   251,   467,  2551,  2552,   278,
     226,   352,   353,   210,   601,   631,   359,   229,   631,   404,
     631,   440,  2678,  2679,   632,   633,   632,   633,   187,    61,
     631,   163,   631,   182,  2578,   251,   248,   330,   631,    71,
     631,    12,   632,   633,   203,  4112,  4113,   259,   631,   208,
     469,   631,    84,   602,   632,   633,   586,  2713,   631,   182,
     278,   193,   355,   631,   593,   594,   602,   632,   633,   454,
     229,   631,  3167,   583,   307,   308,   602,   236,   631,   312,
     313,   278,   275,   137,   633,   426,   631,   210,  3309,   248,
     359,    77,   477,    79,   226,   632,   633,    95,  2678,   631,
     259,    48,   631,  2647,   631,   264,   352,   353,   503,   504,
     633,   506,   358,   508,   273,   636,   632,   633,   631,   365,
     631,   631,   415,   631,  3219,   632,   633,   631,   523,   278,
     342,   632,   633,    25,    26,   121,   632,   633,   523,   480,
     481,   359,   274,   604,  3444,   624,   625,   626,   627,   628,
     629,   631,   493,   365,   186,   278,   402,   631,   144,   620,
     192,   463,   359,   568,   583,   136,    58,    59,    60,   577,
     386,   146,   147,  2829,   632,   633,    68,  2833,   632,   633,
     632,   633,    74,   342,   626,   404,   402,   632,   633,  2845,
      82,   477,   577,   639,   226,   181,   632,   633,  2350,   639,
    2352,   137,  3944,   588,   589,   162,   365,  2863,  2864,   631,
     359,  2867,   631,  2986,   106,   374,   509,   632,   633,   251,
     632,   633,   607,    95,   609,   568,  2882,   473,  2884,   121,
     264,   229,   187,   125,   632,   633,   359,  3839,   518,    35,
     211,   537,   454,  3845,   162,   404,   518,   632,   633,   275,
     248,   636,   637,   288,   289,   632,   633,   632,   633,   632,
     633,   259,   154,   632,   633,  2845,  3487,   399,  2420,  2421,
    2422,   153,   404,   633,  3768,  3769,   522,    83,   332,   495,
     633,   622,   623,   624,   625,   626,   627,   628,   629,  4079,
    1140,  1141,  4079,  4196,  4197,   454,   137,  3296,  3297,   568,
    3544,  3545,  3778,  3779,    25,    26,   633,  3632,  3633,  2965,
     366,   523,  2968,  2969,   110,   632,   533,  2973,   477,   152,
    3645,   540,   118,   103,   121,   106,   638,  3652,     6,   105,
    2986,   631,   578,  2989,   226,   137,     4,    58,    59,    60,
      35,   233,   561,   475,   342,   633,   389,    68,   468,   601,
     568,  3007,  3677,    74,   239,  3680,   633,   229,   250,  3015,
     432,    82,   578,  3019,   523,   386,    55,   365,   167,   106,
     402,   568,   219,   633,   639,   633,   248,   639,    68,   175,
    2924,  2925,   601,  2927,    12,   106,   182,   259,   632,  3045,
     632,   606,  3048,  4081,   429,   430,   332,  3053,   239,     9,
     121,   136,   633,  3059,   125,   639,   538,  3063,   632,  3065,
     632,   543,   192,   639,   210,   110,   639,   309,   577,   568,
     263,   632,   631,   118,  3080,   633,   480,   481,   154,   561,
     589,  3059,   633,   154,   638,   327,   275,  3093,   424,  4138,
     275,   275,    48,  2987,  3100,   568,   226,   275,   607,   137,
     609,   275,  2996,   275,   586,   633,   454,   633,   156,   403,
     457,   371,   537,   495,   365,   500,   501,   502,  3048,   601,
     342,  3127,   365,   632,   633,   633,   270,   636,   637,   633,
     175,   387,   278,   633,  3784,   633,   557,   182,   557,   381,
    4280,   332,   386,  4280,   274,    12,   633,   389,   156,   365,
     365,    68,   633,   633,   626,   226,   239,   535,   242,   633,
     177,   187,   233,   490,   582,   210,   390,   132,  4120,   170,
    3100,   365,   633,   632,   156,   523,  3299,  4022,   633,   250,
     332,   156,   503,   504,   505,   506,   507,   508,   156,  4034,
     156,  3085,   263,   156,   480,   481,   578,   343,   156,   156,
     633,   239,   523,   156,   156,   156,   156,  3213,   354,   156,
     156,   156,   358,   359,   156,  3221,   156,   459,   622,   623,
     624,   625,   626,   627,   628,   629,   525,   526,  3799,   156,
     529,   530,   454,   278,   533,   156,   535,   156,   309,   584,
    3246,   156,   156,  3249,  3250,  3251,  3252,   156,   156,   156,
     613,   588,   193,   365,   365,   365,   327,   607,  3264,   633,
    4352,   633,   190,   632,   632,    16,    17,   632,   632,   626,
    4319,   632,   632,   515,   516,   517,   632,  3283,  3284,   632,
     522,  3287,   633,   625,   190,  3291,  3292,  3293,   631,   480,
     481,   632,   632,  3299,   332,   633,   538,   632,   343,   541,
      74,   523,   632,  3309,  3310,   633,   632,   577,   632,   632,
     381,   478,  4185,   358,   359,  3321,   632,   631,   389,   631,
     629,   631,   633,   546,  3330,   546,   632,  3221,   480,   481,
     537,   631,   106,   546,  3340,   577,  3342,   623,   624,   625,
     626,   627,   628,   629,   607,   475,  3352,   227,   631,   529,
      11,  4443,  3358,   631,  3360,   639,  3362,   633,   631,   631,
     111,   112,   113,   114,   115,   495,   261,  3490,   633,   633,
     639,   190,   639,  3948,   632,   412,  4425,   586,  4427,  4519,
     154,   477,  4519,   633,   187,   340,    46,   509,   459,   509,
     509,   633,   509,  4533,   509,   468,  4533,   389,  4538,    71,
     546,  4538,   386,  4543,   550,  4454,  4543,   553,   538,   386,
     540,  4363,  4364,   543,  4366,   386,   557,   563,   132,   249,
     538,    33,   568,   249,  3318,   571,   132,   386,  3434,  4016,
     538,   622,   623,   624,   625,   626,   627,   628,   629,    46,
    4489,  4490,   480,   481,   515,   516,   517,   386,   578,   386,
     388,   522,   226,  3459,  3460,  3461,   586,   386,   631,  4411,
    3583,  4413,  4414,   214,   215,   216,   217,   538,   386,   631,
     541,   435,   624,   625,   626,   627,   628,   629,   624,   625,
     274,   386,   248,   631,  3490,   248,   377,   589,    12,    13,
     632,   150,   632,   523,   639,   235,   235,   632,   632,   632,
     639,   546,   156,  4153,   632,   550,   577,   632,   553,  4547,
     633,    74,   633,  4151,   557,   814,   632,   129,   563,   632,
     614,   551,  4097,   568,   633,    88,   571,   546,   270,    46,
     631,  3654,   631,  3427,  4486,   309,   156,   557,   631,   631,
     156,   190,   154,   201,  4501,   236,   158,   190,   546,   546,
     245,   417,  3558,   327,   633,   359,  3450,  3563,    12,    13,
     631,   156,   156,   157,   156,   633,   156,   130,  3574,   389,
      94,   322,   106,   324,   325,   326,   350,  3583,   323,   624,
     625,   106,   333,   195,   622,   623,   624,   625,   626,   627,
     628,   629,   170,   639,   251,   251,   557,   631,   631,  3605,
     194,   213,   126,   370,   203,    19,   450,   631,  3614,   386,
     546,   205,   248,   248,   639,   365,   140,  3623,  3616,  3742,
     626,   631,   373,   237,   631,   376,   631,   237,   111,   112,
     113,   114,   115,   632,   557,   665,   632,   632,   632,   163,
      94,   631,   166,   632,   674,   633,   633,   632,  3654,   679,
     244,   632,   632,   639,   557,   179,   639,   557,   631,   265,
     411,   255,   365,   275,   222,   639,   633,   386,  4541,   639,
     632,   371,   126,   583,   190,  3681,   190,   201,  3801,   633,
     710,   190,  3688,   632,  3614,   239,   140,   417,   282,   632,
     253,   156,   122,   609,   251,   251,   726,  3591,   632,   632,
    3706,   633,   226,   633,   400,   631,   631,    74,   232,   163,
     365,  4282,   166,   633,   365,   466,   467,    19,   365,   631,
     633,   632,  3728,   365,   492,   179,  3732,   248,   469,   633,
     632,   214,   215,   216,   217,   631,  3742,   631,   631,    46,
     770,   771,   772,   773,   248,   374,   359,   201,   522,   273,
    4233,    54,   346,   783,   632,   471,   632,  4395,   609,   632,
      63,   261,  3656,   452,   538,  4248,   273,   330,    11,   417,
      73,   626,   226,   143,   632,   257,   632,    33,   232,  4262,
     633,   190,    85,    86,    87,   203,   479,   156,   391,   352,
     353,   403,   355,   633,   631,  3801,   121,   121,   101,   631,
     412,  3695,   540,   631,  3810,  3811,   639,  3813,  3814,   398,
      78,   487,   139,   492,   632,   427,   632,  2093,  2094,   273,
    2096,   633,   632,  2099,  2100,  2101,  2102,  2103,  2104,  2105,
    4405,  3954,  2108,   445,  2110,   632,   464,    19,   631,   322,
     589,   324,   325,   326,   264,   589,   632,   632,   632,   632,
     333,    13,   415,   604,    33,    33,    54,  4495,   329,   632,
     632,   632,   632,   253,   412,    63,   171,   618,   619,   620,
     632,   273,   633,   129,   236,    73,   488,   631,   201,  3885,
    3886,   405,   639,  4521,   632,   409,   633,    85,    86,    87,
      46,  3897,   208,   329,  4544,  4378,   633,   156,   154,   631,
     631,   425,   158,   101,   631,  4388,   518,   631,   306,   433,
    3804,   632,   599,   631,   599,   583,   631,   441,   121,   251,
     251,   358,    33,   632,   359,   633,   631,   589,   411,   329,
     359,   169,    94,   632,   609,   540,   589,  3943,   371,   195,
    3946,   251,   236,   631,   365,   469,   509,   593,  3954,   354,
     594,   405,   633,   513,  4437,   409,  3886,   213,   482,   483,
     450,   631,   359,   632,   126,   631,  3972,   632,   609,   633,
    1000,   425,   546,  4456,   546,  4458,   546,   528,   140,   433,
     151,  3987,  4465,   466,   467,   583,  3992,   441,   606,    30,
     640,   631,  4475,   632,   187,   632,   384,   187,   632,   371,
     132,   163,   548,   132,   166,   631,   154,    70,   532,   404,
     425,    30,    61,  3943,   190,   469,   371,   179,   321,   275,
     606,   632,  4505,  4506,    61,   633,   529,  4510,   482,   483,
     632,  1061,  1062,    14,   631,   338,   266,   561,     5,   201,
    1070,  1071,  1072,  1073,  1074,  1075,  1076,   365,   365,  4055,
     236,  4057,   150,   637,  1084,  1085,   371,  1087,  1088,   583,
     371,   585,  1092,  1093,   226,   130,  1096,  1097,  1098,  1099,
     232,  1101,  1102,  4079,    46,   139,  4199,    46,   532,  1109,
    1110,   631,  1112,  1113,  1114,  1115,  1116,   631,   631,  1119,
    1120,  1121,  1122,  1123,  1124,  1125,  1126,  1127,  1128,  1129,
      46,  1131,    46,   149,  1134,  1135,    46,   561,   583,  1139,
     126,   273,   606,  1143,  1144,  1145,   150,   221,   637,   280,
     640,   604,   120,   321,  4130,   145,  1156,  1157,  1158,   583,
     631,   585,    46,    46,    46,  1165,   619,   620,   549,   139,
     338,  4035,  1172,  1173,  1174,    52,  1176,   403,   637,   633,
     458,   460,   632,  1183,  1184,  1185,   412,  1187,  1188,  1189,
    1190,  1191,   465,  1193,  1194,  1195,  1196,  1197,  1198,  1199,
    1200,   427,   359,   549,  1204,  1205,     6,  4300,   633,   156,
     150,    11,   206,    13,  4190,    15,   633,   637,   219,   445,
     632,   632,    52,  4199,   633,    25,    26,   150,   187,   187,
     187,    46,   549,   180,   439,   608,   121,   222,   359,   631,
     189,   477,  3997,  2331,   633,  2112,  3436,   194,  3437,   653,
    3704,  4154,   525,  2520,  4027,  4338,    56,  4339,   205,  3702,
      60,    61,   488,  3884,   977,  4358,    66,  3706,  4521,   542,
    4483,    47,   580,   405,    74,  1856,  1792,  2829,  4375,  3875,
    3875,   449,    82,  3875,  3875,  3875,  3875,  3875,  3875,  3875,
    3875,    91,   518,   425,  4491,  4226,  4332,   465,  4375,  4252,
    3875,   433,  3875,  3875,  4280,  4251,   106,   254,   255,   441,
    1484,   537,    25,    26,   540,  1018,  3893,  2063,  1488,  3013,
    2858,   121,  3557,  3264,  4300,   125,  2863,  4190,  1302,  4193,
    4284,  3560,  4443,   133,   134,   282,  3944,   469,  4360,  4405,
     140,   516,  1546,  3453,  4097,    58,    59,    60,   148,  2056,
     482,   483,   152,  3086,   154,    68,  2064,   525,  2679,  3340,
    1360,    74,  3362,  2605,  3418,   165,  3385,  4343,  4344,    82,
    3837,  3385,  3615,  3665,   542,  4282,  3654,  2491,  1378,  2785,
     551,  3204,  4358,  3207,  3199,   185,  4109,    11,    11,  1560,
    4112,  4038,  4113,   106,  4050,  4046,  2146,  3897,  3845,  2063,
     532,  2598,   349,  1438,  4380,   583,  1434,  3620,   121,  2406,
    3341,  4387,   125,  1542,  2372,  1845,  2845,  3259,  1495,  2423,
     599,  2287,   605,  1456,   224,   961,   226,  4291,  4292,   561,
     874,  3221,  2818,   233,  2201,  1103,  4529,  2163,  3114,  3913,
    4060,   154,  2286,  3434,  4343,  3352,  3805,  4344,  2312,  4472,
     250,   583,  1453,   585,   401,  1077,  2428,  3801,  2172,  1290,
     963,   963,  1214,  1315,  2410,  2367,  3563,  3278,  3321,  3277,
     963,   588,  4280,   273,   670,   963,  1584,  1932,   579,  4455,
    1933,  3360,  1781,  1322,  4460,  1390,  3262,  4468,  4307,  4441,
    4370,  4538,  3657,   665,   665,  3283,  2450,  4543,   578,  3309,
    1418,  1717,   578,  3310,  1888,  2443,  2436,  2442,   679,   309,
    1860,  1827,   859,   226,  1338,  1551,  4071,  3246,  4077,  4495,
     233,   573,  1814,   861,   512,   512,  4017,   327,  3690,   653,
     653,   331,    -1,   653,    -1,    -1,    -1,   250,    -1,   710,
      -1,    -1,    -1,  4519,    -1,  4521,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4529,    -1,   726,    -1,  4533,    -1,    -1,
      -1,    -1,  4538,    -1,    -1,    -1,    -1,  4543,    -1,   369,
      -1,    -1,    -1,    -1,   374,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,   386,    -1,    -1,   389,
      -1,    -1,    -1,    -1,    -1,    -1,   309,  1597,    -1,    -1,
      -1,    -1,   773,    -1,    -1,    25,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   327,    -1,    -1,    -1,    -1,    -1,
     420,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,   459,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   389,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1695,  1696,  1697,    -1,    -1,
      -1,   121,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,
    1710,    -1,    -1,    -1,    -1,   515,   516,   517,    -1,    -1,
      -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,  1736,    -1,   538,    -1,
      -1,   541,  1742,    -1,    -1,  1745,   459,  1747,    -1,    -1,
      -1,    -1,    -1,  1753,    -1,  1755,  1756,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   564,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,   516,   517,    -1,   226,    -1,    -1,   522,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   538,    -1,    -1,   541,  1000,
     250,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,
    1840,    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   577,   304,   305,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1886,    -1,    -1,   309,
    1061,  1062,    -1,    -1,  1894,    -1,    -1,    -1,    -1,  1070,
    1071,    -1,    -1,  1074,  1075,  1076,    -1,   327,    -1,    -1,
      -1,    -1,    -1,  1084,  1085,    -1,  1087,  1088,    -1,    -1,
      -1,  1092,    -1,    -1,    -1,  1096,  1097,  1098,  1099,    -1,
    1101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1109,  1110,
      -1,  1112,  1113,    -1,    -1,    -1,    -1,    -1,  1119,  1120,
    1121,    -1,    -1,  1124,  1125,  1126,  1127,  1128,  1129,    -1,
    1131,   381,    -1,  1134,  1135,    -1,    -1,    -1,  1139,   389,
      -1,    -1,  1143,  1144,  1145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1156,  1157,  1158,    -1,    -1,
     429,   430,    -1,    -1,  1165,    -1,    -1,    -1,    -1,    -1,
      -1,  1172,  1173,  1174,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,
      -1,    -1,    -1,    34,  1205,    -1,    -1,    -1,    -1,   459,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,
      61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2087,    -1,    -1,
      -1,    -1,    -1,    94,    -1,   515,   516,   517,    -1,    -1,
      -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   116,   117,    -1,   538,    -1,
      -1,   541,    -1,    -1,    -1,   126,   127,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,    -1,    -1,    -1,    -1,   577,    -1,    -1,
      -1,  2161,    -1,    -1,    -1,   166,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2181,    -1,   184,    -1,  2185,    -1,    -1,    -1,  1360,
    2190,  2191,    -1,    -1,    -1,    -1,    -1,    -1,   199,  2199,
     201,    -1,  2202,    -1,    -1,   206,    -1,  1378,   209,    -1,
      -1,    -1,  2212,  2213,    -1,  2215,  2216,    -1,  2218,  2219,
    2220,  2221,  2222,    -1,    -1,  2225,    -1,    -1,    -1,    -1,
      -1,   232,    -1,   234,  2234,    -1,    -1,    -1,    -1,    -1,
      -1,  2241,    -1,  2243,    -1,  2245,  2246,    -1,  2248,  2249,
      -1,   252,    -1,  2253,  2254,  2255,    -1,    -1,    -1,  2259,
    2260,  2261,    -1,  2263,    -1,  2265,    -1,  2267,   269,  2269,
      -1,  2271,   273,    -1,    -1,    -1,  2276,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2295,    -1,    -1,    -1,    -1,
      -1,    -1,  2302,    -1,    -1,  2305,    -1,    -1,    -1,    -1,
      -1,  2311,    -1,    -1,  2314,    -1,    -1,    -1,  2318,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    33,
    2380,    -1,    -1,    -1,    38,   386,    40,    -1,    42,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,   410,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1597,    -1,    -1,    -1,
      -1,   432,    -1,    -1,   435,    -1,   437,    -1,    -1,   440,
      -1,    -1,   443,   444,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2451,   453,   107,   455,  2455,   110,    -1,    -1,    -1,
      -1,    -1,   463,    -1,    -1,   119,    -1,    -1,   469,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,   482,    -1,   484,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   155,    -1,  2503,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,  2521,  2522,    -1,  1695,  1696,  1697,   181,    -1,   183,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,   197,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   564,    -1,  1736,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1745,   576,  1747,    -1,    -1,   580,
      -1,    -1,   583,   237,    -1,    -1,    -1,   588,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   267,    -1,   616,    -1,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,    -1,    -1,    -1,
     631,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2649,
    2650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,  1840,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,    -1,    -1,
     344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   361,   362,    -1,
      -1,    -1,    -1,    -1,    -1,  1886,    -1,    -1,    -1,    -1,
      -1,    -1,  2722,  1894,    -1,    -1,  2726,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,    -1,    -1,    -1,    -1,  2746,  2747,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    13,    -1,    15,    -1,   419,    -1,  2767,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2776,    -1,  2778,    -1,
    2780,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    56,    -1,    -1,  2807,    60,    61,
      -1,    -1,  2812,    -1,    -1,    -1,    -1,    -1,    -1,   473,
      -1,    -1,    -1,   477,    76,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,    -1,    -1,
      -1,  2841,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,   127,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,   140,    -1,
      -1,    -1,    -1,   547,    -1,    -1,   550,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,  2907,    -1,    -1,
      -1,    -1,    -1,    -1,   166,    -1,  2087,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   184,    -1,    -1,  2935,    -1,    -1,    -1,    -1,
      -1,   595,   596,    -1,    -1,    -1,    -1,   199,    -1,   201,
      -1,    -1,    -1,    -1,   206,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   620,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2181,    -1,    -1,    -1,  2185,    -1,    -1,   269,    -1,  2190,
    2191,   273,    -1,    -1,    -1,    -1,    -1,    -1,  2199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2212,  2213,    -1,  2215,    -1,    -1,  2218,  2219,  2220,
    2221,  2222,    -1,    -1,    -1,    -1,  3056,  3057,    -1,    -1,
      -1,    -1,    -1,  2234,    -1,    -1,    -1,    -1,    -1,    -1,
    2241,    -1,  2243,    -1,  2245,  2246,    -1,  2248,    33,    34,
      -1,  3081,  2253,  2254,  2255,    -1,    -1,    -1,  2259,  2260,
    2261,    -1,  2263,    -1,  2265,    -1,  2267,    -1,  2269,    -1,
    2271,    -1,    -1,    58,    59,  2276,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,   369,    -1,    -1,
      -1,    -1,    -1,    -1,  2295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   386,  3135,    -1,    92,    -1,    94,
    2311,    -1,    -1,  2314,    -1,    -1,    -1,   399,    -1,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   410,    -1,
    3160,    -1,    -1,    -1,  3164,  3165,    -1,  3167,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3176,    -1,    -1,    -1,
     432,  3181,    -1,   435,  3184,   437,  3186,  3187,   440,    -1,
      -1,   443,   444,    -1,    -1,    -1,    -1,    -1,   153,   154,
      -1,   453,    -1,   455,   159,    -1,    -1,   162,    -1,    -1,
      -1,   463,    -1,    -1,    -1,    -1,    -1,   469,    -1,  3219,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
     482,    -1,   484,    -1,    -1,     6,   191,    -1,   193,    -1,
      11,    -1,    13,    -1,    -1,   200,    -1,   202,    -1,    -1,
      -1,    -1,    -1,  3253,    25,    26,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     225,   226,    -1,    -1,    -1,    -1,    -1,  3277,    -1,    -1,
    2451,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,   564,    -1,    -1,   270,    -1,    -1,    -1,    -1,
      91,    -1,    -1,  3323,   576,    -1,    -1,    -1,   580,  3329,
      -1,   583,    -1,    -1,    -1,   106,   588,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   303,    -1,
     121,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   616,    -1,    -1,    -1,    -1,   140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,   631,
      -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   368,   185,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,   404,
      -1,    -1,   407,   408,    -1,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3471,  3472,   428,    -1,    -1,    -1,    -1,    -1,   250,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,   309,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2722,    -1,    -1,    -1,  2726,   327,    -1,    -1,    -1,
     331,    -1,    -1,   518,  3564,    -1,    -1,   522,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2746,  2747,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   540,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2767,  3597,    -1,    -1,
      -1,    -1,    -1,   374,    -1,  2776,    -1,  2778,    -1,  2780,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,   603,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,
    2841,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   459,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2907,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,   516,   517,    -1,    -1,    -1,
    3750,   522,    -1,    -1,  3754,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2935,    -1,    -1,   538,    -1,    -1,
     541,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3796,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   577,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3875,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3056,  3057,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3903,    -1,  3905,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3944,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3952,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3984,    -1,    -1,    -1,    -1,  3160,
    3990,  3991,    -1,  3164,  3165,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3176,    -1,    -1,    -1,    -1,
    3181,    -1,    -1,  3184,    -1,  3186,  3187,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4063,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4102,    -1,    -1,    -1,  3277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4123,    -1,  4125,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4135,    -1,  4137,  4138,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3323,    -1,    -1,    -1,    -1,    -1,  3329,    -1,
      -1,    -1,    -1,    -1,  4164,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4231,    -1,  4233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4248,  4249,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3471,  3472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4318,  4319,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4331,  4332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4378,    -1,
      -1,    -1,    -1,    -1,    -1,  4385,    -1,    -1,  4388,    -1,
      -1,    -1,    -1,  3564,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4418,    -1,
      -1,    -1,    -1,    -1,    -1,  4425,  3597,  4427,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4437,    -1,    -1,
      -1,    -1,    -1,  4443,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4454,    -1,  4456,    -1,  4458,    -1,
      -1,    -1,    -1,    -1,    -1,  4465,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4475,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4489,
    4490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4505,  4506,    -1,    -1,    -1,
    4510,    -1,    -1,    -1,    -1,    -1,  4516,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4546,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3750,
      -1,    -1,    -1,  3754,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3796,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3903,    -1,  3905,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3952,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3984,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4063,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4123,    -1,  4125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4249,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
    4281,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    44,    45,    -1,    47,    48,  4318,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,  4385,   117,   118,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,  4418,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
     232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,  4516,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,   256,   257,    -1,   259,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,  4546,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,   558,   559,   560,    -1,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,   590,   591,
     592,   593,   594,    -1,    -1,   597,   598,    -1,   600,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
      -1,    -1,   624,   625,    -1,    -1,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,   121,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,   221,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,    -1,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,   590,   591,   592,   593,   594,    -1,    -1,
     597,   598,    -1,   600,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,   624,   625,    -1,
      -1,    -1,    -1,   630,   631,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,   190,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
     232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,   590,   591,
     592,   593,   594,    -1,    -1,   597,   598,    -1,   600,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
      -1,    -1,   624,   625,    -1,    -1,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,   121,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,   190,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,   221,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,    -1,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,   590,   591,   592,   593,   594,    -1,    -1,
     597,   598,    -1,   600,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,   624,   625,    -1,
      -1,    -1,    -1,   630,   631,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,   190,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
     232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,   590,   591,
     592,   593,   594,    -1,    -1,   597,   598,    -1,   600,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
      -1,    -1,   624,   625,    -1,    -1,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,   121,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,   221,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,    -1,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,   590,   591,   592,   593,   594,    -1,    -1,
     597,   598,    -1,   600,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,   624,   625,    -1,
      -1,    -1,    -1,   630,   631,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
     232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,   590,   591,
     592,   593,   594,    -1,    -1,   597,   598,    -1,   600,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
      -1,    -1,   624,   625,    -1,    -1,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,   121,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,   221,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,    -1,
      -1,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,   590,   591,   592,   593,   594,    -1,    -1,
     597,   598,    -1,   600,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,   624,   625,    -1,
      -1,    -1,    -1,   630,   631,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
     232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,   590,   591,
     592,   593,   594,    -1,    -1,   597,   598,    -1,   600,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
      -1,    -1,   624,   625,    -1,    -1,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,   121,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,   221,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,    -1,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,   590,   591,   592,   593,   594,    -1,    -1,
     597,   598,    -1,   600,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,   624,   625,    -1,
      -1,    -1,    -1,   630,   631,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
     232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,   590,   591,
     592,   593,   594,    -1,    -1,   597,   598,    -1,   600,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
      -1,    -1,   624,   625,    -1,    -1,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,   121,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,   221,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,    -1,
      -1,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,   590,   591,   592,   593,   594,    -1,    -1,
     597,   598,    -1,   600,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,   624,   625,    -1,
      -1,    -1,    -1,   630,   631,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
     232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,   590,   591,
     592,   593,   594,    -1,    -1,   597,   598,    -1,   600,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
      -1,    -1,   624,   625,    -1,    -1,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,   121,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,   206,
     207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,   221,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,    -1,
      -1,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,   590,   591,   592,   593,   594,    -1,    -1,
     597,   598,    -1,   600,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,   624,   625,    -1,
      -1,    -1,    -1,   630,   631,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
     232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,   590,   591,
     592,   593,   594,    -1,    -1,   597,   598,    -1,   600,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
      -1,    -1,   624,   625,    -1,    -1,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
      -1,    -1,   169,   170,   171,   172,   173,    -1,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,
     207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,    -1,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,   308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,    -1,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,    -1,
      -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,   638,   639,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,   251,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,   263,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,    -1,   620,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   639,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,
     131,   132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
      -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,
     151,    -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,
     161,   162,   163,   164,   165,   166,    -1,    -1,   169,   170,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,
      -1,   362,   363,   364,    -1,   366,   367,   368,    -1,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,   382,    -1,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,   452,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,   620,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   639,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,    -1,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,   452,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
     514,   515,   516,   517,   518,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,
     584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,
      -1,   615,   616,   617,    -1,    -1,   620,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,   632,    -1,
      -1,    18,    -1,    -1,    21,   639,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
      -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,
     207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,    -1,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,   308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,    -1,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,    -1,   344,   345,    -1,
      -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,   356,
      -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,   632,    14,    -1,    -1,    -1,
      18,   638,   639,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,    -1,   620,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   639,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,
     131,   132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
      -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,
     151,    -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,
     161,   162,   163,   164,   165,   166,    -1,    -1,   169,   170,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,
      -1,   362,   363,   364,    -1,   366,   367,   368,    -1,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,   382,    -1,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,   452,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,   620,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
     631,    -1,    14,    -1,    -1,    -1,    18,    -1,   639,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
      -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   639,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,
     125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,
      -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,
     155,    -1,    -1,   158,   159,    -1,   161,   162,   163,   164,
     165,   166,    -1,    -1,   169,   170,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,    -1,    -1,   184,
      -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,
     195,   196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,
      -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,   224,
     225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,
     245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,
      -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,
      -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,    -1,   307,   308,   309,   310,    -1,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,    -1,   344,
     345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
     355,   356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,
      -1,   366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,   631,    -1,    14,    -1,
      -1,    -1,    18,    -1,   639,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,    -1,   620,    -1,    -1,    -1,    -1,     5,
     626,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,   639,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,    -1,   620,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,   638,   639,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,
      -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,
      -1,   148,    -1,   150,   151,    -1,   153,   154,   155,    -1,
      -1,   158,   159,    -1,   161,   162,   163,   164,   165,   166,
      -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,
      -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,   196,
     197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,
     207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,
     217,   218,   219,   220,    -1,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
     257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,
     267,   268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,   308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,    -1,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,    -1,   344,   345,    -1,
      -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,   356,
      -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   639,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   639,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,
     123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,
     143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,
     153,   154,   155,    -1,    -1,   158,   159,    -1,   161,   162,
     163,   164,   165,   166,    -1,    -1,   169,   170,   171,   172,
     173,    -1,    -1,   176,   177,    -1,   179,   180,   181,    -1,
      -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,    -1,   195,   196,   197,   198,    -1,   200,    -1,   202,
      -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,
     213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,
     243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,
     253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,
      -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,   360,    -1,   362,
     363,   364,    -1,   366,   367,   368,    -1,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,
      -1,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,
     443,    -1,   445,   446,    -1,   448,   449,   450,    -1,   452,
      -1,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   639,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,   121,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,    -1,   620,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   638,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,   262,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   638,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,    -1,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,   262,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,   452,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,
     474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
     514,   515,   516,   517,   518,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,
     584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,
      -1,   615,   616,   617,    -1,    -1,   620,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   638,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,   121,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,    -1,   620,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     638,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
      -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
     262,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   638,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,    -1,   620,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   638,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,   638,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,    -1,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,   178,   179,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,   217,   218,   219,   220,   221,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,   247,    -1,    -1,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,    -1,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
      -1,    -1,   436,    -1,   438,   439,    -1,   441,    -1,    -1,
      -1,   445,    -1,    -1,   448,   449,   450,   451,   452,    -1,
      -1,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,   467,    -1,    -1,    -1,    -1,   472,   473,
     474,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,    -1,   486,    -1,   488,    -1,   490,    -1,    -1,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
      -1,   515,   516,   517,   518,    -1,    -1,    -1,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
      -1,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,
      -1,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,   608,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,   617,    -1,     5,   620,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,   633,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,     5,
     620,     7,     8,     9,    10,    11,   626,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,     5,   620,     7,     8,     9,    10,    11,
     626,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
      -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,     5,   620,     7,
       8,     9,    10,    11,   626,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,     5,   620,     7,     8,     9,    10,    11,   626,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,   118,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,   210,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,    -1,    -1,   359,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,   452,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,
     474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,    -1,    -1,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
     514,   515,   516,   517,   518,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,
     584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,
      -1,   615,   616,   617,    -1,     5,   620,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,   121,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,   156,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,   262,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,   478,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,     5,
     620,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,   121,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,   262,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
     546,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,     5,   620,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
      -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,   568,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,     5,   620,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,   121,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,   546,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,     5,   620,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    99,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,    -1,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,   262,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,   452,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,
     474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
     514,   515,   516,   517,   518,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,
     584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,
      -1,   615,   616,   617,    -1,     5,   620,     7,     8,     9,
      10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,   262,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,     5,
     620,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
     546,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,     5,   620,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
      -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
     262,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,     5,   620,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,   546,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,     5,   620,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,    -1,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,   262,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,   452,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,
     474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
     514,   515,   516,   517,   518,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,
     584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,
      -1,   615,   616,   617,    -1,     5,   620,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,     5,
     620,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,     5,   620,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
      -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,     5,   620,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,   190,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,     5,   620,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,   121,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,    -1,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,   452,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,
     474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
     514,   515,   516,   517,   518,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,
     584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,
      -1,   615,   616,   617,    -1,     5,   620,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,   121,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,     5,
     620,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,   121,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,     5,   620,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
      -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,     5,   620,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,   121,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,     5,   620,     7,     8,     9,    10,    11,    12,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,    -1,    -1,
     184,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,   452,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,
     474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
     514,   515,   516,   517,   518,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,
     584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,
      -1,   615,   616,   617,    -1,     5,   620,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,   121,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,    -1,    -1,   184,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,   452,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,     5,
     620,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,    -1,    -1,   184,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,   452,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,     5,   620,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,   139,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
      -1,    -1,   184,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
     452,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,     5,   620,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,    -1,   184,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,   452,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,    -1,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,   517,
     518,    -1,    -1,   521,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,   575,   576,    -1,
      -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,
      -1,     5,   620,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   143,
     144,    -1,   146,   147,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,   178,   179,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,   217,   218,   219,   220,   221,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,   247,    -1,    -1,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,    -1,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
      -1,    -1,   436,    -1,   438,   439,    -1,   441,    -1,    -1,
      -1,   445,    -1,    -1,   448,   449,   450,   451,   452,    -1,
      -1,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,   467,    -1,    -1,    -1,    -1,   472,   473,
     474,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,    -1,   486,    -1,   488,    -1,   490,    -1,    -1,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
      -1,   515,   516,   517,   518,    -1,    -1,    -1,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
      -1,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,
      -1,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,   608,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,   617,    -1,     5,   620,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    -1,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,   142,   143,   144,    -1,   146,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,   178,   179,
     180,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,    -1,   207,    -1,    -1,
      -1,    -1,    -1,   213,    -1,    -1,    -1,   217,   218,   219,
     220,   221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
     280,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,   382,    -1,    -1,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,    -1,    -1,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,    -1,    -1,   436,    -1,   438,   439,
      -1,   441,    -1,    -1,    -1,   445,    -1,    -1,   448,   449,
     450,   451,   452,    -1,    -1,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,   467,    -1,    -1,
      -1,    -1,   472,   473,   474,    -1,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,    -1,   486,    -1,   488,    -1,
     490,    -1,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,    -1,   515,   516,   517,   518,    -1,
      -1,    -1,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,    -1,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
      -1,    -1,   582,    -1,    -1,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,   606,    -1,   608,    -1,
      -1,    -1,   612,    -1,    -1,   615,    -1,   617,    -1,     5,
     620,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,   142,   143,   144,    -1,
     146,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,   178,   179,   180,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
      -1,   207,    -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,   280,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,    -1,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,   382,    -1,    -1,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,    -1,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,    -1,    -1,
     436,    -1,   438,   439,    -1,   441,    -1,    -1,    -1,   445,
      -1,    -1,   448,   449,   450,   451,   452,    -1,    -1,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,   467,    -1,    -1,    -1,    -1,   472,   473,   474,    -1,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,
     486,    -1,   488,    -1,   490,    -1,    -1,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,    -1,   515,
     516,   517,   518,    -1,    -1,    -1,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,    -1,    -1,   582,    -1,    -1,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
     606,    -1,   608,    -1,    -1,    -1,   612,    -1,    -1,   615,
      -1,   617,    -1,     5,   620,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,   178,   179,   180,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,
      -1,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,   247,    -1,    -1,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,   280,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
     382,    -1,    -1,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,    -1,    -1,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,    -1,    -1,   436,    -1,   438,   439,    -1,   441,
      -1,    -1,    -1,   445,    -1,    -1,   448,   449,   450,   451,
     452,    -1,    -1,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,   467,    -1,    -1,    -1,    -1,
     472,   473,   474,    -1,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,    -1,   486,    -1,   488,    -1,   490,    -1,
      -1,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,    -1,   515,   516,   517,   518,    -1,    -1,    -1,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,    -1,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,
     582,    -1,    -1,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,   608,    -1,    -1,    -1,
     612,    -1,    -1,   615,    -1,   617,    -1,     5,   620,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
     178,   179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,    -1,   207,
      -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,   217,
     218,   219,   220,   221,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,   247,
      -1,    -1,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,   280,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,    -1,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,    -1,    -1,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
      -1,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,    -1,    -1,   436,    -1,
     438,   439,    -1,   441,    -1,    -1,    -1,   445,    -1,    -1,
     448,   449,   450,   451,   452,    -1,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,    -1,   467,
      -1,    -1,    -1,    -1,   472,   473,   474,    -1,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,    -1,   486,    -1,
     488,    -1,   490,    -1,    -1,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,    -1,   515,   516,   517,
     518,    -1,    -1,    -1,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,    -1,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
     608,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,   617,
      -1,     5,   620,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,   150,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,   178,   179,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,   217,   218,   219,   220,   221,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,   247,    -1,    -1,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,    -1,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
      -1,    -1,   436,    -1,   438,   439,    -1,   441,    -1,    -1,
      -1,   445,    -1,    -1,   448,   449,   450,   451,   452,    -1,
      -1,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,   467,    -1,    -1,    -1,    -1,   472,   473,
     474,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,    -1,   486,    -1,   488,    -1,   490,    -1,    -1,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
      -1,   515,   516,   517,   518,    -1,    -1,    -1,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
      -1,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,
      -1,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,   608,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,   617,    -1,     5,   620,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    -1,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,   142,   143,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,    -1,   153,   154,   155,    -1,    -1,   158,   159,
      -1,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,   172,   173,    -1,    -1,   176,   177,   178,   179,
     180,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,    -1,   207,    -1,    -1,
      -1,    -1,    -1,   213,    -1,    -1,    -1,   217,   218,   219,
     220,   221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
     280,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,   382,    -1,    -1,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,    -1,    -1,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,    -1,    -1,   436,    -1,   438,   439,
      -1,   441,    -1,    -1,    -1,   445,    -1,    -1,   448,   449,
     450,   451,   452,    -1,    -1,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,   467,    -1,    -1,
      -1,    -1,   472,   473,   474,    -1,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,    -1,   486,    -1,   488,    -1,
     490,    -1,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,    -1,   515,   516,   517,   518,    -1,
      -1,    -1,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,    -1,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
      -1,    -1,   582,    -1,    -1,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,   608,    -1,
      -1,    -1,   612,    -1,    -1,   615,    -1,   617,    -1,     5,
     620,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,   142,   143,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,   158,   159,    -1,   161,   162,   163,   164,   165,
      -1,    -1,    -1,   169,   170,   171,   172,   173,    -1,    -1,
     176,   177,   178,   179,   180,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
      -1,   207,    -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,   280,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,    -1,
     356,    -1,    -1,    -1,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,   382,    -1,    -1,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,    -1,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,    -1,    -1,
     436,    -1,   438,   439,    -1,   441,    -1,    -1,    -1,   445,
      -1,    -1,   448,   449,   450,   451,   452,    -1,    -1,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,   467,    -1,    -1,    -1,    -1,   472,   473,   474,    -1,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,
     486,    -1,   488,    -1,   490,    -1,    -1,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,    -1,   515,
     516,   517,   518,    -1,    -1,    -1,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,    -1,    -1,   582,    -1,    -1,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,   608,    -1,    -1,    -1,   612,    -1,    -1,   615,
      -1,   617,    -1,     5,   620,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,
     122,   123,    -1,   125,    -1,    -1,    -1,   129,    -1,   131,
     132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
     142,   143,   144,    -1,    -1,    -1,   148,    -1,    -1,   151,
      -1,   153,   154,   155,    -1,    -1,   158,   159,    -1,   161,
     162,   163,   164,   165,    -1,    -1,    -1,   169,   170,   171,
     172,   173,    -1,    -1,   176,   177,   178,   179,   180,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,
      -1,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,   247,    -1,    -1,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,   280,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
     382,    -1,    -1,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,    -1,    -1,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,    -1,    -1,   436,    -1,   438,   439,    -1,   441,
      -1,    -1,    -1,   445,    -1,    -1,   448,   449,   450,   451,
     452,    -1,    -1,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,   467,    -1,    -1,    -1,    -1,
     472,   473,   474,    -1,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,    -1,   486,    -1,   488,    -1,   490,    -1,
      -1,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,    -1,   515,   516,   517,   518,    -1,    -1,    -1,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,    -1,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,
     582,    -1,    -1,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,   608,    -1,    -1,    -1,
     612,    -1,    -1,   615,    -1,   617,    -1,     5,   620,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,   142,   143,   144,    -1,    -1,    -1,
     148,    -1,    -1,   151,    -1,   153,   154,   155,    -1,    -1,
     158,   159,    -1,   161,   162,   163,   164,   165,    -1,    -1,
      -1,   169,   170,   171,   172,   173,    -1,    -1,   176,   177,
     178,   179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,    -1,   207,
      -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,   217,
     218,   219,   220,   221,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,   247,
      -1,    -1,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,   280,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,    -1,   356,    -1,
      -1,    -1,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,    -1,    -1,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
      -1,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,    -1,    -1,   436,    -1,
     438,   439,    -1,   441,    -1,    -1,    -1,   445,    -1,    -1,
     448,   449,   450,   451,   452,    -1,    -1,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,    -1,   467,
      -1,    -1,    -1,    -1,   472,   473,   474,    -1,    -1,    -1,
      -1,   479,    -1,    -1,    -1,   483,    -1,    -1,   486,    -1,
     488,    -1,   490,    -1,    -1,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,   507,
      -1,    -1,   510,    -1,    -1,   513,    -1,   515,   516,   517,
     518,    -1,    -1,    -1,   522,    -1,   524,   525,   526,   527,
     528,   529,    -1,    -1,   532,   533,   534,   535,    -1,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,    -1,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,   587,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,
     608,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,   617,
      -1,     5,   620,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,   142,   143,
     144,    -1,    -1,    -1,   148,    -1,    -1,   151,    -1,   153,
     154,   155,    -1,    -1,   158,   159,    -1,   161,   162,   163,
     164,   165,    -1,    -1,    -1,   169,   170,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,   360,    -1,   362,   363,
     364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,    -1,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
      -1,    -1,   436,    -1,   438,    -1,    -1,   441,    -1,    -1,
      -1,   445,    -1,    -1,   448,   449,   450,    -1,   452,    -1,
      -1,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,   467,    -1,    -1,    -1,    -1,   472,   473,
     474,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,    -1,   486,    -1,   488,    -1,   490,    -1,    -1,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
      -1,   515,   516,   517,   518,    -1,    -1,    -1,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
      -1,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,
      -1,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,   617,    -1,    -1,   620
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    30,    34,    48,    49,    56,    60,    61,
      76,    94,   116,   117,   126,   127,   128,   139,   140,   152,
     166,   184,   199,   201,   206,   209,   232,   234,   252,   269,
     273,   369,   386,   399,   410,   432,   435,   437,   440,   443,
     444,   453,   455,   463,   469,   477,   482,   484,   514,   521,
     564,   576,   580,   583,   588,   616,   631,   642,   645,   646,
     647,   648,   649,   651,   656,   658,   665,   698,   725,   732,
     733,   852,  1017,  1059,  1061,  1075,  1078,  1083,  1085,  1086,
    1091,  1094,  1099,  1106,  1118,  1119,  1120,  1282,  1284,  1299,
    1302,  1327,  1335,  1346,  1353,  1367,  1371,  1374,  1384,  1390,
    1394,  1396,  1397,  1449,  1477,  1483,  1485,  1492,  1495,  1522,
    1528,  1529,  1530,  1531,  1588,  1596,  1597,    11,   103,   123,
     193,   222,   274,   404,   475,   538,   586,  1055,  1553,  1554,
    1555,  1558,   270,   357,  1093,  1523,   546,  1440,   226,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    30,    34,    38,    41,    42,    43,
      45,    47,    48,    51,    54,    55,    57,    58,    60,    62,
      63,    64,    65,    66,    67,    69,    70,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    82,    83,    85,    86,
      87,    88,    89,    93,    96,    98,   101,   105,   106,   107,
     110,   115,   117,   122,   123,   125,   129,   131,   132,   133,
     134,   135,   139,   142,   143,   144,   148,   150,   151,   153,
     154,   155,   158,   159,   161,   162,   163,   164,   165,   166,
     169,   170,   171,   172,   173,   176,   177,   179,   180,   181,
     184,   188,   189,   191,   193,   195,   196,   197,   198,   200,
     202,   206,   207,   209,   212,   213,   217,   218,   219,   220,
     223,   224,   225,   228,   233,   234,   238,   242,   243,   245,
     246,   250,   253,   254,   257,   260,   261,   267,   268,   270,
     272,   274,   275,   283,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   303,   304,   305,   307,   308,   309,   310,   312,   313,
     318,   319,   320,   321,   322,   323,   326,   327,   329,   331,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   344,
     345,   348,   349,   350,   351,   355,   356,   360,   362,   363,
     364,   366,   367,   368,   370,   380,   381,   382,   384,   385,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     399,   400,   401,   403,   405,   406,   407,   408,   409,   411,
     412,   413,   416,   420,   421,   422,   423,   424,   427,   428,
     429,   430,   431,   433,   434,   436,   437,   438,   441,   443,
     445,   446,   448,   449,   450,   452,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   467,   468,   472,
     473,   474,   475,   479,   483,   485,   486,   487,   488,   490,
     491,   492,   493,   494,   500,   501,   502,   504,   505,   507,
     510,   513,   514,   515,   516,   517,   518,   521,   522,   524,
     525,   526,   527,   528,   529,   532,   533,   534,   535,   537,
     538,   541,   542,   543,   544,   547,   548,   550,   551,   552,
     553,   559,   560,   564,   565,   566,   567,   569,   570,   572,
     573,   575,   576,   579,   582,   584,   586,   587,   594,   597,
     601,   602,   603,   604,   605,   612,   613,   615,   616,   617,
     620,   692,  1438,  1443,  1447,  1448,   303,   537,   540,  1479,
    1479,   612,  1524,   103,   192,   274,   475,   495,   538,   543,
     578,   586,   674,   675,   904,   905,   906,   995,   996,   997,
     136,  1129,  1336,  1283,   103,   163,   193,   226,   274,   404,
     475,   538,   543,   561,   586,   601,  1295,  1443,  1093,    98,
     734,   691,   639,  1435,  1437,  1443,   657,  1300,   392,    82,
     412,  1395,   106,   226,   617,  1402,  1479,  1093,   853,  1443,
    1391,   463,   586,  1479,  1093,  1303,  1385,   498,   722,   726,
     727,  1443,   691,  1524,  1443,  1123,  1125,  1126,  1450,  1354,
     726,   487,   559,   487,   540,  1348,   392,  1484,  1328,  1443,
      30,    76,   150,   399,   421,   455,   514,  1590,   469,   631,
    1121,     0,   152,   643,   399,   116,   172,   188,   387,  1372,
    1435,  1443,   156,  1029,  1443,   156,   692,   203,   692,   262,
    1440,  1443,  1445,   800,   801,   804,   827,  1443,   691,   540,
     163,  1023,  1553,  1479,  1524,  1100,   699,   639,   557,  1076,
    1087,    17,  1525,   221,   907,   203,  1445,   802,   827,   691,
     376,  1550,  1554,  1555,  1556,  1557,  1558,   540,   905,   226,
     226,   226,   626,  1131,  1139,  1140,   222,   281,   413,  1344,
    1345,     7,    21,    27,    33,    35,    36,    37,    39,    52,
      53,    58,    59,    66,    69,    88,    91,    92,    97,    99,
     102,   103,   108,   109,   110,   115,   118,   121,   167,   174,
     175,   182,   188,   196,   198,   204,   210,   217,   221,   232,
     235,   259,   267,   278,   306,   311,   322,   326,   328,   332,
     333,   334,   335,   336,   343,   352,   353,   354,   358,   359,
     364,   383,   389,   394,   395,   397,   411,   439,   440,   452,
     454,   460,   461,   467,   519,   520,   526,   530,   531,   536,
     546,   550,   551,   552,   553,   562,   563,   564,   568,   571,
     586,   590,   591,   592,   593,   598,   600,   604,   605,   620,
     624,   625,   630,   631,   634,   635,   638,   639,   956,  1144,
    1145,  1146,  1147,  1151,  1154,  1155,  1156,  1157,  1158,  1159,
    1167,  1171,  1183,  1421,  1423,  1425,  1426,  1427,  1431,  1433,
    1438,  1443,   221,  1294,  1294,  1294,  1443,   203,  1294,  1294,
     827,  1294,   691,  1294,  1479,   652,  1375,   131,  1496,  1443,
     368,    65,   417,   639,  1445,   124,   211,   281,  1305,  1443,
    1144,   236,  1398,  1478,  1479,    46,   854,   190,    33,   303,
    1359,  1392,  1443,   691,  1095,  1479,   124,   281,  1306,  1334,
     303,   412,   487,  1386,  1387,   594,   723,   477,   728,  1493,
     557,  1525,  1124,    12,   136,   211,   503,   504,   505,   506,
     507,   508,   523,  1134,  1135,  1136,  1549,    58,    59,   121,
     200,   270,   339,   389,   474,   559,   638,   958,  1443,  1451,
    1463,  1467,  1469,    34,    58,    69,    92,    94,   104,   154,
     159,   162,   191,   193,   200,   202,   225,   226,   249,   270,
     303,   368,   393,   403,   404,   407,   408,   428,   474,   487,
     522,   540,   603,   958,   994,  1355,  1359,  1360,  1362,  1464,
     728,   431,   510,  1070,  1071,  1072,   417,   609,  1062,  1063,
    1064,  1070,  1347,  1443,  1479,  1334,    35,   210,   546,  1422,
    1441,  1589,  1589,  1589,  1589,  1589,  1125,  1121,   632,   637,
    1443,  1129,   156,  1369,  1368,   320,   544,   570,  1019,   584,
      99,  1445,  1446,  1021,   806,   828,  1443,  1020,   370,     6,
      56,   140,   353,   416,   418,   829,  1025,  1446,  1435,   692,
     509,  1559,  1560,  1022,  1084,  1101,  1102,  1103,  1104,  1435,
     631,   700,  1443,   659,  1289,  1290,  1435,  1289,    55,   355,
     355,   432,  1526,   352,   353,  1150,  1443,   805,   828,   186,
       6,  1446,  1512,  1513,   440,    10,   404,   561,   678,  1140,
    1552,  1560,  1572,  1576,  1577,  1583,   678,  1140,  1551,  1560,
    1572,  1577,  1583,  1553,  1558,   907,  1443,  1443,  1443,   190,
     633,  1130,  1144,  1429,  1443,   190,  1337,  1341,  1342,  1443,
    1344,   631,   631,   631,  1154,   631,   631,   631,  1144,  1186,
     631,   631,   631,   631,   631,   631,   631,   631,   631,  1143,
    1143,   631,   945,   631,   631,   631,   546,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
    1144,   631,   631,   631,  1184,  1185,  1431,  1443,   631,   631,
     631,   631,   631,   631,   631,   631,   631,  1144,   945,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   945,   546,   631,
     631,   631,   546,   631,   631,   631,    35,   210,   546,   631,
    1143,   945,   945,   631,   631,   631,   631,   631,   631,  1154,
    1154,  1154,  1144,  1544,  1545,  1443,  1172,  1443,    16,    17,
     373,   376,   618,  1148,  1149,   156,   157,   194,   205,   244,
     255,   282,   346,  1152,    31,   137,   239,   263,   332,   426,
     480,   481,   493,   622,   623,   624,   625,   626,   627,   628,
     629,  1150,  1154,    68,   375,   633,  1441,   631,   639,   167,
    1443,   692,  1443,   365,   828,   692,  1445,   356,   602,   838,
     839,  1296,  1297,  1298,  1360,   692,  1446,  1511,  1288,  1294,
     589,   653,    33,   129,   154,   158,   195,   213,   275,   403,
     412,   427,   445,   488,   518,  1376,  1381,  1382,  1479,    81,
     638,   735,   736,   737,   738,  1443,    12,    13,    94,   126,
     140,   163,   166,   179,   201,   226,   232,   273,   405,   409,
     425,   433,   441,   469,   482,   483,   532,   561,   583,   585,
    1497,  1499,  1501,  1502,    19,   156,  1238,  1239,  1486,  1443,
    1055,   492,    48,    80,   281,  1404,  1435,  1480,  1481,  1092,
     265,   268,   414,   855,   857,   638,   650,  1440,   275,  1096,
    1446,  1097,  1098,  1435,  1079,   236,  1291,  1307,  1308,  1435,
      48,  1388,   633,  1441,    54,    63,    73,    85,    86,    87,
     101,   321,   338,   465,   525,   542,   729,   731,    12,   409,
    1494,  1499,   463,  1527,  1526,   577,  1532,  1533,   626,  1138,
    1139,  1136,   477,   639,    33,   121,   156,   478,   959,   960,
    1318,  1445,   187,  1318,  1453,   638,  1445,    33,   121,   962,
     963,  1445,   639,  1454,  1452,  1318,   162,   263,   607,  1366,
     631,   103,   163,   193,   404,   540,   561,   601,  1366,    12,
     916,  1445,   264,  1257,  1259,   190,   239,  1361,  1363,    67,
     518,   187,   518,   537,    67,   518,    12,    41,    89,    93,
     243,   319,   382,   494,   534,  1349,  1350,  1351,   162,   213,
     518,   518,  1257,  1366,  1363,   275,   153,    70,   406,   537,
     560,   518,   597,  1060,   633,   367,   614,    83,   633,  1290,
    1055,   633,   366,  1592,   533,  1593,   248,   448,  1591,   632,
    1533,  1535,  1537,  1538,   152,   644,  1131,  1445,  1119,  1299,
    1302,  1327,  1335,  1370,  1373,  1422,  1443,   121,   902,   903,
     913,   914,   967,   106,  1143,   638,   693,     6,   807,   693,
     631,   105,   824,   824,   824,     4,   633,   389,  1018,  1024,
     468,   601,  1560,  1289,   239,   633,   386,  1112,  1114,  1115,
     701,   702,  1144,   223,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   304,   305,   429,   430,   660,   661,   664,
     172,   413,   633,  1077,    57,   172,   176,   187,   318,   413,
    1088,  1089,  1090,    55,   432,   167,   673,   807,   106,   824,
     219,   633,  1140,  1140,  1140,   163,   193,   193,  1560,  1435,
     998,   999,   998,   998,   469,   631,   635,  1189,  1190,  1191,
    1192,  1193,  1204,  1205,  1219,  1139,  1141,  1141,   639,  1292,
    1293,  1435,  1436,  1443,   633,  1339,   639,  1343,  1144,  1144,
      12,   136,  1179,  1240,  1179,  1179,  1179,   606,  1188,  1144,
    1144,  1183,  1183,  1144,  1144,  1144,   136,  1179,  1240,   632,
     359,   632,   632,  1144,  1144,  1144,  1144,  1431,  1544,   111,
     112,   113,   114,   115,   214,   215,   216,   217,   322,   324,
     325,   326,   333,   411,   466,   467,   604,   619,   620,  1235,
    1236,  1144,  1183,   107,   110,   550,   553,  1237,   136,  1174,
    1144,  1144,  1144,  1144,  1235,  1144,  1183,  1185,     9,   633,
     639,   136,  1179,  1144,  1144,   136,  1179,  1144,  1144,  1183,
    1183,  1183,  1144,  1144,  1144,  1183,  1147,  1144,  1144,  1144,
    1144,  1144,  1144,   632,  1144,  1179,  1179,  1144,  1144,   136,
    1179,  1144,  1236,  1236,  1144,    44,   256,   558,  1144,  1144,
     632,  1432,  1433,  1443,  1179,  1179,  1144,  1144,  1144,   632,
     633,   632,   469,   631,  1541,  1542,  1144,   638,  1173,  1445,
     639,  1144,  1144,  1144,  1146,   175,   358,   563,   579,  1150,
      12,    18,  1146,  1153,  1147,  1147,   631,  1154,  1147,  1147,
    1147,  1147,   263,  1147,  1147,   235,  1147,   235,  1147,  1147,
    1147,  1147,  1147,    31,   239,   263,   426,  1445,  1154,  1144,
    1160,  1443,   639,  1435,  1296,   633,  1298,   154,   633,  1289,
    1285,   638,   654,   655,   275,   275,   275,   275,    48,   275,
     275,   633,  1377,   110,   550,   553,   730,   740,  1171,  1425,
    1431,  1445,   633,   156,   403,  1500,   457,   457,   538,   543,
     586,   601,   371,  1504,   537,   365,  1506,    64,   487,  1503,
     104,   601,  1505,   365,   633,  1443,   180,   349,  1443,  1487,
    1488,  1307,  1440,  1107,   270,  1403,  1239,   633,  1289,    70,
     631,   862,   863,   862,   863,   387,   865,   207,   251,  1445,
      29,   557,  1393,   633,   557,   633,   557,  1289,  1308,  1304,
     386,  1202,  1203,    12,  1389,  1387,   633,   156,  1500,   365,
     365,  1443,    12,   136,  1540,   633,  1127,  1443,    68,   965,
    1144,  1446,   364,   389,   546,  1475,   245,   417,  1470,  1471,
    1472,  1473,   200,   270,   474,  1465,  1318,  1443,   559,  1455,
    1466,  1469,   633,  1457,  1468,   239,  1364,  1440,  1144,   626,
     907,   692,   692,   692,  1435,   692,  1435,   275,   337,   518,
    1358,  1358,   278,   359,   568,  1260,  1261,  1423,  1443,  1366,
    1443,   692,  1366,  1446,  1361,   692,  1366,   242,   535,   177,
     187,  1352,   633,  1364,  1361,  1435,  1363,  1361,  1361,  1366,
    1366,   582,  1073,  1072,   490,  1064,  1190,  1422,   390,  1594,
     374,  1253,  1259,  1539,  1130,   903,    68,   958,   132,  1445,
      74,    88,   253,   330,   355,   415,   509,   695,   697,   422,
     572,   825,   826,   228,   821,   822,   823,   830,   838,   839,
     103,   212,   380,   389,   396,   491,   586,   676,   677,  1440,
      24,   310,   815,   816,   817,   830,   831,   832,   838,   839,
     808,   809,   815,  1446,   170,     6,    11,    13,    15,    25,
      26,    56,    60,    61,    66,    74,    82,    91,   106,   125,
     133,   134,   140,   148,   154,   165,   185,   224,   226,   233,
     250,   273,   309,   327,   331,   369,   374,   381,   386,   389,
     420,   434,   435,   436,   437,   459,   515,   516,   517,   522,
     538,   541,   564,   577,   849,   909,   911,   913,   914,  1030,
    1034,  1036,  1039,  1045,  1046,  1047,  1052,  1053,  1249,   365,
     686,  1026,   123,   238,  1435,   121,  1105,  1443,  1103,  1435,
     851,  1114,   226,   251,   992,  1116,   632,   633,   156,   156,
     156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
     156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
     156,   156,   633,  1290,   584,  1089,   901,   902,    74,   350,
     423,   573,   818,   819,   820,   830,   834,   835,   836,   837,
     838,   839,   613,   588,   803,    46,   609,  1513,   193,   692,
     692,   907,   692,  1443,   666,   566,   589,  1006,   365,   365,
     365,  1218,  1443,    95,   229,   248,   259,   342,   454,   523,
    1201,   607,  1132,   633,  1435,  1218,    19,  1142,  1440,  1443,
     626,  1443,   633,  1340,  1202,   639,  1343,  1342,   190,   626,
    1443,   633,   632,  1179,   632,  1180,   632,   632,   632,  1144,
     146,   606,  1187,    19,   632,   589,   632,   632,   632,   633,
     589,   633,  1168,   632,   626,   632,   633,   633,   632,   632,
     632,   632,   190,   633,   632,   633,  1170,   632,   633,   633,
     633,   625,   633,   632,   632,   631,  1431,  1443,  1179,   632,
     632,   632,  1179,   632,   633,   632,   632,   632,   632,   632,
     632,   633,   632,   239,   632,   633,   633,   632,   633,   633,
     632,   632,   632,   633,   190,   633,  1179,   632,   632,   633,
     633,   633,   632,   190,  1144,   190,  1144,   190,  1144,   190,
     632,   633,   632,   632,   632,   632,   633,    19,   261,   633,
     982,   632,  1183,  1209,  1210,  1211,   469,   631,  1122,  1536,
    1537,   577,  1546,   636,  1465,   478,  1443,   175,   358,   563,
     579,   631,    17,  1144,  1544,   161,  1245,  1147,  1144,  1144,
    1147,   631,  1154,  1147,  1140,  1164,  1165,  1166,   631,   639,
    1443,  1286,  1298,  1318,  1319,  1446,    50,   447,  1056,  1289,
    1445,   633,  1382,  1289,  1383,   738,   741,   742,   737,   360,
     461,   739,   537,   631,  1514,  1446,  1514,  1514,  1514,   193,
     404,   540,  1498,  1502,   156,   180,   194,   205,   254,   255,
     282,   349,   401,  1489,  1491,   607,  1241,  1301,  1108,  1109,
    1110,  1111,  1435,   227,   281,   417,   614,  1482,  1481,   631,
    1140,   118,   182,   210,   278,   359,   568,  1264,  1267,  1268,
     529,   866,   856,    11,   858,  1144,  1440,  1446,  1446,  1098,
    1435,   172,   413,   587,  1080,  1081,  1082,   469,   477,   593,
     594,   631,   897,  1309,  1312,   631,   731,   730,   633,  1446,
     193,   404,  1498,  1534,  1139,   190,   236,  1128,  1133,  1252,
    1253,  1277,   121,   964,   966,  1445,  1318,   631,   631,   261,
     367,   614,   633,   633,   639,   639,   639,  1469,  1144,  1470,
    1456,  1318,  1458,  1459,    12,    33,   121,   365,  1144,  1476,
    1440,   190,  1365,   632,  1443,   363,   633,  1366,   412,  1257,
    1351,  1365,  1366,  1361,  1435,  1366,  1366,   500,   501,   502,
     664,  1074,   586,  1065,  1066,   477,   633,   187,  1595,    46,
    1257,  1319,  1319,   340,  1440,   509,   509,   509,   509,   509,
     468,  1440,  1440,  1319,   633,   823,  1440,  1440,  1440,  1440,
     118,   182,   210,   278,   359,   568,  1263,  1440,  1440,   632,
     633,  1319,  1319,   633,   817,   810,   811,   830,   831,   832,
     389,    71,    84,   386,   925,   928,   929,   990,   992,   996,
     997,  1054,  1319,  1054,   386,  1319,  1319,  1054,  1319,   386,
     386,  1319,  1319,   557,   132,  1319,   249,   538,   186,   386,
     402,   992,  1054,   249,  1319,   386,   538,   132,  1319,  1319,
    1319,  1319,  1319,  1054,   386,    46,  1319,   851,  1319,   386,
     388,    19,   156,   557,  1058,   386,   386,  1319,  1319,  1319,
    1319,   135,   319,  1443,  1319,   386,  1319,   909,   633,   848,
     849,  1034,   631,   639,   924,   930,  1434,  1443,    78,   464,
     435,  1027,  1561,  1113,   631,  1144,   631,  1263,  1439,  1440,
    1263,  1263,  1439,  1439,   118,   182,   278,   359,   568,  1265,
    1439,  1263,  1263,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1263,  1263,  1439,  1426,  1439,  1263,   661,  1319,  1319,  1319,
    1319,   633,   820,  1445,   274,   173,   812,   813,   814,   830,
     831,   832,   833,   836,   837,   838,   839,   389,   546,  1445,
    1443,  1584,     8,    29,   798,   692,   631,   450,   263,   631,
     841,   908,   910,   911,    45,   207,   462,  1011,  1011,  1435,
    1435,  1435,  1206,  1213,  1218,  1189,   248,   248,   377,  1220,
     248,   259,   454,  1220,  1204,  1189,  1144,  1191,  1202,  1215,
    1216,  1440,  1443,   639,  1293,  1443,   589,  1338,  1443,  1190,
     639,  1343,   235,  1144,   632,  1144,   549,  1144,  1144,   150,
      33,    59,   107,   110,   119,   344,   485,   553,   581,  1181,
     959,  1144,   959,  1181,  1183,   632,   235,   235,  1144,  1144,
    1144,  1183,  1144,  1144,  1144,  1144,  1144,  1147,   632,   632,
    1144,  1144,  1144,  1144,  1144,  1144,  1183,   235,  1144,  1144,
    1144,   632,  1144,  1144,  1144,  1144,   190,  1144,   190,  1144,
     190,  1144,  1144,  1144,    33,    59,   977,   978,   979,   980,
     981,  1264,  1263,   632,   632,  1547,  1548,  1549,  1210,  1122,
     632,  1540,  1445,  1144,  1544,  1146,   632,   633,   632,  1154,
    1235,  1235,    17,  1144,  1544,  1245,  1144,   632,   633,  1182,
    1183,  1443,  1287,   915,  1445,  1056,   655,  1378,   156,   633,
    1443,  1515,  1516,   557,   626,  1435,  1443,  1510,  1510,  1510,
    1490,  1242,  1258,  1259,  1309,   633,  1112,  1114,   546,  1442,
     614,   270,   859,   860,   861,  1443,   871,  1147,    46,   631,
     873,   863,   156,   631,   557,  1081,   898,  1310,   631,  1315,
    1320,  1315,   632,   897,  1311,  1428,  1429,  1432,  1443,  1313,
    1234,  1443,   156,   201,   190,  1510,  1510,  1510,  1120,   141,
    1190,  1278,   187,   273,  1137,  1277,  1258,  1133,  1475,   546,
     546,   417,   438,   472,  1474,  1472,  1471,  1318,  1457,  1476,
     633,  1461,  1463,  1467,  1265,  1356,   159,   603,  1261,  1261,
     359,  1357,  1241,  1361,   156,   156,   633,   156,   389,  1067,
    1330,  1331,  1432,  1263,   323,  1254,   966,   960,   106,   106,
     123,   238,   278,   359,   568,   840,  1266,  1267,  1438,   823,
     677,   840,   840,   817,   633,   811,   170,  1014,  1434,  1093,
      61,   186,   402,   578,   927,   991,  1014,   992,   993,   993,
     121,  1443,  1434,  1093,  1265,  1263,  1434,  1263,    12,  1035,
    1043,  1044,  1443,  1093,  1440,  1440,   958,  1319,  1263,   251,
    1043,   251,  1434,  1434,   915,  1044,  1319,   180,   254,   355,
     918,  1263,   121,  1443,  1265,  1265,  1434,  1093,  1250,  1251,
    1432,   121,  1263,   850,  1440,  1093,   851,  1435,  1093,  1093,
      77,    79,   121,   144,   181,   424,   917,   121,  1263,   121,
    1263,   121,  1263,  1263,  1035,   912,     6,   140,  1047,   921,
     922,   923,   924,   925,  1443,     8,   180,  1057,   425,   926,
     927,   984,   931,   639,   353,   400,    23,   164,   680,   557,
     133,   148,   682,   631,  1562,   631,   402,  1231,  1232,  1233,
    1443,   662,   663,  1263,  1440,  1264,   840,   840,   820,   370,
     203,  1319,   633,   814,   546,    19,   450,   631,   126,   232,
     583,   799,   679,  1578,   119,   237,   419,   524,   920,  1435,
     263,   842,   847,   848,   921,   847,   633,   910,   667,   669,
     671,   577,   632,  1536,  1214,   636,   248,  1204,  1220,  1220,
     248,   365,   365,   589,  1239,  1134,   626,   639,  1190,  1241,
    1343,  1241,  1144,   632,  1144,   549,   631,   949,   950,   950,
     631,   944,   631,   942,   943,   949,   950,   237,   944,   237,
     632,   632,   632,   632,   632,  1169,  1144,  1144,   632,   632,
     633,   632,   374,  1176,   633,   633,   632,   633,   632,   239,
    1161,  1162,   632,   632,   632,   632,   633,   632,   632,  1144,
     632,   187,   632,   632,   633,   632,   633,   633,   632,  1144,
     632,  1144,   632,  1144,   632,   632,   632,   631,   972,   972,
      20,   127,   452,   624,   974,   975,   976,   633,   633,  1138,
    1549,   632,  1543,   639,  1015,   632,  1183,  1146,   632,   633,
     632,  1141,  1166,   632,  1051,  1052,  1053,   187,   609,  1379,
      54,    63,    73,    85,    86,    87,   101,   321,   338,   449,
     465,   525,   542,   743,   742,   632,   633,  1512,   639,   639,
     557,   557,   557,   631,  1144,   365,  1325,  1110,  1435,  1114,
     222,  1117,  1399,   632,   633,  1141,   857,   386,   874,   875,
    1264,   859,  1446,  1134,  1316,  1317,  1432,  1321,   633,   631,
    1312,   632,   632,   633,   639,  1532,   632,   633,   730,   371,
    1512,   190,   190,   190,  1241,  1241,   142,   378,  1273,  1274,
    1279,   583,   239,   632,   632,    75,   569,   417,  1476,  1460,
    1462,  1257,  1257,  1366,  1440,  1440,   664,  1440,   156,   122,
    1068,   633,  1329,  1318,  1144,  1255,  1430,   811,  1037,   631,
     251,   251,   993,  1014,   999,  1014,  1014,   140,   477,  1035,
    1048,  1032,   633,  1264,   960,  1440,  1434,  1056,   609,  1440,
    1049,  1035,   633,    20,   127,  1256,   854,  1035,  1040,  1035,
     631,   632,   633,  1443,  1435,    32,    33,    38,    40,    42,
      43,    59,   107,   110,   119,   138,   155,   181,   183,   196,
     197,   237,   267,   276,   277,   279,   315,   316,   317,   334,
     335,   336,   341,   344,   361,   362,   394,   395,   419,   473,
     477,   489,   547,   550,   553,   554,   555,   556,   595,   596,
     620,   932,   935,   936,   937,   938,   939,   940,   941,  1443,
     400,  1144,  1144,   365,   686,   692,   365,    74,   687,  1443,
    1563,    19,  1035,   632,   633,   632,   633,   631,  1443,   840,
     814,  1440,   920,  1585,   365,   365,   703,   704,   706,  1443,
     492,  1435,   897,   632,   222,   440,   844,  1405,   910,   631,
     631,   631,  1540,  1239,  1192,  1189,  1204,   248,   248,  1189,
    1204,  1195,  1194,  1196,  1229,  1230,  1138,  1443,  1241,  1252,
    1235,  1144,   118,   278,   359,   568,    21,    33,    47,   575,
     958,   968,   969,   970,   359,   359,   632,  1235,  1235,  1144,
      46,   471,  1175,  1144,  1144,  1183,    42,   342,   632,   609,
    1163,  1144,  1235,  1144,  1144,  1144,  1144,   632,   632,   632,
    1264,   632,   982,   977,   975,   977,   978,  1263,  1212,  1541,
    1443,   632,  1183,  1142,  1053,  1052,  1380,   417,  1516,   609,
    1519,   626,   626,  1512,  1512,  1512,   121,  1144,  1323,  1324,
     143,  1117,   257,  1405,   861,   632,   207,   251,   876,   632,
     633,   632,  1138,   633,  1318,  1322,  1323,  1320,  1314,  1312,
    1428,  1443,   851,  1443,   190,  1512,  1512,  1512,  1258,   203,
    1246,  1442,  1442,   638,  1275,  1276,  1445,   479,  1461,  1466,
    1440,   156,   391,  1069,  1331,  1241,  1324,   633,  1256,   387,
     631,  1038,  1144,  1014,   999,   631,   998,   998,   121,   121,
     930,  1088,  1044,   965,   540,   932,  1031,  1251,  1041,  1043,
    1033,  1383,   923,   631,   985,   949,   949,   950,   944,   942,
     398,   933,   942,   942,   970,    59,   595,   936,   938,   970,
     970,    59,   596,   596,   599,   942,   934,   950,   944,   944,
     970,   949,   950,    25,    68,    72,    74,   121,   358,   365,
     402,   473,   522,   578,   952,   953,   954,   983,  1150,   599,
     949,   970,    33,   949,   971,   949,   949,   950,   631,   943,
     951,   639,  1235,   487,  1440,   139,  1028,   632,   633,  1564,
    1565,   632,  1232,   663,   676,   492,   230,   239,   379,   707,
     708,   709,   710,  1140,   464,   632,   633,   705,  1440,   632,
     632,   908,    19,   900,  1012,  1013,  1443,  1012,  1012,  1207,
     365,  1198,  1204,  1204,   365,  1200,  1144,  1144,   631,  1227,
    1228,  1217,   264,  1262,   632,   632,   632,   632,   632,    33,
      21,   575,   958,    33,   959,   632,   633,   632,   632,   632,
    1177,  1422,   632,   632,   633,   632,   329,   253,   412,   632,
     632,   632,   632,   632,   632,   973,   632,   633,   919,  1133,
    1258,  1536,   632,   171,   273,   201,   442,  1517,  1517,  1517,
     632,   633,  1326,   236,   631,   864,   858,   877,  1443,   875,
     899,  1317,  1324,   632,  1535,  1512,    46,   208,  1243,  1280,
    1445,   633,   329,  1440,   156,  1252,  1430,  1264,   874,   632,
     631,   631,  1012,   631,   631,   110,   550,   553,   624,   625,
    1424,  1425,  1057,  1435,   952,  1093,  1042,  1080,   632,   986,
    1443,   306,   987,   485,   581,   621,   946,   947,   948,   631,
     946,   946,   970,   599,   946,   631,   970,   946,   964,   121,
     144,   181,  1440,   956,   957,  1424,   583,   121,   121,   135,
     319,   251,   954,   251,   358,   970,   971,   970,   971,   946,
     359,   946,  1443,   681,   688,   689,  1443,   469,   631,  1566,
    1569,   632,  1440,   632,   633,   705,  1573,   680,  1579,   706,
     932,   955,   843,   847,   631,   897,   632,   633,  1256,   631,
     632,   632,  1541,  1197,   589,  1199,   589,  1234,   185,   222,
     588,  1222,  1223,  1226,   919,  1261,   959,   971,   359,  1178,
    1430,  1144,   329,   169,   632,  1263,  1137,  1137,   371,    62,
     246,   351,   511,   527,   615,  1508,  1509,   609,  1518,  1518,
    1518,  1324,   251,   540,  1140,   867,   631,   593,   878,   919,
    1247,  1430,  1244,  1252,   958,   961,  1276,  1440,  1262,  1256,
     632,  1012,  1012,   632,  1012,  1012,  1426,  1426,   851,  1050,
     236,   632,   633,   191,   385,   486,   365,   988,   948,  1016,
    1422,  1016,   956,   594,   513,   683,    52,    65,   178,   221,
     247,   258,   368,   451,   690,   748,   750,   751,   752,   754,
     755,   756,   757,   758,   759,   761,   769,   770,   773,   784,
     787,   789,   790,  1438,  1444,  1448,  1570,   631,  1568,  1569,
     609,  1571,  1567,  1586,   709,  1443,  1435,   685,   686,   450,
     965,  1535,   844,   897,   845,    74,   250,  1000,  1003,  1006,
    1007,  1008,  1013,   359,   609,  1001,  1005,  1007,  1010,  1002,
    1004,  1007,  1009,  1208,  1144,   631,  1144,   631,   632,   992,
     992,  1223,   632,   633,  1256,   632,   632,   546,   546,   546,
      17,  1507,   201,   307,   308,   312,   313,  1520,  1521,   583,
    1435,   871,   528,   872,   869,   870,  1443,   239,   260,    74,
     106,   226,   309,   327,   350,   538,   894,   895,   896,  1360,
     610,   611,   633,  1248,  1256,  1144,  1258,   960,  1281,   632,
     632,  1000,   632,   632,  1057,   631,  1443,   126,   583,   632,
     633,   632,  1144,   151,   684,   771,   774,  1443,   190,   349,
     762,   749,  1444,  1444,  1443,   753,   646,   280,   439,   608,
     793,    30,   791,   640,  1125,  1568,   632,    51,    61,   270,
    1532,   694,   955,   187,   682,  1580,   632,  1532,  1440,  1319,
     668,  1008,  1256,   632,   384,   670,  1010,   672,  1009,  1536,
    1234,  1234,   187,  1221,  1221,  1430,  1508,   371,  1263,  1263,
    1263,  1263,  1521,  1332,  1333,  1432,  1202,  1141,  1264,   632,
     633,   880,   548,  1319,   132,   132,  1319,  1319,  1319,  1319,
     631,   889,   896,   154,  1430,   404,  1269,    70,  1406,   984,
    1000,  1001,  1002,   874,    50,   355,   447,   477,   989,   989,
     970,  1422,   970,  1144,  1144,   606,   776,   780,   190,  1443,
     764,   765,  1144,   712,   747,   748,   750,   752,   754,   756,
     757,   758,   759,   761,   769,   784,   787,   789,   712,   794,
     792,   785,   788,   632,  1535,    61,   371,    61,   130,   695,
     696,  1150,  1587,  1140,   687,   955,   846,  1263,  1051,  1438,
    1051,  1051,   632,   632,   203,   248,   374,  1225,  1224,  1256,
     633,  1318,  1400,   632,   868,   870,   631,   882,   884,   879,
    1440,  1319,  1319,  1266,  1266,  1264,  1445,   529,   890,   891,
    1319,  1256,    14,   149,   160,   372,   545,  1407,  1408,   266,
    1409,   632,     5,   121,   358,   365,   365,   772,   781,   146,
     780,   783,   236,   150,  1144,   150,   747,   637,   582,  1144,
     713,   793,   791,   371,   371,   130,   747,  1574,   139,  1581,
    1535,    46,    46,   631,   631,  1333,  1324,   961,   872,   631,
     883,   884,   885,   314,   881,   884,  1440,  1440,   892,   632,
     633,   915,  1270,    46,    46,   149,    46,  1408,   512,   545,
    1410,  1411,   583,   126,   606,   775,   777,  1144,   712,   150,
     760,   221,   766,   280,   637,   796,   795,   120,   711,   714,
     786,  1444,   786,   145,   688,   694,  1231,  1233,  1401,   632,
     633,   314,   887,   888,  1147,   893,  1445,   891,   631,  1422,
    1422,    46,  1422,    46,    46,  1411,   989,   989,   778,   777,
     783,   782,    52,   763,  1443,   549,  1144,   139,    90,   168,
     718,   744,  1443,   150,   747,   637,   460,  1582,   632,   632,
     458,  1412,   884,   633,   886,   894,   359,  1271,  1272,  1422,
    1422,  1422,  1144,   150,   549,   633,   712,   797,   712,   206,
     633,   715,    81,   100,   637,  1575,   747,   219,  1406,   888,
     632,   632,   633,   779,    52,   712,  1443,   767,   150,   150,
     187,  1443,   955,   187,   187,   747,    46,  1409,  1272,   549,
     146,   147,   768,   439,   608,   716,   121,   745,   721,   722,
    1263,   717,  1422,   222,  1413,   712,   712,   764,   497,   499,
     719,   720,   721,   724,  1150,  1443,   746,  1119,   359,   631,
    1415,   633,   747,   189,  1144,   266,   458,  1414,   632,   638,
    1416,  1417,  1432,   477,  1418,   720,  1445,   632,   633,  1419,
    1420,  1432,  1417,   633,  1318,  1420,  1140,  1324,  1141
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YYTHD, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, YYTHD)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, YYTHD); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (YYTHD);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, class THD *YYTHD)
#else
static void
yy_reduce_print (yyvsp, yyrule, YYTHD)
    YYSTYPE *yyvsp;
    int yyrule;
    class THD *YYTHD;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , YYTHD);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, YYTHD); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, class THD *YYTHD)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, YYTHD)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    class THD *YYTHD;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (YYTHD);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (class THD *YYTHD);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (class THD *YYTHD)
#else
int
yyparse (YYTHD)
    class THD *YYTHD;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1974 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1986 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 2011 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 2087 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 2102 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
            /*
              We don't know know at this time whether there's a password
              in prepare_src, so we err on the side of caution.  Setting
              the flag will force a rewrite which will obscure all of
              prepare_src in the "Query" log line.  We'll see the actual
              query (with just the passwords obscured, if any) immediately
              afterwards in the "Prepare" log lines anyway, and then again
              in the "Execute" log line if and when prepare_src is executed.
            */
            lex->contains_plaintext_password= true;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 2122 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2129 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2139 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2146 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2161 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2173 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2181 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2192 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2205 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2215 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2219 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2223 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2227 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2232 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2236 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2240 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.retry_count= (yyvsp[(3) - (3)].ulong_num);
            Lex->mi.retry_count_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2245 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              Lex_input_stream *lip= YYLIP;
              const char *start= lip->get_tok_start();
              const char *msg= YYTHD->strmake(start, lip->get_ptr() - start);
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       msg, MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2258 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2263 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2267 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2271 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2275 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2279 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2283 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2288 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2292 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2297 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2328 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2333 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.auto_position= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE :
              LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2350 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2364 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2368 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2384 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2388 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
                                               Lex->mi.relay_log_pos);
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2400 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_SHARED))
              MYSQL_YYABORT;
            /*
              Instruct open_table() to acquire SHARED lock to check the
              existance of table. If the table does not exist then
              it will be upgraded EXCLUSIVE MDL lock. If table exist
              then open_table() will return with an error or warning.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_FOR_CREATE;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num); //temporal | if not exists 标记
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2426 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {  //没有检测到建表的引擎，使用默认的引擎
				
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
				
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2447 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2452 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2456 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2459 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2464 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2468 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2471 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2476 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2480 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2482 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2487 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2494 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2500 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2502 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2506 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2510 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2514 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2525 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(2) - (10)].lex_str).length == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "server name", "");
              MYSQL_YYABORT;
            }
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2544 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2548 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2552 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2556 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2560 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2565 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2569 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2576 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2596 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2607 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2614 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2620 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2622 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2628 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2634 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2643 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2650 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2658 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2664 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2670 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2676 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2684 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2686 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2693 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2736 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2765 "D:/mysql56win/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2780 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2794 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2812 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2813 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2817 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2818 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2824 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2826 "D:/mysql56win/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2828 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2830 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2832 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2834 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2836 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2841 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2842 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2843 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2848 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2852 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2859 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2867 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2883 "D:/mysql56win/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 2887 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2905 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2925 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2966 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2994 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2995 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2996 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2997 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 3001 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 3006 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 3012 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 3016 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 3042 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 3053 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 3126 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3142 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3182 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3216 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3225 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3288 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3289 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3295 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3297 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3302 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3325 "D:/mysql56win/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3340 "D:/mysql56win/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3361 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3362 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3367 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3371 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3384 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3390 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3396 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3405 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3420 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3446 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3451 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3453 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3458 "D:/mysql56win/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3466 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3475 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3494 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3496 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3514 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3520 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3522 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3524 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3526 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3528 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3530 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3532 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3534 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3536 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3538 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3540 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3542 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3547 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3563 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3578 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3580 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3585 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3591 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3600 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3606 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3615 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3623 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3652 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3661 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3663 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3672 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3677 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3683 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3692 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3700 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3702 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3704 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3706 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3708 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3710 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3712 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3714 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3716 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3718 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3720 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3722 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3724 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3729 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3749 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3772 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3774 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3776 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3797 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3799 "D:/mysql56win/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3807 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3817 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3864 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3874 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3920 "D:/mysql56win/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3931 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3943 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 4002 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 4052 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 4076 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 4097 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 4102 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 4132 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 4150 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 4170 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 4179 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 4215 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 4234 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4257 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4268 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4312 "D:/mysql56win/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4319 "D:/mysql56win/sql/sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4326 "D:/mysql56win/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4343 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4352 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4393 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4401 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4410 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4446 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4454 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4472 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4490 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4509 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4510 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 4515 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4531 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4548 "D:/mysql56win/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4559 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4567 "D:/mysql56win/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4582 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4618 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4633 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4642 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4680 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4696 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4705 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4746 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4748 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4753 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4755 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4757 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4791 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 4793 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 4803 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 4809 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 4832 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4930 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4938 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4946 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4954 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4966 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4978 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4983 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4988 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4996 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 5004 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 5012 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 5020 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 5028 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 5036 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 5044 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 5057 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 5070 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 5084 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 5089 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 5101 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 5103 "D:/mysql56win/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 5153 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 5156 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 5158 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 5173 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 5192 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 5195 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 5196 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 5200 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 5202 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 5203 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 5205 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 5206 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 5211 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 5247 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 5253 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 5271 "D:/mysql56win/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 5290 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 5302 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 5311 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 5318 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 5319 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 5321 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 5323 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 5325 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 5327 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 5331 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 5333 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 5338 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 5340 "D:/mysql56win/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 5356 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 5357 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 5361 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 5362 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 5367 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 5386 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 5396 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 5407 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5415 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5417 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5432 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5434 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5435 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5438 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5443 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5447 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5448 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5453 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5471 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5486 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5488 "D:/mysql56win/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5503 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5519 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5540 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5541 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5546 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5565 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5570 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_string_char_length(&(yyvsp[(1) - (1)].lex_str), "", NAME_CHAR_LEN,
                                         system_charset_info, true))
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5585 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5607 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5622 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5624 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5639 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5644 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5665 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5670 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5699 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5710 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5711 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5716 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5727 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5729 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5752 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5753 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5758 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5771 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5791 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5805 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5830 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5831 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5836 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5868 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5873 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (check_string_char_length(&(yyvsp[(1) - (1)].lex_str), "", NAME_CHAR_LEN,
                                         system_charset_info, true))
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5885 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5886 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5890 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5891 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5896 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5898 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5904 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5906 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5908 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5910 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5912 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5914 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5923 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5938 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5942 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5952 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5953 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5957 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5958 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5962 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5963 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5967 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5968 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5972 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5973 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5977 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5978 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5982 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5986 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5987 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 6008 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 6013 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 6018 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 6023 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 6028 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 6033 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 6038 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 6043 "D:/mysql56win/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 6058 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 6064 "D:/mysql56win/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 6079 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 6084 "D:/mysql56win/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 6099 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 6105 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 6123 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 6128 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 6133 "D:/mysql56win/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 6138 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 6143 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 6148 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 6152 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 6176 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 6181 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 6186 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 6191 "D:/mysql56win/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 6193 "D:/mysql56win/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 6195 "D:/mysql56win/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 6197 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 6203 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 6211 "D:/mysql56win/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 6229 "D:/mysql56win/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 6246 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                thd->lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 6272 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 6289 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 6290 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 6291 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 6292 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 6293 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 6294 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 6298 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 6299 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 6300 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 6304 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 6309 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 6310 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 6311 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 6312 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 6318 "D:/mysql56win/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 6336 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 6343 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 6349 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 6355 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 6361 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 6366 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 6385 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 6400 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 6401 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 6405 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 6410 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 6419 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 6432 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 6433 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 6434 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 6436 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 6441 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 6445 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 6450 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 6455 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 6459 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 6464 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 6469 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 6475 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 6480 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 6486 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 6490 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 6495 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6500 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6518 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6520 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 6522 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6538 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6540 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6545 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6550 "D:/mysql56win/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6562 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6567 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6572 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 6577 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6579 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6581 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6583 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6585 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6587 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6589 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6591 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6593 "D:/mysql56win/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6595 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6597 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6599 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6601 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6603 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6611 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6612 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6614 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6619 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6620 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6621 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6622 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6623 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6627 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6631 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6632 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6636 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6637 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6641 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6642 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6643 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6644 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6645 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6649 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6650 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6651 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6652 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6653 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6658 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6663 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6665 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6670 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6672 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6674 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6679 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6688 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6689 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6693 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6694 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6696 "D:/mysql56win/sql/sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6703 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6704 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6708 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6709 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6713 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6714 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6715 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6719 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6720 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6721 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6722 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6725 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6726 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6730 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6731 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6735 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6736 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6740 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6745 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6746 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6747 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6748 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6749 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6751 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6757 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6763 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6769 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6774 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6776 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6789 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6795 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6801 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6807 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6812 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6817 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6826 "D:/mysql56win/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6847 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6856 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6860 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6861 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6866 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6873 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6877 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6878 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6882 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6883 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6888 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6896 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6900 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6901 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6906 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6913 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6914 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6918 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6919 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6923 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6924 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6929 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6931 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6935 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6942 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6951 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6956 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6963 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6966 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6967 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6969 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6974 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6981 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6982 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6987 "D:/mysql56win/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6995 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6999 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 7000 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 7004 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 7007 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 7008 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 7009 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 7010 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 7015 "D:/mysql56win/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 7023 "D:/mysql56win/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 7029 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 7030 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 7035 "D:/mysql56win/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 7044 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 7045 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 7049 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 7050 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 7064 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 7071 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 7077 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 7084 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 7096 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 7098 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 7100 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 7102 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 7107 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 7113 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 7119 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 7126 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 7133 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 7141 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 7142 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 7143 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 7144 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 7145 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 7149 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 7153 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 7154 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 7158 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 7159 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 7163 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 7168 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 7169 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 7170 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 7174 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 7175 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 7179 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 7184 "D:/mysql56win/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 7196 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 7213 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 7218 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 7223 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 7243 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 7244 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 7249 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 7250 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 7265 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 7277 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 7278 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 7279 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 7283 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 7284 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 7289 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 7295 "D:/mysql56win/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 7308 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 7309 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 7313 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 7314 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 7318 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 7319 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 7327 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
            if (lex->ignore)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                  ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                  "IGNORE");
            }
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 7360 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 7372 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 7377 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 7386 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 7397 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 7408 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 7415 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 7426 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 7433 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 7444 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 7451 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 7463 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 7465 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 7485 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 7498 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 7503 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 7508 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 7513 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 7518 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 7525 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 7532 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 7537 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 7544 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 7545 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 7546 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 7547 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 7551 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7553 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7564 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7565 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7569 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7570 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7576 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7584 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7606 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7611 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7618 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7632 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7644 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7657 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7670 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7677 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7690 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7717 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7724 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7732 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7744 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7750 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7755 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7762 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7777 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7781 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7785 "D:/mysql56win/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7792 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7793 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7798 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7818 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7827 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7831 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7836 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7841 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7847 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7851 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7860 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7872 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7876 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7885 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7894 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7903 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7912 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7918 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7924 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7933 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7942 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7970 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7991 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 8001 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 8005 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 8022 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 8027 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 8038 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 8043 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 8053 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 8054 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 8058 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 8059 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 8063 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 8064 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 8065 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 8069 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 8071 "D:/mysql56win/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 8076 "D:/mysql56win/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 8083 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 8084 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 8085 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 8086 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 8091 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            /* Clean previous slave connection values */
            lex->slave_connection.reset();
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            lex->mi.set_unspecified();
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 8103 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              It is not possible to set user's information when
              one is trying to start the SQL Thread.
            */
            if ((Lex->slave_thd_opt & SLAVE_SQL) == SLAVE_SQL &&
                (Lex->slave_thd_opt & SLAVE_IO) != SLAVE_IO &&
                (Lex->slave_connection.user ||
                 Lex->slave_connection.password ||
                 Lex->slave_connection.plugin_auth ||
                 Lex->slave_connection.plugin_dir))
            {
              my_error(ER_SQLTHREAD_WITH_SECURE_SLAVE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 8120 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 8130 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 8146 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 8150 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 8157 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 8161 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 8168 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 8172 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 8176 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 8187 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 8191 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->slave_connection.user= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 8197 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 8201 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->slave_connection.password= (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 8207 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 8211 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_auth= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 8217 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 8221 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_dir= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 8228 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 8232 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 8239 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 8243 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 8250 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_SQL;
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 8254 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_IO;
          }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 8260 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 8262 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                lex->mi.gtid) ||
               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
                lex->mi.gtid) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
                  lex->mi.gtid ||
                  lex->mi.until_after_gaps) ||
                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
                /* with any other coordinates related options       */
                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
                  || lex->mi.relay_log_pos || lex->mi.gtid)
                 && lex->mi.until_after_gaps))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 8289 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_BEFORE_GTIDS;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 8294 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_AFTER_GTIDS;
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 8299 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->mi.until_after_gaps= true;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 8306 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 8313 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 8317 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 8318 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 8319 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 8324 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 8334 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 8345 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 8346 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 8350 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 8351 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 8355 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 8356 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 8357 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 8362 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 8372 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 8384 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 8392 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 8407 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 8418 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 8419 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 8423 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 8424 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 8428 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 8429 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 8430 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 8431 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 8432 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 8433 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 8438 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 8448 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 8459 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 8460 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 8461 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 8466 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 8470 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 8472 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 8479 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 8484 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 8497 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 8510 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 8514 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 8533 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 8543 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 8552 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 8553 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 8558 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 8564 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 8579 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 8589 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 8599 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 8606 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 8617 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8623 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8624 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 8630 "D:/mysql56win/sql/sql_yacc.yy"
    {
             LEX *lex = Lex; //#define Lex  YYTHD->lex ,YYTHD是yyparse的参数 yyparse(THD* YYTHD);
             lex->sql_command = SQLCOM_DBXP_SELECT;
             fprintf(stdout,"dbxp_select reduce\n");
		   }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 8643 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8657 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8667 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8676 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8695 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8703 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8710 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8721 "D:/mysql56win/sql/sql_yacc.yy"
    {
		  //#define Select Lex->current_select
	     Select->options = Select->options | SELECT_DISTINCT;
	  }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8727 "D:/mysql56win/sql/sql_yacc.yy"
    { fprintf(stdout ,"DBXP_select_from reduce \n");}
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8734 "D:/mysql56win/sql/sql_yacc.yy"
    {
	    THD *thd = YYTHD;
		  Item *item = new(thd->mem_root) Item_field(&thd->lex->current_select->context, NULL, NULL, "*");
		  if (item == NULL ) {
		     MYSQL_YYABORT;
		  }
		  if(add_item_to_list(thd, item)) {
		     MYSQL_YYABORT;
		  }
		  (thd->lex->current_select->with_wild)++;
	 }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8747 "D:/mysql56win/sql/sql_yacc.yy"
    {Select->where = 0;}
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8749 "D:/mysql56win/sql/sql_yacc.yy"
    {
	    SELECT_LEX *select = Select;
		  select->where = (yyvsp[(2) - (2)].item);
		  if ((yyvsp[(2) - (2)].item)) {
		    (yyvsp[(2) - (2)].item)->top_level_item();
		  }
	  }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8762 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8777 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8794 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8822 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8854 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->current_select->set_lock_for_tables(TL_WRITE);
              lex->safe_to_cache_query=0;
            }
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8863 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->current_select->
                set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
              lex->safe_to_cache_query=0;
            }
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8878 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8893 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8900 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8924 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8930 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8936 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8937 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8938 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8939 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8940 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8944 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8945 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8951 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 9002 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 9009 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 9052 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 9058 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 9064 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 9070 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 9076 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 9082 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 9088 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 9098 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 9104 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 9110 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 9116 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 9122 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 9132 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 9138 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 9148 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 9154 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 9162 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 9168 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 9178 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 9184 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 9193 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 9203 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 9209 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 9219 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 9225 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 9238 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 9244 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 9250 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 9256 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 9262 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 9268 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 9274 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 9280 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 9286 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 9292 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 9298 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 9304 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 9310 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 9316 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 9345 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 9346 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 9347 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 9348 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 9349 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 9350 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 9354 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 9355 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 9365 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 9381 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 9387 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 9391 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 9397 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 9403 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 9409 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 9415 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 9417 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 9424 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 9431 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 9437 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 9478 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 9487 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 9494 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 9502 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 9508 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 9515 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 9521 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 9535 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 9543 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 9558 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 9564 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 9570 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 9578 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 9584 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 9590 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 9596 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 9602 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 9617 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 9629 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 9635 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 9641 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 9647 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 9653 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 9659 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 9665 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 9671 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 9677 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9683 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9689 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9695 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9701 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9707 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9713 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9719 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9725 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9733 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9754 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9761 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9767 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9774 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9782 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9789 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9795 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9801 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9807 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9812 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9818 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9825 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9831 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9837 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9843 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9849 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9855 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9873 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9879 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9885 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9892 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9899 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9914 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9920 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9926 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9932 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9938 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9945 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9951 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9957 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9963 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9969 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9975 "D:/mysql56win/sql/sql_yacc.yy"
    {
            WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9983 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9996 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 10002 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 10008 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 10014 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 10020 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 10028 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 10034 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 10046 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 10052 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 10058 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 10066 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 10076 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 10082 "D:/mysql56win/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 10098 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 10104 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 10111 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 10118 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 10125 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 10132 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 10139 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 10143 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 10162 "D:/mysql56win/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 10181 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 10235 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 10275 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 10277 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 10281 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 10282 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 10286 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 10287 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 10291 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 10292 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 10297 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 10304 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 10312 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 10338 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 10344 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 10350 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 10356 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 10362 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 10368 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 10377 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 10383 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 10385 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 10387 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 10393 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 10404 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 10410 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 10416 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 10422 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 10428 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 10434 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 10440 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 10446 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 10452 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 10458 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 10462 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 10477 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 10485 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 10492 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item=
              new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 10503 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 10511 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 10526 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 10527 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 10532 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 10537 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 10543 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 10560 "D:/mysql56win/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 10562 "D:/mysql56win/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 10567 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 10576 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 10584 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 10586 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 10588 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 10590 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 10592 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 10594 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 10596 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 10598 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 10600 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 10602 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 10604 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 10608 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 10609 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 10614 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 10621 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 10628 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 10629 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 10634 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10641 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10648 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10649 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10653 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10654 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10659 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10667 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10677 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10679 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10687 "D:/mysql56win/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10698 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10699 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10705 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10707 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10727 "D:/mysql56win/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10729 "D:/mysql56win/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10732 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10740 "D:/mysql56win/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10747 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10755 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10763 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10767 "D:/mysql56win/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10769 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10777 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10785 "D:/mysql56win/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10793 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10797 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10803 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10813 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10821 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10830 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10834 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10841 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10851 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10852 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10853 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10861 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10867 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10881 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10886 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10897 "D:/mysql56win/sql/sql_yacc.yy"
    {
			/* 
			语句 select cl1,cl2 from a, (select cl2 from c) as b;中的
			(select cl2 from c) as b 会匹配到这里来
			
			*/
			
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10943 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 11016 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 11026 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 11031 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 11039 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 11051 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 11070 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
		  
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 11079 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 11088 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 11094 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 11110 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
			
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 11128 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 11135 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 11140 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 11165 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 11166 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 11171 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 11174 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 11175 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 11176 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 11180 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 11181 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 11186 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 11191 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 11204 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 11208 "D:/mysql56win/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 11213 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 11214 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 11219 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 11221 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 11231 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 11242 "D:/mysql56win/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 11254 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 11255 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 11256 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 11257 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 11258 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 11259 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 11260 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 11261 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 11262 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 11263 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 11264 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 11265 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 11269 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 11270 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 11271 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 11272 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 11273 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 11274 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 11275 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 11276 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 11277 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 11281 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 11282 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 11283 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 11284 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 11294 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 11296 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 11309 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 11311 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 11315 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 11327 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 11331 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 11342 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 11347 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 11369 "D:/mysql56win/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 11371 "D:/mysql56win/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 11375 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 11377 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 11397 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            if (lex->current_select->options & SELECT_DISTINCT)
            {
              // DISTINCT+ROLLUP does not work
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP", "DISTINCT");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 11437 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 11456 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 11491 "D:/mysql56win/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 11493 "D:/mysql56win/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 11497 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 11498 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 11499 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 11504 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 11510 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 11514 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 11515 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 11520 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 11527 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 11534 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 11541 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 11551 "D:/mysql56win/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 11578 "D:/mysql56win/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 11582 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 11588 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 11594 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11603 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 11608 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 11617 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11618 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11619 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11620 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11621 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 11622 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 11626 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 11627 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11628 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11629 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11630 "D:/mysql56win/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11634 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11635 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 11636 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 11637 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 11638 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 11642 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 11643 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 11644 "D:/mysql56win/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 11645 "D:/mysql56win/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 11650 "D:/mysql56win/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11661 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(ME_FATALERROR));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 11694 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 11696 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11700 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11708 "D:/mysql56win/sql/sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11720 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11726 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 11731 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11736 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11755 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11794 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11806 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11814 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11817 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11829 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11840 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11846 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11857 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11866 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11867 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11868 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11883 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11885 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11892 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11913 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11934 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11946 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11950 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11958 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11960 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11966 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11973 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11978 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11983 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11998 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 12009 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 12027 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 12037 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 12038 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 12042 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 12043 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 12066 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 12074 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 12079 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 12084 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 12091 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 12096 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 12101 "D:/mysql56win/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 12113 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 12115 "D:/mysql56win/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 12127 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 12131 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 12133 "D:/mysql56win/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 12148 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 12149 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 12154 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 12162 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 12163 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 12164 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 12166 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 12176 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 12177 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 12181 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 12182 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 12184 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 12185 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 12187 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 12188 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 12203 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 12212 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 12213 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 12217 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 12218 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 12223 "D:/mysql56win/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 12228 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 12236 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 12242 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 12247 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 12254 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 12256 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 12265 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 12273 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 12281 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 12299 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 12309 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 12322 "D:/mysql56win/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 12331 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 12332 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 12339 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 12354 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 12365 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 12367 "D:/mysql56win/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 12373 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 12378 "D:/mysql56win/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 12384 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 12397 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 12410 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 12425 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 12426 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 12430 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 12431 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 12435 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 12436 "D:/mysql56win/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 12437 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 12442 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 12453 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 12478 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 12482 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 12486 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 12490 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 12494 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 12498 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 12502 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 12506 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 12510 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 12517 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 12521 "D:/mysql56win/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 12530 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 12538 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 12545 "D:/mysql56win/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 12552 "D:/mysql56win/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 12560 "D:/mysql56win/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 12568 "D:/mysql56win/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 12576 "D:/mysql56win/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 12584 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 12592 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 12599 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 12601 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 12603 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 12612 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 12616 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 12620 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 12625 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12630 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12639 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 12646 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12651 "D:/mysql56win/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12653 "D:/mysql56win/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12655 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 12657 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12659 "D:/mysql56win/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 12667 "D:/mysql56win/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 12678 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12686 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 12688 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 12696 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 12703 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12710 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 12720 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 12727 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12733 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12742 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 12750 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 12754 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 12758 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12765 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12772 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12778 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12785 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12792 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12797 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12802 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12810 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12812 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12814 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12828 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12829 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12833 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12834 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12843 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12844 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 12848 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 12849 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12855 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12862 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12873 "D:/mysql56win/sql/sql_yacc.yy"
    {
              LEX *lex= Lex;
              lex->sql_command = SQLCOM_DBXP_EXPLAIN_SELECT;
              lex->select_lex.db= 0;
              lex->verbose= 0;
          }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12880 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12891 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12895 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12897 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12915 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12920 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12926 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12932 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12953 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12954 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12956 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12970 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12977 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12982 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12991 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12992 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12997 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12999 "D:/mysql56win/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 13010 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 13018 "D:/mysql56win/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 13033 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 13038 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 13040 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 13042 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 13044 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 13046 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 13048 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 13050 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 13052 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 13054 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 13056 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 13058 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 13060 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 13062 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 13066 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 13067 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 13072 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 13077 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 13086 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 13087 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 13088 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 13089 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 13093 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 13094 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 13099 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 13105 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 13114 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 13118 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 13130 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 13139 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 13140 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 13141 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 13148 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 13159 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 13171 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 13181 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 13191 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 13195 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 13199 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 13200 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 13204 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 13205 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 13209 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 13211 "D:/mysql56win/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 13222 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 13226 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 13227 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 13228 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 13243 "D:/mysql56win/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 13248 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 13255 "D:/mysql56win/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 13260 "D:/mysql56win/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 13278 "D:/mysql56win/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 13283 "D:/mysql56win/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 13290 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 13292 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 13297 "D:/mysql56win/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 13304 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 13306 "D:/mysql56win/sql/sql_yacc.yy"
    { }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 13310 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 13311 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 13312 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 13317 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 13319 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 13323 "D:/mysql56win/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 13325 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 13333 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 13334 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 13344 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint length= (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string));
            String *val= new (YYTHD->mem_root) String((yyvsp[(3) - (5)].simple_string),
                                                      length,
                                                      YYTHD->charset());
            if (val == NULL)
              MYSQL_YYABORT;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) ||
                lex->value_list.push_back((yyvsp[(4) - (5)].item)) ||
                lex->load_set_str_list.push_back(val))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), length, YYTHD->charset());
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 13364 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 13388 "D:/mysql56win/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 13400 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 13411 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 13430 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 13438 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 13450 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 13465 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 13485 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 13486 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 13488 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 13496 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 13497 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 13498 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 13500 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= YYLIP;
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            lip->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 13515 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 13521 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 13527 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 13533 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 13539 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value,
                                                    true, //send error
                                                    true))  //truncate
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 13570 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value,
                                                    true, //send error
                                                    true)) //truncate
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 13603 "D:/mysql56win/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 13613 "D:/mysql56win/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 13623 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 13629 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 13638 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 13650 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 13656 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 13662 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 13677 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 13678 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 13683 "D:/mysql56win/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 13692 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 13707 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 13712 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 13762 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13767 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13784 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13789 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_cur_instr_trig_field_items.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13869 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13894 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13924 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13926 "D:/mysql56win/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13942 "D:/mysql56win/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13951 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13956 "D:/mysql56win/sql/sql_yacc.yy"
    {//table_name
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13962 "D:/mysql56win/sql/sql_yacc.yy"
    {// db_name.table_name
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13968 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13978 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13984 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13993 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 14002 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 14004 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 14034 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!strcont((yyvsp[(1) - (1)].lex_str).str, "\n"))
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 14047 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 14063 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 14079 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 14095 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 14097 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 14107 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 14109 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 14119 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 14120 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 14121 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 14126 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 14153 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);
            trim_whitespace(system_charset_info, &(yyval.lex_user)->host);
          }
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 14186 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 14200 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 14201 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 14202 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 14203 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 14204 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 14205 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 14206 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 14207 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 14208 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 14209 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 14210 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 14211 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 14212 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 14213 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 14214 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 14215 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 14216 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 14217 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 14218 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 14219 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 14220 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 14221 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 14222 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 14223 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 14224 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 14225 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 14226 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 14227 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 14228 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 14229 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 14230 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 14231 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 14232 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 14233 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 14234 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 14235 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 14236 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 14237 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 14238 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 14239 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 14240 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 14241 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 14242 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 14243 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 14244 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 14245 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 14246 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 14247 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 14248 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 14249 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 14259 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 14260 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 14261 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 14262 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 14263 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 14264 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 14265 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 14266 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 14267 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 14268 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 14269 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 14270 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 14271 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 14272 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 14273 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 14274 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 14275 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 14276 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 14277 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 14278 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 14279 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 14280 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 14281 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 14282 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 14283 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 14284 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 14285 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 14286 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 14287 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 14288 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 14289 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 14290 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 14291 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 14292 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 14293 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 14294 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 14295 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 14296 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 14297 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 14298 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 14299 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 14300 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 14301 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 14302 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 14303 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 14308 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 14309 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 14310 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 14311 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 14312 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 14313 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 14314 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 14315 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 14316 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 14317 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 14318 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 14319 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 14320 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 14321 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 14322 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 14323 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 14324 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 14325 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 14326 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 14327 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 14328 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 14329 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 14330 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 14331 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 14332 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 14333 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 14334 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 14335 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 14336 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 14337 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 14338 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 14339 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 14340 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 14341 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 14342 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 14343 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 14344 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 14345 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 14346 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 14347 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 14348 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 14349 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 14350 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 14351 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 14352 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 14353 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 14354 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 14355 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 14356 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 14357 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 14358 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 14359 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 14360 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14361 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14362 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14363 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14364 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14365 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14366 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14367 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14368 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14369 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14370 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14371 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14372 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14373 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14374 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14375 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14376 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14377 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14378 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14379 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14380 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14381 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14382 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14383 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14384 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14385 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14386 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14387 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14388 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14389 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14390 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14391 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14392 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14393 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14394 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14395 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14396 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14397 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14398 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14399 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14400 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14401 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14402 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14403 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14404 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14405 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14406 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14407 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14408 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14409 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14410 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14411 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14412 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14413 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14414 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14415 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14416 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14417 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14418 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14419 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14420 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14421 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14422 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14423 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14424 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14425 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14426 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14427 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14428 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14429 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14430 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14431 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14432 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14433 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14434 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14435 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14436 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14437 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14438 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14439 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14440 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14441 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14442 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14443 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14444 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14445 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14446 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14447 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14448 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14449 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14450 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14451 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14452 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14453 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14454 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14455 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14456 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14457 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14458 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14459 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14460 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14461 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14462 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14463 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14464 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14465 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14466 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14467 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14468 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14469 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14470 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14471 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14472 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14473 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14474 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14475 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14476 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14477 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14478 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14479 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14480 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14481 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14482 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14483 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14484 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14485 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14486 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14487 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14488 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14489 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14490 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14491 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14492 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14493 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14494 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14495 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14496 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14497 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14498 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14499 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14500 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14501 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14502 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14503 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14504 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14505 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14506 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14507 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14508 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14509 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14510 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14511 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14512 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14513 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14514 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14515 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14516 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14517 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14518 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14519 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14520 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14521 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14522 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14523 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14524 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14525 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14526 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14527 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14528 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14529 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14530 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14531 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14532 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14533 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14534 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14535 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14536 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14537 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14538 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14539 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14540 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14541 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14542 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14543 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14544 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14545 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14546 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14547 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14548 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14549 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14550 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14551 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14552 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14553 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14554 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14555 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14556 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14557 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14558 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14559 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14560 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14561 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14562 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14563 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14575 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14587 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14594 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14600 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14604 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14609 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14619 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14625 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14639 "D:/mysql56win/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14643 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14648 "D:/mysql56win/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14652 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14661 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14669 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14670 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14671 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14675 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14676 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14677 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14678 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14682 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14683 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14684 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14685 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14691 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14716 "D:/mysql56win/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14723 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14816 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14827 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14840 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14856 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14869 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14891 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14926 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            /*
              'is_change_password' should be set if the user is setting his
              own password. This is later used to determine if the password
              expiration flag should be reset.
              Either the user exactly matches the currently authroized user or
              the CURRENT_USER keyword was used.

              If CURRENT_USER was used for the <user> rule then
              user->user.str=0. See rule below:
              
              user:
                 [..]
              | CURRENT_USER optional_braces
                {
                 [..]
                  memset($$, 0, sizeof(LEX_USER));
                }
            */
            if (user->user.str ||
                match_authorized_user(&current_thd->main_security_ctx,
                                      user))
              lex->is_change_password= TRUE;
            else
              lex->is_change_password= FALSE;
          }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14968 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14996 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 15042 "D:/mysql56win/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 15063 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 15081 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 15098 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 15099 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 15103 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 15104 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 15105 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 15106 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 15110 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 15112 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 15130 "D:/mysql56win/sql/sql_yacc.yy"
    {
		    WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 15143 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 15144 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 15146 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 15152 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 15158 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 15169 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 15180 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 15195 "D:/mysql56win/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 15207 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 15208 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 15210 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 15214 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 15219 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 15230 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 15239 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 15255 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 15271 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 15289 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 15309 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 15310 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 15314 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 15315 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 15319 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 15320 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 15321 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 15322 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 15324 "D:/mysql56win/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 15331 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 15337 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 15338 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 15339 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 15340 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 15341 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 15347 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_REVOKE; }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 15348 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 15353 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 15358 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 15368 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 15378 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 15382 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 15390 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_GRANT; }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 15391 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 15397 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 15403 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 15414 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 15424 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 15438 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->grant == GLOBAL_ACLS &&
                lex->sql_command == SQLCOM_REVOKE)
              lex->sql_command= SQLCOM_REVOKE_ALL;
          }
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 15445 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 15463 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 15464 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 15466 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 15467 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 15469 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 15470 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 15472 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 15473 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 15474 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 15475 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 15476 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 15477 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 15478 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 15479 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 15480 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 15481 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 15482 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 15483 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 15484 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 15485 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 15486 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 15487 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 15488 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 15489 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 15490 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 15491 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 15492 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 15493 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 15494 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 15495 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 15496 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 15497 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 15498 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 15499 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 15503 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 15504 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 15514 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 15524 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 15534 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 15547 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 15562 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 15575 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 15588 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 15600 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 15605 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 15613 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 15618 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 15626 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 15644 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            if (!strcmp((yyvsp[(5) - (5)].lex_str).str, ""))
            {
              String *password= new (YYTHD->mem_root) String ((const char *)"",
                                     YYTHD->variables.character_set_client);
              check_password_policy(password);
            }
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 15664 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 15676 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 15689 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 15697 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 15711 "D:/mysql56win/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 15740 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 15744 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 15748 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 15752 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 15758 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 15763 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 15764 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 15768 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 15769 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 15773 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 15775 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 15781 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 15787 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 15793 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 15802 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 15807 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 15811 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 15812 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 15817 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 15818 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 15819 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 15824 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 15825 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 15826 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 15830 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 15831 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 15836 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 15848 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 15858 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 15867 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 15876 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 15889 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 15895 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 15900 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 15910 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 15911 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 15912 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 15916 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 15917 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 15921 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 15937 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15950 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15951 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 15952 "D:/mysql56win/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15957 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15961 "D:/mysql56win/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 15970 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15976 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 15985 "D:/mysql56win/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 15991 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 16012 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
			//切换当前select
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 16048 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 16050 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 16057 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 16058 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 16059 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 16061 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 16067 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 16072 "D:/mysql56win/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 16083 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 16085 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 16087 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 16120 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 16134 "D:/mysql56win/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 16147 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 16149 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 16151 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 16156 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 16161 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 16163 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 16165 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 16170 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 16172 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 16174 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 16179 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 16196 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 16202 "D:/mysql56win/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 16207 "D:/mysql56win/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 16214 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 16223 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 16240 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 16261 "D:/mysql56win/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 16270 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 16274 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 16281 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 16283 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 16285 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 16287 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 16304 "D:/mysql56win/sql/sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 16310 "D:/mysql56win/sql/sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 16315 "D:/mysql56win/sql/sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 16345 "D:/mysql56win/sql/sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 16380 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 16398 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 16421 "D:/mysql56win/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 16453 "D:/mysql56win/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 16458 "D:/mysql56win/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 16466 "D:/mysql56win/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 16489 "D:/mysql56win/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 16497 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 16555 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 16575 "D:/mysql56win/sql/sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 16588 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 16598 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 16606 "D:/mysql56win/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 16620 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 16624 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 16628 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 16632 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 16636 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 16640 "D:/mysql56win/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 16647 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 16654 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 16661 "D:/mysql56win/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 16670 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 16671 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 16675 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 16676 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 16677 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 16681 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 16682 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 16687 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 16689 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 16694 "D:/mysql56win/sql/sql_yacc.yy"
    {}
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 16695 "D:/mysql56win/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 16700 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 16710 "D:/mysql56win/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 42228 "D:/mysql56win/bld/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YYTHD, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (YYTHD, yymsg);
	  }
	else
	  {
	    yyerror (YYTHD, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, YYTHD);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, YYTHD);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YYTHD, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, YYTHD);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, YYTHD);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



